# @configure_input@
# 

#page
## ------------------------------------------------------------
## Package variables.
## ------------------------------------------------------------

PACKAGE_NAME		= @PACKAGE_NAME@
PACKAGE_VERSION		= @PACKAGE_VERSION@
PACKAGE_VERSION_MAJMIN	= @PACKAGE_VERSION_MAJMIN@
PACKAGE_XVERSION	= @PACKAGE_XVERSION@
PKG_DIR			= $(PACKAGE_NAME)_$(PACKAGE_XVERSION)

#page
## ------------------------------------------------------------
## Directory variables.
## ------------------------------------------------------------

INSTALL_ROOT	=

# If there is not a value for "TMPDIR" from the environment
# we select a common default.
TMPDIR		?= /tmp

top_builddir	= @top_builddir@
ifeq	(,$(top_builddir))
top_builddir	= .
endif

builddir	= @builddir@
ifeq	(,$(builddir))
builddir	= .
endif

top_srcdir	= @top_srcdir@
srcdir		= @srcdir@

prefix		= @prefix@
exec_prefix	= @exec_prefix@

bindir		= @bindir@
datadir		= @datadir@
docdir		= $(prefix)/doc
includedir	= @includedir@
infodir		= @infodir@
libdir		= @libdir@
libexecdir	= @libexecdir@
localstatedir	= @localstatedir@
mandir		= @mandir@
sbindir		= @sbindir@
sharedstatedir	= @sharedstatedir@
sysconfdir	= @sysconfdir@

pkgdatadir	= $(datadir)/$(PKG_DIR)
pkgdocdir	= $(docdir)/$(PKG_DIR)
pkgexampledir	= $(pkgdocdir)/examples
pkghtmldir	= $(pkgdocdir)/HTML
pkgincludedir	= $(includedir)/$(PKG_DIR)
pkglibdir	= $(libdir)/$(PKG_DIR)
pkglibexecdir	= $(libexecdir)/$(PKG_DIR)
pkgsysconfdir	= $(sysconfdir)/$(PKG_DIR)

#page
## ------------------------------------------------------------
## Common programs.
## ------------------------------------------------------------

BASH		= @BASH@
BASHPROG	= @BASH@
SHELL		= @SHELL@
@SET_MAKE@

BZIP		= @BZIP@
CAT		= @CAT@
CP		= @CP@
DATE		= @DATE@
GREP		= @GREP@
GZIP		= @GZIP@
M4		= @M4@
MAKEINFO	= @MAKEINFO@
MKDIR		= @MKDIR@ --parents
RM		= @RM@ --force --recursive --
SED		= @SED@
SYMLINK		= @SYMLINK@ --symbolic
TAR		= @TAR@
TCLSH		= @TCLSH@

INSTALL_DIR_MODE	= 0755
INSTALL_BIN_MODE	= 0555
INSTALL_DATA_MODE	= 0444

INSTALL			= @INSTALL@
INSTALL_DIR		= $(INSTALL) -m $(INSTALL_DIR_MODE) -d
INSTALL_BIN		= $(INSTALL) -m $(INSTALL_BIN_MODE)
INSTALL_DATA		= $(INSTALL) -m $(INSTALL_DATA_MODE)

#page
## ------------------------------------------------------------
## Main rules.
## ------------------------------------------------------------

.PHONY: all clean realclean install
.PHONY: bin bin-clean bin-realclean bin-install
.PHONY: dev dev-clean dev-realclean dev-install
.PHONY: sta sta-clean sta-realclean sta-install
.PHONY: doc doc-clean doc-realclean doc-install

all:		bin dev doc sta
clean:		bin-clean dev-clean doc-clean sta-clean
realclean:	bin-realclean dev-realclean doc-realclean sta-realclean
install:	bin-install dev-install doc-install sta-install


# Makefile --
# 
# Part of: Useless Containers Library (UCL)
# Contents: project rules
# Date: Mon Oct  7, 2002
# 
# Abstract
# 
# 
# 
# Copyright (c) 2002, 2003, 2004 Marco Maggi
# 
# This library is free software;  you can redistribute it and/or modify
# it  under the  terms  of the  GNU  Lesser General  Public License  as
# published by the Free Software  Foundation; either version 2.1 of the
# License, or (at your option) any later version.
# 
# This library is  distributed in the hope that it  will be useful, but
# WITHOUT  ANY   WARRANTY;  without   even  the  implied   warranty  of
# MERCHANTABILITY  or FITNESS FOR  A PARTICULAR  PURPOSE.  See  the GNU
# Lesser General Public License for more details.
# 
# You  should have received  a copy  of the  GNU Lesser  General Public
# License along with  this library; if not, write  to the Free Software
# Foundation, Inc.,  59 Temple Place, Suite 330,  Boston, MA 02111-1307
# USA
# 

#PAGE
## ------------------------------------------------------------
## Compiler rules.
## ------------------------------------------------------------

vpath	%.c	$(top_srcdir)/generic
vpath	%.h	$(top_srcdir)/generic

library_OBJS	= ucl.o ucl_btree.o ucl_circular.o ucl_hash.o \
		  ucl_heap.o ucl_list.o ucl_map.o ucl_string.o \
		  ucl_strtok.o ucl_tree.o ucl_vector.o
#ucl_graph.o

%.o: %.c ucl.h

headers_INSTLST	= $(top_srcdir)/generic/ucl.h

#PAGE
## ------------------------------------------------------------
## Test rules.
## ------------------------------------------------------------

vpath	%.h		$(top_srcdir)/tests
vpath	%.c		$(top_srcdir)/tests

test_CONTAINERS		= btree circular hash heap list map \
			  string strtok tree vector

TEST_SHARED_CFLAGS	= -L. -l$(PACKAGE_NAME)$(PACKAGE_VERSION) -Wl,-rpath,.
TEST_STATIC_CFLAGS	= $(library_STATIC_NAME)

.PHONY: test test-clean

test:		$(foreach t, $(test_CONTAINERS), test-$(t))
test-clean:	$(foreach t, $(test_CONTAINERS), test-$(t)-clean)

showsize: showsize.c
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)

#PAGE
## ------------------------------------------------------------
## Binary tree tests.
## ------------------------------------------------------------

test_btree_SOURCES	= $(wildcard $(top_srcdir)/tests/btree-*.c)
test_btree_OBJECTS	= $(notdir $(test_btree_SOURCES:.c=.o))
test_btree_TARGETS	= $(notdir $(test_btree_SOURCES:.c=))
test_btree_CLEANFILES	= $(test_btree_TARGETS) $(test_btree_OBJECTS) \
			  btreetest.o

.PHONY: test-btree test-btree-clean

test-btree: $(test_btree_TARGETS)
test-btree-clean:
	$(RM) $(test_btree_CLEANFILES)

btree-%.o: btree-%.c btreetest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

btree-%: $(library_SHARED_NAME)
btree-%: btree-%.o btreetest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

btree-%: $(library_STATIC_NAME)
btree-%: btree-%.o btreetest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif

#PAGE
## ------------------------------------------------------------
## Circular list tests.
## ------------------------------------------------------------

test_circular_SOURCES	= $(wildcard $(top_srcdir)/tests/circular-*.c)
test_circular_OBJECTS	= $(notdir $(test_circular_SOURCES:.c=.o))
test_circular_TARGETS	= $(notdir $(test_circular_SOURCES:.c=))
test_circular_CLEANFILES = $(test_circular_TARGETS) $(test_circular_OBJECTS) \
			   circulartest.o

.PHONY: test-circular test-circular-clean

test-circular: $(test_circular_TARGETS)
test-circular-clean:
	$(RM) $(test_circular_CLEANFILES)

circular-%.o: circular-%.c circulartest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

circular-%: $(library_SHARED_NAME)
circular-%: circular-%.o circulartest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

circular-%: $(library_STATIC_NAME)
circular-%: circular-%.o circulartest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif


#PAGE
## ------------------------------------------------------------
## Hash table tests.
## ------------------------------------------------------------

test_hash_SOURCES	= $(wildcard $(top_srcdir)/tests/hash-*.c)
test_hash_OBJECTS	= $(notdir $(test_hash_SOURCES:.c=.o))
test_hash_TARGETS	= $(notdir $(test_hash_SOURCES:.c=))
test_hash_CLEANFILES	= $(test_hash_TARGETS) $(test_hash_OBJECTS) \
			  hashtest.o

.PHONY: test-hash test-hash-clean

test-hash: $(test_hash_TARGETS)
test-hash-clean:
	$(RM) $(test_hash_CLEANFILES)

hash-%.o: hash-%.c hashtest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

hash-%: $(library_SHARED_NAME)
hash-%: hash-%.o hashtest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

hash-%: $(library_STATIC_NAME)
hash-%: hash-%.o hashtest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif


#PAGE
## ------------------------------------------------------------
## Heap tests.
## ------------------------------------------------------------

test_heap_SOURCES	= $(wildcard $(top_srcdir)/tests/heap-*.c)
test_heap_OBJECTS	= $(notdir $(test_heap_SOURCES:.c=.o))
test_heap_TARGETS	= $(notdir $(test_heap_SOURCES:.c=))
test_heap_CLEANFILES	= $(test_heap_TARGETS) $(test_heap_OBJECTS) \
			  heaptest.o

.PHONY: test-heap test-heap-clean

test-heap: $(test_heap_TARGETS)
test-heap-clean:
	$(RM) $(test_heap_CLEANFILES)

heap-%.o: heap-%.c heaptest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

heap-%: $(library_SHARED_NAME)
heap-%: heap-%.o heaptest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

heap-%: $(library_STATIC_NAME)
heap-%: heap-%.o heaptest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif

#PAGE
## ------------------------------------------------------------
## List tests.
## ------------------------------------------------------------

test_list_SOURCES	= $(wildcard $(top_srcdir)/tests/list-*.c)
test_list_OBJECTS	= $(notdir $(test_list_SOURCES:.c=.o))
test_list_TARGETS	= $(notdir $(test_list_SOURCES:.c=))
test_list_CLEANFILES	= $(test_list_TARGETS) $(test_list_OBJECTS) \
			  listtest.o

.PHONY: test-list test-list-clean

test-list: $(test_list_TARGETS)
test-list-clean:
	$(RM) $(test_list_CLEANFILES)

list-%.o: list-%.c listtest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

list-%: $(library_SHARED_NAME)
list-%: list-%.o listtest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

list-%: $(library_STATIC_NAME)
list-%: list-%.o listtest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif


#PAGE
## ------------------------------------------------------------
## Map tests.
## ------------------------------------------------------------

test_map_SOURCES	= $(wildcard $(top_srcdir)/tests/map-*.c)
test_map_OBJECTS	= $(notdir $(test_map_SOURCES:.c=.o))
test_map_TARGETS	= $(notdir $(test_map_SOURCES:.c=))
test_map_CLEANFILES	= $(test_map_TARGETS) $(test_map_OBJECTS) \
			  maptest.o

.PHONY: test-map test-map-clean

test-map: $(test_map_TARGETS)
test-map-clean:
	$(RM) $(test_map_CLEANFILES)

map-%.o: map-%.c maptest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

map-%: $(library_SHARED_NAME)
map-%: map-%.o maptest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

map-%: $(library_STATIC_NAME)
map-%: map-%.o maptest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif


#PAGE
## ------------------------------------------------------------
## String tests.
## ------------------------------------------------------------

test_string_SOURCES	= $(wildcard $(top_srcdir)/tests/string-*.c)
test_string_OBJECTS	= $(notdir $(test_string_SOURCES:.c=.o))
test_string_TARGETS	= $(notdir $(test_string_SOURCES:.c=))
test_string_CLEANFILES	= $(test_string_TARGETS) $(test_string_OBJECTS) \
			  stringtest.o

.PHONY: test-string test-string-clean

test-string: $(test_string_TARGETS)
test-string-clean:
	$(RM) $(test_string_CLEANFILES)

string-%.o: string-%.c stringtest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

string-%: $(library_SHARED_NAME)
string-%: string-%.o stringtest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

string-%: $(library_STATIC_NAME)
string-%: string-%.o stringtest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif


#PAGE
## ------------------------------------------------------------
## Strtok token tests.
## ------------------------------------------------------------

test_strtok_SOURCES	= $(wildcard $(top_srcdir)/tests/strtok-*.c)
test_strtok_OBJECTS	= $(notdir $(test_strtok_SOURCES:.c=.o))
test_strtok_TARGETS	= $(notdir $(test_strtok_SOURCES:.c=))
test_strtok_CLEANFILES	= $(test_strtok_TARGETS) $(test_strtok_OBJECTS) \
			  strtoktest.o

.PHONY: test-strtok test-strtok-clean

test-strtok: $(test_strtok_TARGETS)
test-strtok-clean:
	$(RM) $(test_strtok_CLEANFILES)

strtok-%.o: strtok-%.c strtoktest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

strtok-%: $(library_SHARED_NAME)
strtok-%: strtok-%.o strtoktest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

strtok-%: $(library_STATIC_NAME)
strtok-%: strtok-%.o strtoktest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif


#PAGE
## ------------------------------------------------------------
## Tree tests.
## ------------------------------------------------------------

test_tree_SOURCES	= $(wildcard $(top_srcdir)/tests/tree-*.c)
test_tree_OBJECTS	= $(notdir $(test_tree_SOURCES:.c=.o))
test_tree_TARGETS	= $(notdir $(test_tree_SOURCES:.c=))
test_tree_CLEANFILES	= $(test_tree_TARGETS) $(test_tree_OBJECTS) \
			  treetest.o

.PHONY: test-tree test-tree-clean

test-tree: $(test_tree_TARGETS)
test-tree-clean:
	$(RM) $(test_tree_CLEANFILES)

tree-%.o: tree-%.c treetest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

tree-%: $(library_SHARED_NAME)
tree-%: tree-%.o treetest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

tree-%: $(library_STATIC_NAME)
tree-%: tree-%.o treetest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif


#PAGE
## ------------------------------------------------------------
## Vector tests.
## ------------------------------------------------------------

test_vector_SOURCES	= $(wildcard $(top_srcdir)/tests/vector-*.c)
test_vector_OBJECTS	= $(notdir $(test_vector_SOURCES:.c=.o))
test_vector_TARGETS	= $(notdir $(test_vector_SOURCES:.c=))
test_vector_CLEANFILES	= $(test_vector_TARGETS) $(test_vector_OBJECTS) \
			  vectortest.o

.PHONY: test-vector test-vector-clean

test-vector: $(test_vector_TARGETS)
test-vector-clean:
	$(RM) $(test_vector_CLEANFILES)

vector-%.o: vector-%.c vectortest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

vector-%: $(library_SHARED_NAME)
vector-%: vector-%.o vectortest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

vector-%: $(library_STATIC_NAME)
vector-%: vector-%.o vectortest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif

### end of file
# Local Variables:
# mode: makefile
# page-delimiter: "^#PAGE"
# End:

#page
## ------------------------------------------------------------
## C compiler rules.
## ------------------------------------------------------------

ALL_CFLAGS	= @ALL_CFLAGS@ $(CPPFLAGS) $(INCLUDES) $(DEFS)
CFLAGS		= @CFLAGS@

INCLUDES	= @INCLUDES@ -I /home/devel/src/C/lib/UCL/ucl--stable--0.7/generic -I /home/devel/src/C/lib/UCL/ucl--stable--0.7/tests
DEFS		= @DEFS@
LIBS		= @LIBS@
CPPFLAGS	= @CPPFLAGS@

CC		= @CC@
AR		= @AR@ rc
RANLIB		= @RANLIB@
STRIP		= @STRIP@
GDB		= @GDB@

%.o: %.c
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(<) -c -o $(@)


#page
## ------------------------------------------------------------
## Shared library rules.
## ------------------------------------------------------------

library_shared_OBJS		?= $(library_OBJS)
library_shared_NAME		?= lib$(PACKAGE_NAME)$(PACKAGE_VERSION).so

LDFLAGS				= @LDFLAGS@
library_shared_FLAGS		= -fPIC -shared $(LDFLAGS)

library_shared_INSTLST		= $(library_shared_NAME)
library_shared_INSTDIR		= $(libdir)

library_shared_CLEANFILES	= $(library_shared_NAME) $(library_shared_OBJS)
library_shared_REALCLEANFILES	= $(library_shared_CLEANFILES)

.PHONY: library-shared-all library-shared-clean library-shared-realclean
.PHONY: library-shared-install

library-shared-all: $(library_shared_NAME)
library-shared-clean:
	-$(RM) $(library_shared_CLEANFILES)
library-shared-realclean:
	-$(RM) $(library_shared_REALCLEANFILES)

library-shared-install:

	@echo "Installing library_shared files... "
ifneq	(,$(library_shared_INSTLST))
	@$(INSTALL_DIR) $(INSTALL_ROOT)$(library_shared_INSTDIR)
	@$(INSTALL_DATA) $(library_shared_INSTLST) $(INSTALL_ROOT)$(library_shared_INSTDIR)
	@echo "Done."
else
	$(warning *** empty install list)
endif



$(library_shared_NAME): $(library_shared_OBJS)
	$(CC) -o $(@) $(library_shared_FLAGS) $(library_shared_OBJS)


bin:		library-shared-all
bin-clean:	library-shared-clean
bin-realclean:	library-shared-realclean
bin-install:	library-shared-install

#page
## ------------------------------------------------------------
## Static library rules.
## ------------------------------------------------------------

library_static_OBJS		?= $(library_OBJS)
library_static_NAME		?= lib$(PACKAGE_NAME)$(PACKAGE_VERSION).a

library_static_INSTLST		= $(library_static_NAME)
library_static_INSTDIR		= $(libdir)

library_static_CLEANFILES	= $(library_static_NAME) $(library_static_OBJS)
library_static_REALCLEANFILES	= $(library_static_CLEANFILES)

.PHONY: library-static-all library-static-clean library-static-realclean
.PHONY: library-static-install

library-static-all: $(library_static_NAME)
library-static-clean:
	-$(RM) $(library_static_CLEANFILES)
library-static-realclean:
	-$(RM) $(library_static_REALCLEANFILES)
library-static-install:

	@echo "Installing library_static files... "
ifneq	(,$(library_static_INSTLST))
	@$(INSTALL_DIR) $(INSTALL_ROOT)$(library_static_INSTDIR)
	@$(INSTALL_DATA) $(library_static_INSTLST) $(INSTALL_ROOT)$(library_static_INSTDIR)
	@echo "Done."
else
	$(warning *** empty install list)
endif



$(library_static_NAME): $(library_static_OBJS)
	$(AR) $(@) $(library_static_OBJS)
	-($(RANLIB) $(@) || true) >/dev/null 2>&1


sta:		library-static-all
sta-clean:	library-static-clean
sta-realclean:	library-static-realclean
sta-install:	library-static-install

#page
## ------------------------------------------------------------
## Public headers rules.
## ------------------------------------------------------------

#headers_INSTLST	=
headers_INSTDIR		= $(pkgincludedir)

.PHONY: headers-install

headers-install:

	@echo "Installing headers files... "
ifneq	(,$(headers_INSTLST))
	@$(INSTALL_DIR) $(INSTALL_ROOT)$(headers_INSTDIR)
	@$(INSTALL_DATA) $(headers_INSTLST) $(INSTALL_ROOT)$(headers_INSTDIR)
	@echo "Done."
else
	$(warning *** empty install list)
endif


dev-install: headers-install

#page
## ------------------------------------------------------------
## Generic package documentation.
## ------------------------------------------------------------

# doc_generic_TARGETS		= 
# doc_generic_CLEANFILES	=
# doc_generic_REALCLEANFILES	=

doc_generic_INSTLST		?= $(filter-out %~, \
				  $(wildcard $(addprefix $(top_srcdir)/, \
				  README* COPYING license.terms INSTALL BUGS \
				  NEWS ChangeLog DESCRIPTION.txt TODO)))
doc_generic_INSTDIR		= $(pkgdocdir)

.PHONY: doc-generic-all doc-generic-clean doc-generic-realclean
.PHONY: doc-generic-install

doc-generic-all: $(doc_generic_TARGETS)
doc-generic-clean:
	-$(RM) $(doc_generic_CLEANFILES)
doc-generic-realclean:
	-$(RM) $(doc_generic_REALCLEANFILES)

doc-generic-install:

	@echo "Installing doc_generic files... "
ifneq	(,$(doc_generic_INSTLST))
	@$(INSTALL_DIR) $(INSTALL_ROOT)$(doc_generic_INSTDIR)
	@$(INSTALL_DATA) $(doc_generic_INSTLST) $(INSTALL_ROOT)$(doc_generic_INSTDIR)
	@echo "Done."
else
	$(warning *** empty install list)
endif


doc:		doc-generic-all
doc-clean:	doc-generic-clean
doc-realclean:	doc-generic-realclean
doc-install:	doc-generic-install

#page
## ------------------------------------------------------------
## Package documentation in Texinfo format.
## ------------------------------------------------------------

doc_texinfo_SRCDIR	= /home/devel/src/C/lib/UCL/ucl--stable--0.7/doc
doc_texinfo_SOURCES	= $(wildcard $(doc_texinfo_SRCDIR)/*.texi)

vpath	%.texi		$(doc_texinfo_SRCDIR)
vpath	%.texiinc	$(doc_texinfo_SRCDIR)

doc_texi2html_TARGETS	= $(notdir $(doc_texinfo_SOURCES:.texi=.html))
doc_texi2html_INSTLST	= $(wildcard $(doc_texi2html_TARGETS))
doc_texi2html_INSTDIR	= $(pkghtmldir)

doc_texi2info_TARGETS	= $(notdir $(doc_texinfo_SOURCES:.texi=.info))
doc_texi2info_INSTLST	= $(wildcard $(foreach f, $(doc_texi2info_TARGETS), $(f)*))
doc_texi2info_INSTDIR	= $(infodir)

doc_texinfo_CLEANFILES	 = $(doc_texi2info_INSTLST) $(doc_texi2html_INSTLST)
doc_texinfo_REALCLEANFILES = $(doc_texinfo_CLEANFILES) version.texiinc

MAKEINFO		= @MAKEINFO@
DS_TEXI2INFO_FLAGS	= -I $(doc_texinfo_SRCDIR) -I $(builddir)
DS_TEXI2HTML_FLAGS	= -I $(doc_texinfo_SRCDIR) -I $(builddir) --html --no-split

.PHONY: doc-texinfo-all doc-texinfo-clean doc-texinfo-realclean
.PHONY: doc-texinfo-install

doc-texinfo-all: $(doc_texi2info_TARGETS) $(doc_texi2html_TARGETS)
doc-texinfo-clean:
	-$(RM) $(doc_texinfo_CLEANFILES)
doc-texinfo-realclean:
	-$(RM) $(doc_texinfo_REALCLEANFILES)

doc-texinfo-install:
	@echo "Installing documentation in Info format."

	@echo "Installing doc_texi2info files... "
ifneq	(,$(doc_texi2info_INSTLST))
	@$(INSTALL_DIR) $(INSTALL_ROOT)$(doc_texi2info_INSTDIR)
	@$(INSTALL_DATA) $(doc_texi2info_INSTLST) $(INSTALL_ROOT)$(doc_texi2info_INSTDIR)
	@echo "Done."
else
	$(warning *** empty install list)
endif

	@echo "Installing documentation in HTML format."

	@echo "Installing doc_texi2html files... "
ifneq	(,$(doc_texi2html_INSTLST))
	@$(INSTALL_DIR) $(INSTALL_ROOT)$(doc_texi2html_INSTDIR)
	@$(INSTALL_DATA) $(doc_texi2html_INSTLST) $(INSTALL_ROOT)$(doc_texi2html_INSTDIR)
	@echo "Done."
else
	$(warning *** empty install list)
endif


$(doc_texi2info_TARGETS): %.info : %.texi version.texiinc
	$(MAKEINFO) $(DS_TEXI2INFO_FLAGS) $(<) -o $(@)

$(doc_texi2html_TARGETS): %.html : %.texi version.texiinc
	$(MAKEINFO) $(DS_TEXI2HTML_FLAGS) $(<) -o $(@)

version.texiinc: Makefile
	echo -e "@macro version{}\n$(PACKAGE_XVERSION)\n@end macro\n" >$(@)

doc:		doc-texinfo-all
doc-clean:	doc-texinfo-clean
doc-realclean:	doc-texinfo-realclean
doc-install:	doc-texinfo-install

#page
## ------------------------------------------------------------
## Auto configuration rules.
## ------------------------------------------------------------

ds_config_CLEANFILES	= config.log config.status config.cache Makefile

.PHONY: config-clean

Makefile: $(srcdir)/Makefile.in $(srcdir)/configure $(builddir)/config.status
	$(builddir)/config.status

config.status: $(srcdir)/configure
	$(builddir)/config.status --recheck

config-clean:
	-$(RM) $(ds_config_CLEANFILES)

#page
## ------------------------------------------------------------
## End of makefile.
## ------------------------------------------------------------

.PHONY: echo-variable
echo-variable:
	@echo $($(VARIABLE))

.NOEXPORT:



### end of file
# Local Variables:
# mode: makefile
# End:

