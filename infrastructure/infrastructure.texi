\input texinfo.tex
@c %**start of header
@setfilename infrastructure.info
@settitle DevelStuff Infrastructure
@c %**end of header


@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@include version.texiinc

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Macros: miscellaneous acronyms.
@c ------------------------------------------------------------

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@c ------------------------------------------------------------

@macro api{}
@acronym{API}
@end macro

@c Remember that @url is already used by Texinfo.
@macro urla{}
@acronym{URL}
@end macro

@macro http{}
@acronym{HTTP}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro make{}
@command{make}
@end macro

@macro function{NAME}
@code{\NAME\}
@end macro


@macro cfunction{NAME}
@code{\NAME\()}
@end macro

@macro null{}
@code{NULL}
@end macro

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c External document references.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\, \TITLE\, \TITLE\, libc}
@end macro

@macro gcc{NODE, TITLE}
@ref{\NODE\, \TITLE\, \TITLE\, gcc}
@end macro

@macro makeref{NODE, TITLE}
@ref{\NODE\, \TITLE\, \TITLE\, make}
@end macro

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      DevelStuff Infrastructure

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    DevelStuff Infrastructure

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           develstuff

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marcomaggi@@gna.org}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2005--2008

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes version @version{} of @value{PACKAGE}: a set of
files for @gnu{} Autoconf, @gnu{} Make and @gnu{} Bash that automates
software development tasks.  This software is distributed under the
terms of the @gnu{} General Public License (@gpl{}).

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front--Cover Texts, and no Back--Cover Texts.  A
copy of the license is included in the section entitled ``@gnu{} Free
Documentation License''.
@end quotation
@end copying

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* infrastructure: (infrastructure).     DevelStuff project infrastructure. 
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c ------------------------------------------------------------

@c page
@ifnottex
@node Top
@top @value{TITLE}


@insertcopying
     
@menu
* overview::                    Overview of the document. 

Make library

* make generics::               Generic make functions and modules.
* make transformers::           Make's modules to process files.
* make clang::                  Make's C language support.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* References::                  Bibliography and references.

Indexes

* Concept Index::               An entry for each concept. 
* Function Index::              An entry for each function. 
* Variable Index::              An entry for each variable. 
* Type Index::                  An entry for each type. 
@end menu
@end ifnottex


@c ------------------------------------------------------------

@c page
@node overview
@chapter Overview of this document


@menu
* overview make::               @gnu{} Make library.
@end menu


@noindent
DevelStuff Infrastructure is a set of files for @gnu{} Autoconf, @gnu{}
Make and @gnu{} Bash that automates software development tasks.  The
main purpose is to make full use of the @gnu{} Make facilities to reduce
the complexity of project files.


@c ------------------------------------------------------------

@c page
@node overview make
@section @gnu{} Make library


@menu
* overview make additional::    Additional make files.
* overview make variables::     Understanding @file{Makefile} variables.
* overview make conventions::   Make library conventions.
@end menu


@noindent
Let @code{$@{srcdir@}} be the top source directory of our project; the
idea is to have 3 make files with the following layout:

@example
$@{srcdir@}/Makefile.in
$@{srcdir@}/infrastructure/Makefile.library.in
$@{srcdir@}/configuration/Makefile.ds.in
@end example

@noindent
@file{Makefile.in} is the main thing and its purpose is to load modules
and set non configurable options; @file{Makefile.library.in} is the
DevelStuff Infrastructure library of functions for @gnu{} Make;
@file{Makefile.ds.in} holds the project specific rules.

All the files are meant to be processed by @gnu{} Autoconf with the
directives:

@example
AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([Makefile.library:$@{srcdir@}/infrastructure/Makefile.library.in])
AC_CONFIG_FILES([Makefile.ds:$@{srcdir@}/configuration/Makefile.ds.in])
@end example

@noindent
this chunk of @file{configure.ac} file can be embedded into a set of
custom Autoconf macros; this is what the DevelStuff's macros for
Autoconf do.  The @code{AC_CONFIG_FILES} macros will cause Autoconf to
process the template files and create the output files in the build
directory:

@example
$@{builddir@}/Makefile
$@{builddir@}/Makefile.library
$@{builddir@}/Makefile.ds
@end example

The main make file should look like the following:

@example
## Makefile.in --
#
# @@configure_input@@ 

ds_config_ABI = slackware

include Makefile.library
$(eval $(call ds-begin))
include Makefile.ds
$(eval $(call ds-common-end))

### end of file
# Local Variables:
# mode: makefile
# End:
@end example

@noindent
we see that @file{Makefile.library} is loaded at the beginning; only a
set of variable's settings may preceed it.


@c ------------------------------------------------------------

@c page
@node overview make additional
@subsection Additional make files


@noindent
Additional make files holding non--project specific rules can be
installed under @file{configuration}; example: if we write a set of
@gnu{} Make functions to automate compiling code for the Neko Virtual
Machine, we can create a file:

@example
$@{srcdir@}/configuration/Makefile.neko.in
@end example

@noindent
process it with Autoconf:

@example
AC_CONFIG_FILES([Makefile.neko:$@{srcdir@}/configuration/Makefile.neko.in])
@end example

@noindent
and load it into @file{Makefile.in}:

@example
...
include Makefile.library
include Makefile.neko
...
@end example

The DevelStuff Infrastructure itself does something like that when the C
language infrastructure is used; a make file called
@file{Makefile.variables} is created and it must be loaded with:

@example
...
include Makefile.library
include Makefile.variables
...
@end example

@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c page
@node overview make variables
@subsection Understanding @file{Makefile} variables


@noindent
To use the library effectively we have to understand how @gnu{} Make
substitutes variables.  This section is not a full tutorial on @make{}
variables, just a selection of examples to highlight some of the
features.

This section describes:

@example
$ make --version
GNU Make 3.81
Copyright (C) 2006  Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

This program built for i486-slackware-linux-gnu
@end example

@c ------------------------------------------------------------

@subsubsection Multiple assignment


@noindent
When a variable is assigned multiple times at the toplevel: the last
assignment wins; @make{} first reads the whole @file{Makefile}, then
substitutes the variables in the rule's commands:

@example
alpha   = 123
beta    = 456

.PHONY: all alpha beta

all: alpha beta

alpha:
        @@echo $(alpha) $(beta)

alpha   = abc

beta:
        @@echo $(alpha) $(beta)
@end example

@noindent
example outputs:

@example
$ make all
abc 456
abc 456

$ make beta
abc 456

$ make beta alpha
abc 456
abc 456
@end example

@noindent
changing @code{=} to @code{:=} makes no difference in this example.

@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@subsubsection Expansion of functions


@noindent
Read the @gnu{} Make documentation to understand the expansion rules for
functions; functions are variables, too.  Basically a function is
defined with:

@example
define <funcname>
<funcbody>
endef
@end example

@noindent
and is invoked with:

@example
$(call <funcname>,arg1,arg2,...)
@end example

@noindent
in the body: positional parameters are available as @code{$(1)},
@code{$(2)}, @code{$(3)}, @dots{}

A piece of make file can be defined as function body by expanding a
function with @code{eval}, example:

@example
$(eval $(call <funcname>,arg1,arg2,...))
@end example

@noindent
this evaluates @strong{twice} the body of the function; to prevent the
expansion of a function inside the body use @code{$$}, example:

@example
blu = 123
                
define spiffy
$(blu)
$$(red)
endef
                
$(eval $(call spiffy))
@end example
                
@noindent
is equivalent to putting in the make file:

@example
123
$(red)
@end example


@strong{Expansion warning} Leading tab chars in the body of functions
are not interpreted as valid separators in their @code{eval} expansion;
this means that to put in a make file:

@example
target: prerequisite
        command1
@end example

@noindent
we have to use:

@example
define doit
target: prerequisite ; command1
endef

$(eval $(call doit))
@end example

@noindent
and to put in a make file:

@example
target: prerequisite
        command1
        command2
@end example

@noindent
we have to use:

@example
define doit-commands
command1
command2
endef
                
target: prerequisite ; $(call doit-commands)
@end example
                

@c ------------------------------------------------------------

@c page
@node overview make conventions
@subsection Make library conventions


@enumerate
@item
Function names are lowercase with @code{-} as word--splitting char and
@code{ds} as namespace prefix; example: @function{ds-install-files}.

@item
Private variable names are mixed case with @code{_} as word--splitting
char and @code{ds} as namespace prefix; example:
@code{ds_doc_texinfo_BUILDDIR}.

@item
User configurable interface variables are mixed case with @code{_} as
word--splitting char; example: @code{my_SRCDIR}, in which the prefix
@code{my} is selected by the user.

@item
All the variables that are defined with the @code{?=} operator are meant
to be configurable by the user, either by setting them on the command
line of @make{} or by declaring them before calling the @code{ds-}
function.

@item
All the variable with prefix @code{ds_config_} are meant to be used to
configure library's behaviour.
@end enumerate


@c ------------------------------------------------------------

@c page
@node make generics
@chapter Generic make functions and modules


@menu
* make config::                 Configuring the make library.
* make directories::            Predefined directory variables.
* make init::                   Beginning and ending a make file.
* make file system::            Handling files and directories.
* make misc::                   Miscellaneous functions.
@end menu


@c ------------------------------------------------------------

@c page
@node make config
@section Configuring the make library


@noindent
All the following variables have default values set in
@file{Makefile.library} with the @code{?=} assignment operator and they
have to be set before loading the @file{Makefile.library} file.


Other configuration variables are defined by specific modules; for
example a set of configuration variables are available to configure the
C language infrastructure, @ref{make clang}.

@defvr {Make Configuration Variable} ds_config_VERBOSE_MESSAGES
Set it to empty to turn off messages printed with @function{ds-echo}.
Defaults to @code{yes}.
@end defvr


@defvr {Make Configuration Variable} ds_config_DOC_ENABLED
Set it to empty to exclude the @code{doc} rules; defaults to @code{yes}.
@end defvr


@defvr {Make Configuration Variable} ds_config_DEV_ENABLED
Set it to empty to exclude the @code{dev} rules; defaults to the empty
string.
@end defvr


@defvr {Make Configuration Variable} ds_config_ABI
Select a set of rules to implement @code{abi} and @code{abu} phony
rules; @code{abi} stands for @code{all binary install}, while @code{abu}
stands for @code{all binary upgrade}.  Supported values are:

@table @code
@item direct
invoking @code{make abi} we be equivalent to invoking @code{make all
install} and invoking @code{make abu} will be equivalent to invoking
@code{make all uninstall install};

@item binary
invoking @code{make abi} we be equivalent to invoking @code{make all
bindist bindist-install} and invoking @code{make abu} will be equivalent
to invoking @code{make all uninstall bindist bindist-install}; this
requires:

@example
$(eval $(call ds-binary-distribution))
@end example

@noindent
in the make file;

@item slackware
make use of the Slackware Linux packaging rules; invoking @code{make
abi} will be equivalento to invoking @code{make all slackware
slackware-install} and invoking @code{make abu} will be equivalent to
invoking @code{make all slackware slackware-upgrade}; this requires:

@example
$(eval $(call ds-slackware-distribution))
@end example

@noindent
in the make file;
@end table

@noindent
defaults to @code{direct}.  Notice that this variable changes the
behaviour of the @code{abi} and @code{abu} rules only, the @code{all}
and @code{install} rules are not affected.
@end defvr


@c ------------------------------------------------------------

@c page
@node make directories
@section Predefined directory variables


@noindent
A set of variables is defined to hold the installation directories
layout; there are two sections: directories defined by @gnu{} Autoconf;
directories defined by DevelStuff.  The DevelStuff values are based on
the Autoconf ones.


@defvr {Make Config Variables} ds_config_EXCLUDE_AUTOCONF_DIRECTORIES
If the value of this variable is not the empty string: exclude the
directory variables defined by GNU Autoconf.
@end defvr


@defvr {Make Config Variables}  ds_config_EXCLUDE_DEVELSTUFF_DIRECTORIES
If the value of this variable is not the empty string: exclude the
directory variables defined by DevelStuff.
@end defvr


The directories defined by @gnu{} Autoconf can be placed in template
files by using symbols like @code{@@libdir@@}; the @command{configure}
script will substitute these symbols with values that are themselves
dependent upon other variables; example: the expansion of '@@libdir@@'
can be '$@{prefix@}/lib'.  The presence of @code{$} in the body of a
make function triggers expansion to empty string when a function is
invoked with @code{eval}, and this is not good; for this reason the
following variables are defined at top level in
@file{Makefile.library.in}.


@defvr {Make Variable} DESTDIR
Select a directory to be prepended to the installation directories; it
allows the installation in a temporary location, useful when building
binary packages.  Usage example:

@example
$ make install DESTDIR=/tmp/marco/ucl-1.2.3
@end example
@end defvr


@defvr {Environment Variable} TMPDIR
If its value from the environment is the empty string: it is set to
@file{/tmp}.
@end defvr


@defvr {Make Variable} builddir
The top build directory; defaults to:

@example
$(if @@builddir@@,@@builddir@@,.)
@end example

@noindent
which means @code{@@builddir@@} if it is not the empty string, else
@code{.}.
@end defvr


@defvr {Make Variable} srcdir
The top directory of the source tree; defaults to:

@example
$(if @@srcdir@@,@@srcdir@@,.)
@end example

@noindent
which means @code{@@srcdir@@} if it is not the empty string, else
@code{.}.
@end defvr


@subsection @gnu{} Autoconf directories


@defvr {Make Variable} prefix
The installation prefix for all the files; defaults to @code{@@prefix@@}.
@end defvr


@defvr {Make Variable} exec_prefix
The installation prefix for executable programs; defaults to
@code{@@exec_prefix@@}.
@end defvr


@defvr {Make Variable} bindir
The directory in which to install public executables; defaults to
@code{@@bindir@@}.
@end defvr


@defvr {Make Variable} datarootdir
The installation prefix for platform independent data files; defaults to
@code{@@datarootdir@@}.
@end defvr


@defvr {Make Variable} datadir
The directory in which to install platform independent data files;
defaults to @code{@@datadir@@}.
@end defvr


@defvr {Make Variable} docdir
The directory in which to install documentation files; defaults to
@code{@@datarootdir@@/doc}.
@end defvr


@defvr {Make Variable} includedir
The directory in which to install C language header files; defaults to
@code{@@includedir@@}.
@end defvr


@defvr {Make Variable} infodir
The directory in which to install Info files; defaults to
@code{@@infodir@@}.
@end defvr


@defvr {Make Variable} libdir
The directory in which to install platform dependent libraries; defaults
to @code{@@libdir@@}.
@end defvr


@defvr {Make Variable} libexecdir
The directory in which to install private executables; defaults to
@code{@@libexecdir@@}.
@end defvr


@defvr {Make Variable} localstatedir
The directory in which to install the application's local state files;
defaults to @code{@@localstatedir@@}.
@end defvr


@defvr {Make Variable} mandir
The directory in which to install manual pages; defaults to
@code{@@mandir@@}.
@end defvr


@defvr {Make Variable} sbindir
The directory in which to install system public executables; defaults to
@code{@@sbindir@@}.
@end defvr


@defvr {Make Variable} sharedstatedir
The directory in which to install the application's shared state files;
defaults to @code{@@sharedstatedir@@}.
@end defvr


@defvr {Make Variable} sysconfdir
The directory in which to install system configuration files; defaults
to @code{@@sysconfdir@@}.
@end defvr


@subsection DevelStuff directories


@defvr {Make Variable} PKG_DIR
The package specific directory; defaults to @code{@@PKG_DIR@@}.
@end defvr


@defvr {Make Variable} pkgdatadir
The directory in which to install data files and platform independent
libraries; defaults to @code{@@pkgdatadir@@}.
@end defvr


@defvr {Make Variable} pkgdocdir
The directory in which to install documentation files; defaults to
@code{@@pkgdocdir@@}.
@end defvr


@defvr {Make Variable} pkgexampledir
The directory in which to install example files; defaults to
@code{@@pkgexampledir@@}.
@end defvr


@defvr {Make Variable} pkginfodir
The directory in which to install Info files; defaults to
@code{@@pkginfodir@@}.
@end defvr


@defvr {Make Variable} pkghtmldir
The directory in which to install @acronym{HTML} documentation files;
defaults to @code{@@pkghtmldir@@}.
@end defvr


@defvr {Make Variable} pkgincludedir
The directory in which to install C language header files; defaults to
@code{@@pkgincludedir@@}.
@end defvr


@defvr {Make Variable} pkglibdir
The directory in which to install platform dependent libraries and data
files; defaults to @code{@@pkglibdir@@}.
@end defvr


@defvr {Make Variable} pkglibexecdir
The directory in which to install private executable files; defaults to
@code{@@pkglibexecdir@@}.
@end defvr


@defvr {Make Variable} pkgsysconfdir
The directory in which to install system configuration files; defaults
to @code{@@pkgsysconfdir@@}.
@end defvr


@c ------------------------------------------------------------

@c page
@node make init
@section Beginning and ending a make file


@menu
* make init mandatory::         Other mandatory modules.
* make init variables::         Variables defined by mandatory modules.
* make init rules::             Phony rules defined by mandatory modules.
@end menu


@deffn {Make Module} ds-begin
This must be the first module evaluated in the make file; it does the
following:

@enumerate
@item
load the makefile @file{Makefile.variables};

@item
evaluate the following modules:

@example
ds-package-variables
ds-common-programs
ds-main-rules
ds-tests
ds-examples
ds-generic-documentation
@end example
@end enumerate
@end deffn


@deffn {Make Module} ds-end
This must be the last module evaluated in the make file.
@end deffn


@deffn {Make Module} ds-common-end
When used, it must be the last module evaluated in the makefile.  It
evaluates the following modules:

@example
ds-texinfo-documentation
ds-uninstall-scripts
ds-meta-scripts
ds-pkg-config
ds-autoconf
ds-config-inspection-script
ds-source-distribution
ds-binary-distribution
ds-slackware-distribution
ds-end
@end example
@end deffn


@c ------------------------------------------------------------

@c page
@node make init mandatory
@subsection Other mandatory modules


@deffn {Make Module} ds-package-variables
Define package related variables; this module is not meant to be
evaluated directly because is it evaluated by @code{ds-begin}.  It
expands to the following:

@example
PACKAGE_NAME            = @@PACKAGE_NAME@@
PACKAGE_VERSION         = @@PACKAGE_VERSION@@
PACKAGE_VERSION_MAJMIN  = @@PACKAGE_VERSION_MAJOR_MINOR@@
PACKAGE_XVERSION        = @@PACKAGE_XVERSION@@
PACKAGE_NAME_LOWERCASE  = @@PACKAGE_NAME_LOWERCASE@@
PKG_ID                  = $(PACKAGE_NAME)-$(PACKAGE_XVERSION)
@end example
@end deffn


@deffn {Make Module} ds-common-programs
Define variables that hold the command line of common programs; this
module is not meant to be evaluated directly because is it evaluated by
@code{ds-begin}.  It expands to:

@example
BASH_PROGRAM    = @@BASH_PROGRAM@@
SHELL           = @@SHELL@@
@@SET_MAKE@@

BZIP            = @@BZIP@@
CAT             = @@CAT@@
CP              = @@CP@@ --force --verbose --preserve=mode --
DATE            = @@DATE@@
GREP            = @@GREP@@
GAWK            = @@GAWK@@
GZIP            = @@GZIP@@
M4              = @@M4@@
MAKEINFO        = @@MAKEINFO@@
MKDIR           = @@MKDIR@@ --parents --verbose
MV              = @@MV@@ --verbose --
RM              = @@RM@@ --force --recursive --verbose --
RM_FILE         = @@RM@@ --force --verbose --
RM_SILENT       = @@RM@@ --force --recursive --
RMDIR           = @@RMDIR@@ --parents --ignore-fail-on-non-empty --
SED             = @@SED@@
SYMLINK         = @@SYMLINK@@ --symbolic
TAR             = @@TAR@@
SUDO            = @@SUDO@@

TCLSH           = @@TCLSH@@

INSTALL                 = @@INSTALL@@
INSTALL_DIR_MODE        ?= 0755
INSTALL_BIN_MODE        ?= 0555
INSTALL_DATA_MODE       ?= 0444
INSTALL_LIB_MODE        ?= 0444
@end example
@end deffn


@deffn {Make Module} ds-main-rules
Define all the phony rules required to drive the building and
installation of the package; this module is not meant to be evaluated
directly because is it evaluated by @code{ds-begin}.
@end deffn


@c ------------------------------------------------------------

@c page
@node make init variables
@subsection Variables defined by mandatory modules


@defvr {Make Variable} PACKAGE_NAME
Must be set to the name of the packge; this variable is used when
composing the names of archive files.  Defaults to
@code{@@PACKAGE_NAME@@}.
@end defvr


@defvr {Make Variable} PACKAGE_VERSION
Must be se to the version number of the package, something like:

@example
<major number>.<minor number>.<patch level>
@end example

@noindent
it is almost always better to use @code{PACKAGE_XVERSION}.  Defaults to
@code{@@PACKAGE_VERSION@@}.
@end defvr


@defvr {Make Variable} PACKAGE_XVERSION
Must be se to the extended version number of the package, something like:

@example
<major number>.<minor number><status separator><patch level>
@end example

@noindent
where @code{<status separator>} is one among:

@table @code
@item d
the status of the package is: development version;
@item a
the status of the package is: alpha version;
@item b
the status of the package is: beta version;
@item .
the status of the package is: stable version.
@end table

Defaults to @code{@@PACKAGE_XVERSION@@}.
@end defvr


@defvr {Make Variable} PACKAGE_VERSION_MAJMIN
Must be se to the simplified major/minor version number of the package,
something like:

@example
<major number>.<minor number>
@end example

Defaults to @code{@@PACKAGE_VERSION_MAJOR_MINOR@@}.
@end defvr


@defvr {Make Variable} PKG_ID
Must be set to a string that identifies this package and its version
number; it is used to compose the name of temporary directories and of
versioned installation directories.  Defaults to
@code{$(PACKAGE_NAME)-$(PACKAGE_XVERSION)}.

Notice that this is different from @code{PKG_DIR}.
@end defvr

@c ------------------------------------------------------------

@c page
@node make init rules
@subsection Phony rules defined by mandatory modules


@subsubsection Rules added by @code{ds-end}


@deffn {Phony Rule} echo-variable
Print to stdout the value of a variable; the variable is selected with
the @code{VARIABLE} variable on the command line of @make{}.  Example to
print the value of @code{prefix}:

@example
$ make echo-variable VARIABLE=prefix
/usr/local
@end example
@end deffn


@deffn {Phony Rule} echo-list-variable
Like @code{echo-variable} but assumes that the value of the selected
variable is a list of strings, so it prints each string on its line.
@end deffn


@subsubsection Rules added by @code{ds-main-rules}


@noindent
We have to remember that a rule or target can be added to the following
phony rules simply by putting the specification in the make file; for
example to add a rule to @code{all}:

@example
all: other rule
@end example

@noindent
the following documentation lists the default rules.


@deffn {Phony Rule} all
It is meant to build all the package targets; this must be the first
rule defined in the make file, so that it is the one invoked when
running @make{} with no arguments.  Invoking @code{make all} is
equivalent to invoking @code{make bin dev doc}, with @code{dev} included
only if the development targets are enabled and @code{doc} included only
if the documentation targets are enabled.
@end deffn


@deffn {Phony Rule} clean
It is meant to remove all the ordinary package targets, like C language
object files, programs, libraries.  Invoking @code{make clean} is
equivalent to invoking:

@example
$ make bin-clean dev-clean doc-clean nop-clean
@end example

@noindent
with @code{dev-clean} included only if the development targets are
enabled and @code{doc-clean} included only if the documentation targets
are enabled.
@end deffn


@deffn {Phony Rule} realclean
It is meant to remove all the special and ordinary package targets;
examples of special targets are the result of running @command{flex} or
@command{bison}.

Invoking @code{make realclean} is equivalent to invoking:

@example
$ make bin-realclean dev-realclean doc-realclean \
       clean nop-realclean
@end example

@noindent
with @code{dev-realclean} included only if the development targets are
enabled and @code{doc-realclean} included only if the documentation
targets are enabled.
@end deffn


@deffn {Phony Rule} install
It is meant to install on the system the targets of the package.
Invoking @code{make install} is equivalent to invoking:

@example
$ make \
       bin-install bin-install-aux \
       dev-install dev-install-aux \
       doc-install doc-install-aux
@end example

@noindent
with @code{dev-install} and @code{dev-install-aux} included only if the
development targets are enabled and @code{doc-install} and
@code{doc-install-aux} included only if the documentation targets are
enabled.
@end deffn


@deffn {Phony Rule} bin
@deffnx {Phony Rule} bin-all
These are meant to build the main targets of the package.
@end deffn


@deffn {Phony Rule} doc
@deffnx {Phony Rule} doc-all
These are meant to build the documentation targets of the package.
@end deffn


@deffn {Phony Rule} dev
@deffnx {Phony Rule} dev-all
These are meant to build the development targets of the package, like
static C language libraries.
@end deffn


@deffn {Phony Rule} bin-clean
@deffnx {Phony Rule} doc-clean
@deffnx {Phony Rule} dev-clean
These are meant to remove the ordinary targets produced by the
associated building rule.
@end deffn


@deffn {Phony Rule} bin-realclean
@deffnx {Phony Rule} doc-realclean
@deffnx {Phony Rule} dev-realclean
These are meant to remove the ordinary and special targets produced by
the associated building rule.
@end deffn


@deffn {Phony Rule} bin-install
@deffnx {Phony Rule} doc-install
@deffnx {Phony Rule} dev-install
These are meant to install the targets produced by the associated
building rule.  If you need to add special rules as prerequisites of
these use the @code{-aux} rules below.
@end deffn


@deffn {Phony Rule} bin-install-aux
@deffnx {Phony Rule} doc-install-aux
@deffnx {Phony Rule} dev-install-aux
These are meant to install additional targets that are organised outside
of modules.  This is meant to be used only in exceptional situations or
temporarily while we decide how to organise things.

Each auxiliary rule is a prerequisite of the associated main rule,
@code{bin-install-aux} is a prerequisite of @code{bin-install} and so
on.
@end deffn


@deffn {Phony Rule} abi
@deffnx {Phony Rule} abu
These are short aliases for all+binary+install and all+binary+upgrade;
@ref{make config}, for details about how to configure them with the
@code{ds_config_ABI} variable.
@end deffn


@deffn {Phony Rule} clean-builddir
It is mean to remove the whole build directory; this means invoking:

@example
$(RM) $(builddir)/*
@end example

@noindent
beware with it!!! Always build the package outside of the source tree or
in a specific subdirectory of the source tree; the suggested way is to
create a build directory like @code{$(srcdir)/=build}.
@end deffn


@deffn {Phony Rule} config-clean
Remove the configuration files from the build directory:
@file{config.log}, @file{config.status}, @file{config.cache}, and
everything matching @code{Makefile*}.
@end deffn


@deffn {Phony Rule} nop
A rule that can be used as second argument to @code{ds-module} as an
alternative to @code{bin}, @code{dev}, @code{doc}.  It makes the module
independent from the main sections of the package.
@end deffn


@deffn {Phony Rule} nop-clean
@deffnx {Phony Rule} nop-realclean
Cleaning rules associated with @code{nop}.
@end deffn


@deffn {Phony Rule} print-install-layout
@deffnx {Phony Rule} print-install-files-layout
@deffnx {Phony Rule} print-install-directories-layout
These are meant to print to stdout the installation layout of the
package.  All the modules written with @code{ds-module} have support for
this.

Invoking @code{print-install-layout} is equivalent to invoking:

@example
$ make \
       bin-print-install-layout \
       dev-print-install-layout \
       doc-print-install-layout
@end example

@noindent
with @code{dev-print-install-layout} included only if the development
targets are enabled and @code{doc-print-install-layout} included only if
the documentation targets are enabled.

Invoking @code{print-install-files-layout} is equivalent to invoking:

@example
$ make \
       bin-print-install-files-layout \
       dev-print-install-files-layout \
       doc-print-install-files-layout
@end example

@noindent
with @code{dev-print-install-files-layout} included only if the
development targets are enabled and
@code{doc-print-install-files-layout} included only if the documentation
targets are enabled.

Invoking @code{print-install-directories-layout} is equivalent to
invoking:

@example
$ make \
       bin-print-install-directories-layout \
       dev-print-install-directories-layout \
       doc-print-install-directories-layout
@end example

@noindent
with @code{dev-print-install-directories-layout} included only if the
development targets are enabled and
@code{doc-print-install-directories-layout} included only if the
documentation targets are enabled.
@end deffn


@deffn {Phony Rules} bin-print-install-layout
@deffnx {Phony Rules} dev-print-install-layout
@deffnx {Phony Rules} doc-print-install-layout
@deffnx {Phony Rules} bin-print-install-files-layout
@deffnx {Phony Rules} dev-print-install-files-layout
@deffnx {Phony Rules} doc-print-install-files-layout
@deffnx {Phony Rules} bin-print-install-directories-layout
@deffnx {Phony Rules} dev-print-install-directories-layout
@deffnx {Phony Rules} doc-print-install-directories-layout
Print the installation layout of the specified section.
@end deffn


@deffn {Phony Rule} print-uninstall-script
@deffnx {Phony Rule} print-uninstall-files-script
@deffnx {Phony Rule} print-uninstall-directories-script
These are meant to print to stdout an uninstallation @gnu{} Bash script:
a script that when executed will uninstall the package.  The files and
directories rules will print uninstallation commands for files and
directories.  All the modules written with @code{ds-module} have support
for this.

Invoking @code{print-uninstall-script} is equivalent to invoking:

@example
$ make \
       bin-print-uninstall-script \
       dev-print-uninstall-script \
       doc-print-uninstall-script
@end example

@noindent
with @code{dev-print-uninstall-script} included only if the development
targets are enabled and @code{doc-print-uninstall-script} included only if
the documentation targets are enabled.

Invoking @code{print-uninstall-files-script} is equivalent to invoking:

@example
$ make \
       bin-print-uninstall-files-script \
       dev-print-uninstall-files-script \
       doc-print-uninstall-files-script
@end example

@noindent
with @code{dev-print-uninstall-files-script} included only if the
development targets are enabled and
@code{doc-print-uninstall-files-script} included only if the documentation
targets are enabled.

Invoking @code{print-uninstall-directories-script} is equivalent to
invoking:

@example
$ make \
       bin-print-uninstall-directories-script \
       dev-print-uninstall-directories-script \
       doc-print-uninstall-directories-script
@end example

@noindent
with @code{dev-print-uninstall-directories-script} included only if the
development targets are enabled and
@code{doc-print-uninstall-directories-script} included only if the
documentation targets are enabled.
@end deffn


@deffn {Phony Rules} bin-print-uninstall-script
@deffnx {Phony Rules} dev-print-uninstall-script
@deffnx {Phony Rules} doc-print-uninstall-script
@deffnx {Phony Rules} bin-print-uninstall-files-script
@deffnx {Phony Rules} dev-print-uninstall-files-script
@deffnx {Phony Rules} doc-print-uninstall-files-script
@deffnx {Phony Rules} bin-print-uninstall-directories-script
@deffnx {Phony Rules} dev-print-uninstall-directories-script
@deffnx {Phony Rules} doc-print-uninstall-directories-script
Print the uninstall script of the specified section.
@end deffn


@c ------------------------------------------------------------

@c page
@node make file system
@section Handling files and directories


@menu
* make fs inspection::          File system inspection functions.
* make fs srcdir::              Handling source directories.
* make fs builddir::            Handling build directories.
* make fs cleanfiles::          Removing target files.
@end menu

@c ------------------------------------------------------------

@c page
@node make fs inspection
@subsection File system inspection functions


@deffn {Make Function} ds-drop-backup-files @var{list_of_pathnames}
Filter out backup files, that is files whose name ends with @code{~}.
@end deffn


@deffn {Make Function} ds-drop-equal-prefixed-files @var{list_of_pathnames}
Filter out files whose name begins with @code{=}; notice that it is the
name of the file that is checked, not the directory part of the
pathname.
@end deffn


@deffn {Make Function} ds-drop-unwanted-files @var{list_of_pathnames}
Applies the following functions: @function{ds-drop-backup-files},
@function{ds-drop-equal-prefixed-files}.
@end deffn


@deffn {Make Function} ds-files-from-dir @var{directory} [@var{list_of_patterns}]
Return the list of files in @var{directory}, filtering out unwanted
files by applying @function{ds-drop-unwanted-files}.  The optional
@var{list_of_patterns} is used to filter the collected files with
@function{wildcard}; it defaults to @code{*}.  Examples:

@itemize
@item
collect all the files from @code{$(srcdir)/src}:

@example
$(call ds-files-from-dir,$(srcdir)/src)
@end example

@item
collect all the @code{*.h} and @code{*.c} files from
@code{$(srcdir)/src}:

@example
$(call ds-files-from-dir,$(srcdir)/src,*.c *.h)
@end example

@item
collect all the @code{*.h} files from @code{$(srcdir)/include} and all
the @code{*.c} files from @code{$(srcdir)/src}:

@example
$(call ds-files-from-dir,$(srcdir),src/*.c include/*.h)
@end example
@end itemize
@end deffn


@deffn {Make Function} ds-replace-dir @var{new_directory} @var{list_of_pathnames}
Remove the directory part from @var{list_of_pathnames} then prepend
@var{new_directory} to each file name.
@end deffn


@deffn {Make Function} ds-glob @var{identifier} @var{list_of_patterns}
Take a module's source directory from the variable
@code{<IDENTIFIER>_SRCDIR} and apply @function{ds-files-from-dir} to it
and the patterns.  This is meant to acquire the list of source files of
a transformation module.  An error is signalled if the source directory
is the empty string.
@end deffn


@c ------------------------------------------------------------

@c page
@node make fs srcdir
@subsection Handling source directories


@deffn {Make Code Section} ds-srcdir @var{identifier} [@var{directory_pathname}]
Test if the source directory of the module exists in the source tree;
this function makes use of @function{ds-assert-srcdir}.

The module @var{identifier} is the one used when defining a module with
@function{ds-module}, the optional directory pathname defaults to
@code{$(srcdir)/<IDENTIFIER>}.  The variable @code{<IDENTIFIER>_SRCDIR}
is set to the source directory pathname.

Examples:

@itemize
@item
select @code{$(srcdir)/src/mine} as location of source files for a
module identified by @code{mine}:

@example
$(eval $(call ds-srcdir,mine,$(srcdir)/src/mine))
@end example

@item
select @code{$(srcdir)/mine} as location of source files for a module
identified by @code{mine}:

@example
$(eval $(call ds-srcdir,mine))
@end example
@end itemize
@end deffn


@deffn {Make Code Section} ds-assert-srcdir @var{identifier}
Invoke the built in make function @function{error} if a module's source
directory does not exist.  The module's source directory is the value of
the variable @code{<IDENTIFIER>_SRCDIR}.
@end deffn


@c ------------------------------------------------------------

@c page
@node make fs builddir
@subsection Handling build directories


@deffn {Make Code Section} ds-builddir @var{identifier} [@var{directory_pathname}]
Define what is needed to create a module's build directory.  The module
@var{identifier} is the one used when defining a module with
@function{ds-module}, the optional directory pathname defaults to
@code{$(builddir)/<IDENTIFIER>.d}.

The variable @code{<IDENTIFIER>_BUILDDIR} is set to the build directory
pathname.  The phony rule @code{<IDENTIFIER>-make-builddir} is defined
to apply @function{ds-make-builddir} to @var{identifier}; the rule is
added as prerequisite to the rule @code{<IDENTIFIER>-all}.

Examples:

@itemize
@item
select @code{$(builddir)/mine.d} as location of output files for a
module identified by @code{mine}:

@example
$(eval $(call ds-builddir,mine))
@end example

@item
select @code{$(builddir)/objects.d} as location of output files for a
module identified by @code{mine}:

@example
$(eval $(call ds-builddir,mine,$(builddir)/objects.d))
@end example
@end itemize
@end deffn


@deffn {Make Function} ds-make-builddir @var{identifier}
If the directory pathname in the variable @code{<IDENTIFIER>_BUILDDIR}
does not exists: create it using @code{$(MKDIR)}.  If the pathname is
the empty string: an error is signalled.
@end deffn


@c ------------------------------------------------------------

@c page
@node make fs cleanfiles
@subsection Removing target files


@noindent
In the following the @var{identifier} argument is meant to be a module
identifier used when defining a module with @function{ds-module}; this
is not mandatory, though.


@deffn {Make Function} ds-clean-files @var{identifier}
Remove all the files listed in the variable
@code{<IDENTIFIER>_CLEANFILES}.
@end deffn


@deffn {Make Function} ds-real-clean-files @var{identifier}
Remove all the files listed in the variable
@code{<IDENTIFIER>_REALCLEANFILES}.
@end deffn


@deffn {Make Code Section} ds-default-clean-files-variables @var{identifier}
Add variables needed to clean the targets of a module that creates only
ordinary output files.  The following is added to the make file:

@example
<IDENTIFIER>_CLEANFILES         += $(<IDENTIFIER>_TARGETS)
<IDENTIFIER>_REALCLEANFILES     += $(<IDENTIFIER>_CLEANFILES)
@end example

@noindent
so we see that the list of ordinary targets to clean must be stored in a
variable named @code{<IDENTIFIER>_TARGETS}.
@end deffn


@c ------------------------------------------------------------

@c page
@node make misc
@section Miscellaneous functions


@deffn {Make Function} ds-ornull @var{argument} @var{alternate_argument}
If @var{argument} is not the empty string: the call expands to
@var{argument}; else the call expands to @var{alternate_argument}.
Example:

@example
dir = $(call ds-ornull,$(mine_BUILDDIR),$(builddir)/mine.d)
@end example
@end deffn


@deffn {Make Function} ds-verbose @var{stuff_for_verbose} @var{stuff_for_silent}
If the variable @code{ds_config_VERBOSE_MESSAGES} has a non--empty
value: expand to @var{stuff_for_verbose}, else expand to
@var{stuff_for_silent}.  It is fine for @var{stuff_for_silent} to be the
empty string.
@end deffn


@deffn {Make Function} ds-echo @var{message}
Output a message with the shell built in @code{echo}.  The function
@function{ds-verbose} is used to avoid printing the output in silent
mode.  Example:

@example
$(call ds-echo,"installing files...")
@end example
@end deffn

@c ------------------------------------------------------------

@c page
@node make transformers
@chapter Make's modules to process files


@menu
* make module intro::           Introduction to the usage of modules.
* make module define::          Defining a module.
* make module install::         Module installation code sections
                                and functions.
@end menu


@c ------------------------------------------------------------

@c page
@node make module intro
@section Introduction to the usage of modules


@noindent
Let's se an example:

@example
$(eval $(call ds-srcdir,mine,$(srcdir)/src/mine))
$(eval $(call ds-builddir,mine))

mine_SOURCES    = $(call ds-glob,mine,*.txt.m4)
mine_TARGETS    = $(mine_SOURCES:.txt.m4=.txt)
mine_INSTLST    = $(mine_TARGETS)
mine_INSTDIR    = $(pkgdatadir)

$(eval $(call ds-default-clean-files-variables,mine))
$(eval $(call ds-module,mine,bin,DATA))

vpath %.m4    $(mine_SRCDIR)

mine_M4FLAGS   = --prefix-builtins --include=$(mine_SRCDIR) --

%.txt : %.txt.m4
      $(M4) $(mine_M4FLAGS) $(<) >$(@@)
@end example

@noindent
this chunk of make file defines a module with identifier @code{mine}, with
the following characteristics:

@itemize
@item
module's purpose is to process a set of files with the @gnu{} M4
preprocessor;

@item
the module is registered under the @code{bin} section and its output
files are meant to be installed as data (as opposed to binaries and
libraries);

@item
the source files are under @code{$(srcdir)/src/mine} and match the pattern
@code{*.txt.m4};

@item
the output files will be built under @code{$(builddir)/mine.d} and will
have @code{.txt} extension;

@item
the variable @code{M4} must hold the pathname of the executable program
of @gnu{} M4; the variable is declared by the function
@function{ds-common-programs} and something like:

@example
AC_PATH_PROG([M4],[m4],[:])
AC_ARG_VAR([M4],[the GNU m4 preprocessor])
@end example

@noindent
must be present in @file{configure.ac};

@item
the @gnu{} M4 flags to be used are specific for this module and selected
with @code{mine_M4FLAGS};

@item
the following main phony rules are available to drive the module:

@table @code
@item mine-all
build the output files;

@item mine-clean
remove the files listed in the variable @code{mine_CLEANFILES}, which is
set to the value of the variable @code{mine_TARGETS} by
@function{ds-default-clean-files-variables};

@item mine-realclean
remove the files listed in the variable @code{mine_REALCLEANFILES},
which is set to the value of the variable @code{mine_CLEANFILES} by
@function{ds-default-clean-files-variables};

@item mine-install
installs the files in @code{mine_INSTLST} under the directory in
@code{mine_INSTDIR} with data files permissions.
@end table
@end itemize


@c ------------------------------------------------------------

@c page
@node make module define
@section Defining a module


@deffn {Make Module} ds-module @var{identifier} @var{set} [@var{install_mode}]
Define the rules to drive a transformation module; argumnts:

@table @var
@item identifier
is the prefix for all module's variables and phony rules;

@item set
is the main rules set under which this module is registered;

@item install_mode
the installation mode to be handed to @function{ds-install-module};
should be one among: @code{bin}, @code{dev}, @code{doc}, @code{nop},
@code{test}.
@end table

Here is a list of the phony rules that are available for modules:

@table @code
@item <IDENTIFIER>-all
rebuilds the module targets; the list of targets for this module must be
stored in the variable @code{<IDENTIFIER>_TARGETS}; this rule is
registered as prerequisite of @code{<SET>-all};

@item <IDENTIFIER>-clean
removes the files and directories listed in the variable
@code{<IDENTIFIER>_CLEANFILES}; this rule is registered as prerequisite
of @code{<SET>-clean};

@item <IDENTIFIER>-realclean
removes the files and directories listed in the variable
@code{<IDENTIFIER>_REALCLEANFILES}; this rule is registered as
prerequisite of @code{<SET>-realclean};

@item <IDENTIFIER>-install
apply @function{ds-install-module} to @var{identifier} and
@var{install_mode} or @code{DATA} if @var{install_mode} is not used;
this rule is registered as prerequisite of @code{<SET>-install};

@item <IDENTIFIER>-install-aux
this is defined as empty rule and we can add commands to it at will;
this rule is a prerequisite of @code{<IDENTIFIER>-install};

@item <IDENTIFIER>-uninstall
apply @function{ds-uninstall-module} to @var{identifier}; this rule is
registered as prerequisite of @code{<SET>-uninstall};

@item <IDENTIFIER>-uninstall-aux
this is defined as empty rule and we can add commands to it at will;
this rule is a prerequisite of @code{<IDENTIFIER>-uninstall};

@item <IDENTIFIER>-print-install-files-layout
print installed files layout: apply
@function{ds-module-print-files-layout} to @var{identifier}; this rule
is registered as prerequisite of
@code{<SET>-print-install-files-layout};

@item <IDENTIFIER>-print-install-directories-layout
print installed directories layout: apply
@function{ds-module-print-directories-layout} to @var{identifier}; this
rule is registered as prerequisite of
@code{<SET>-print-install-directories-layout};

@item <IDENTIFIER>-print-install-layout
print installed directories layout: apply
@function{ds-module-print-layout} to @var{identifier}; this rule is
registered as prerequisite of @code{<SET>-print-install-layout};
                  
@item <IDENTIFIER>-print-uninstall-files-script
print a script to uninstall files: apply
@function{ds-module-print-uninstall-files-script} to @var{identifier};
this rule is registered as prerequisite of
@code{<SET>-print-uninstall-files-script};

@item <IDENTIFIER>-print-uninstall-directories-script
print a script to uninstall directories:: apply
@function{ds-module-print-uninstall-directories-script} to
@var{identifier}; this rule is registered as prerequisite of
@code{<SET>-print-uninstall-directories-script};

@item <IDENTIFIER>-print-uninstall-script
print a script to uninstall files and directories: apply
@function{ds-module-print-uninstall-script} to @var{identifier}; this
rule is registered as prerequisite of
@code{<SET>-print-uninstall-script}.
@end table
@end deffn


@deffn {Make Module} ds-module-no-install @var{identifier} @var{set}
This is like @code{ds-module}, but @strong{without} all the installation
related rules.
@end deffn


@c ------------------------------------------------------------

@c page
@node make module install
@section Module installation code sections and functions


@menu
* make module install code::    Miscellaneous sections of code.
* make module install stuff::   Installing files and directories.
* make module install module::  Installing module's output files.
* make module install layout::  Inspecting module's installation
                                layout.
* make module uninstall scripts:: Producing uninstall scripts.
* make module uninstall::       Uninstalling a module's files and
                                directories.
@end menu


@c ------------------------------------------------------------

@c page
@node make module install code
@subsection Miscellaneous sections of code


@noindent
In the following the @var{identifier} parameter is always a module's
identifier.


@deffn {Make Code Section} ds-permissions @var{identifier} @var{owner} @var{group} @var{file_mode} @var{dir_mode}
Expands to the following:

@example
<IDENTIFIER>_OWNER      = @var{owner}
<IDENTIFIER>_GROUP      = @var{group}
<IDENTIFIER>_FMODE      = @var{file_mode}
<IDENTIFIER>_DMODE      = @var{dir_mode}
@end example

@noindent
the variables are meant to override the default values in the functions
below.
@end deffn


@c ------------------------------------------------------------

@c page
@node make module install stuff
@subsection Installing files and directories


@noindent
In the following the @var{identifier} parameter is always a module's
identifier.


@deffn {Make Function} ds-install-directory @var{identifier}
Use the @code{$(INSTALL)} command to install a module's installation
directory:

@itemize
@item
the directory pathname is taken from the variable
@code{<IDENTIFIER>_INSTDIR};

@item
the installation mode is taken from the variable
@code{<IDENTIFIER>_DMODE} and, if that is the empty string, defaults to
the value in the variable @code{INSTALL_DIR_MODE};

@item
the installed directory owner is taken from the variable
@code{<IDENTIFIER>_OWNER} and left unset if that is the empty string;

@item
the installed directory group is taken from the variable
@code{<IDENTIFIER>_GROUP} and left unset if that is the empty string;

@item
the directory pathname is prefixed with the value of the variable
@code{DESTDIR}.
@end itemize

Examples:

@itemize
@item
install the directory @code{$(DESTDIR)$(mine_INSTDIR)} with mode
@code{INSTALL_DIR_MODE}:

@example
$(call ds-install-directory,mine)
@end example

@item
install the directory @code{$(DESTDIR)$(mine_INSTDIR)} with mode
@code{0700} and owner and group set to @code{root}:

@example
$(eval $(call ds-permissions,mine,root,root,0700,0600))
$(call ds-install-directory,mine)
@end example
@end itemize
@end deffn

@c ------------------------------------------------------------

@deffn {Make Function} ds-install-files @var{identifier} @var{mode}
Use the @code{$(INSTALL)} command to install a module's output files:

@itemize
@item
the destination directory pathname is taken from the variable
@code{<IDENTIFIER>_INSTDIR};

@item
the list of files to install is taken from the variable
@code{<IDENTIFIER>_INSTLST};

@item
the file installation mode is taken from the variable
@code{<IDENTIFIER>_FMODE} and, if that is the empty string, defaults to
the value in the variable @code{INSTALL_<MODE>_MODE}; @var{mode} must be
one among: @code{BIN}, @code{DATA}, @code{LIB};

@item
the installed files owner is taken from the variable
@code{<IDENTIFIER>_OWNER} and left unset if that is the empty string;

@item
the installed files group is taken from the variable
@code{<IDENTIFIER>_GROUP} and left unset if that is the empty string;

@item
the installation directory pathname is prefixed with the value of the
variable @code{DESTDIR}.
@end itemize

Examples:

@itemize
@item
install the files @file{$(srcdir)/src/one.txt} and
@file{$(srcdir)/src/two.txt} in the directory directory
@code{$(DESTDIR)$(pkgdatadir)} with mode @code{INSTALL_DATA_MODE}:

@example
$(eval $(call ds-srcdir,mine))

mine_INSTLST    = $(call ds-glob,mine,one.txt two.txt)
mine_INSTDIR    = $(pkgdatadir)

$(call ds-install-directory,mine)
$(call ds-install-files,mine,DATA)
@end example

@item
like the above but select the file permissions and owners:

@example
$(eval $(call ds-srcdir,mine))

$(eval $(call ds-permissions,mine,root,root,0700,0600))
mine_INSTLST    = $(call ds-glob,mine,one.txt two.txt)
mine_INSTDIR    = $(pkgdatadir)

$(call ds-install-directory,mine)
$(call ds-install-files,mine,DATA)
@end example
@end itemize
@end deffn

@c ------------------------------------------------------------

@c page
@node make module install module
@subsection Installing module's output files


@noindent
In the following the @var{identifier} parameter is always a module's
identifier.


@deffn {Make Function} ds-install-module @var{identifier} @var{mode}
Install the output files of a module: invoke both
@function{ds-install-directory} and @function{ds-install-files} using
the supplied arguments.
@end deffn


@deffn {Make Function} ds-install-bin @var{identifier}
@deffnx {Make Function} ds-install-data @var{identifier}
@deffnx {Make Function} ds-install-lib @var{identifier}
These are wrappers for @function{ds-install-module} that set the
@var{mode} parameter to @code{BIN}, @code{DATA} or @code{LIB}.
@end deffn


@c ------------------------------------------------------------

@c page
@node make module install layout
@subsection Inspecting module's installation layout


@noindent
In the following the @var{identifier} parameter is always a module's
identifier.  Notice that the following functions will ignore the
variable @code{DESTDIR}.


@deffn {Make Function} ds-module-print-files-layout @var{identifier}
Print to stdout the installation layout of files.  The installation
directory is taken from the variable @code{<IDENTIFIER>_INSTDIR} and the
list of files is taken from the variable @code{<IDENTIFIER>_INSTLST}.
@end deffn


@deffn {Make Function} ds-module-print-directories-layout @var{identifier}
Print to stdout the installation layout of directories.  The
installation directory is taken from the variable
@code{<IDENTIFIER>_INSTDIR}.
@end deffn


@deffn {Make Function} ds-module-print-layout @var{identifier}
Print to stdout the installation layout of files and directories.  Apply
both @function{ds-module-print-files-layout} and
@function{ds-module-print-directories-layout} to @var{identifier}.
@end deffn


@c ------------------------------------------------------------

@c page
@node make module uninstall scripts
@subsection Producing uninstall scripts


@noindent
In the following the @var{identifier} parameter is always a module's
identifier.  Notice that the following functions will ignore the
variable @code{DESTDIR}.


@deffn {Make Function} ds-module-print-uninstall-files-script @var{identifier}
Print to stdout a script that uninstalls a module's output files.  The
installation directory is taken from the variable
@code{<IDENTIFIER>_INSTDIR} and the list of files is taken from the
variable @code{<IDENTIFIER>_INSTLST}.
@end deffn


@deffn {Make Function} ds-module-print-uninstall-directories-script @var{identifier}
Print to stdout a script that uninstalls a module's install directory.
The installation directory is taken from the variable
@code{<IDENTIFIER>_INSTDIR}.
@end deffn


@deffn {Make Function} ds-module-print-uninstall-script @var{identifier}
Print to stdout the uninstall script for both files and directories.
Apply both @function{ds-module-print-uninstall-files-script} and
@function{ds-module-print-uninstall-directories-script} to
@var{identifier}.
@end deffn


@c ------------------------------------------------------------

@c page
@node make module uninstall
@subsection Uninstalling a module's files and directories


@noindent
In the following the @var{identifier} parameter is always a module's
identifier.  Notice that the following functions will ignore the
variable @code{DESTDIR}.


@deffn {Make Function} ds-uninstall-files @var{identifier}
Uninstall a module's output files using @code{$(RM_FILE)}.  The
installation directory is taken from the variable
@code{<IDENTIFIER>_INSTDIR} and the list of files is taken from the
variable @code{<IDENTIFIER>_INSTLST}.
@end deffn


@deffn {Make Function} ds-uninstall-directories @var{identifier}
Uninstall a module's install directory using @code{$(RMDIR)}.  The
installation directory is taken from the variable
@code{<IDENTIFIER>_INSTDIR}.
@end deffn


@deffn {Make Function} ds-uninstall-module @var{identifier}
Uninstall a module's both files and directories.  Apply both
@function{ds-uninstall-files} and @function{ds-uninstall-directories} to
@var{identifier}.
@end deffn

@c ------------------------------------------------------------

@c page
@node make clang
@chapter Make's C language support


@noindent
This chapter describes a set of @gnu{} Make functions to be used to
automate the writing of rules for C language program and library
compilation.

Full comprehension of the stuff can be achieved only by reading the code
in the library file, but this documentation should be enough for basic
usage.


@menu
* clang init::                  Environment initialisation.
* clang invocation::            Invoking the compiler.
* clang module::                Compiler modules.
* clang misc::                  Miscellaneous modules.
@end menu



@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c page
@node clang init
@section Environment initialisation


@menu
* clang init config::           Configuration variables.
* clang init rule::             Rule's variables.
@end menu


@noindent
The following function must be always invoked, as first, when we want to
use the DevelStuff C language support functions.


@deffn {Make Function} ds-c-language
Define a set of variables to be used by all the C language related
functions. This function must be called with:

@example
$(eval $(call ds-c-language))
@end example

@noindent
before the invocation of any of the C language functions.
@end deffn


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c page
@node clang init config
@subsection Configuration variables


@noindent
The following configuration variables should be set before the
invocation of @function{ds-c-language}.


@defvr {Config Variable} ds_config_ENABLE_STATIC
If set to @code{yes} static libraries are built. It is used by inserting
sections like this:

@example
ifeq ($(strip $(ds_config_ENABLE_STATIC)),yes)
...
endif
@end example

Defaults to the expansion of @code{@@ds_config_ENABLE_STATIC@@}.
@end defvr


@defvr {Config Variable} ds_config_ENABLE_SHARED
If set to @code{yes} shared libraries are built. It is used by inserting
sections like this:

@example
ifeq ($(strip $(ds_config_ENABLE_SHARED)),yes)
...
endif
@end example

Defaults to the expansion of @code{@@ds_config_ENABLE_SHARED@@}.
@end defvr


@defvr {Config Variable} ds_config_ENABLE_STRIP
If set to @code{yes} then the @command{strip} program is invoked upon
program and library files to remove debugging symbols. Defaults to
@code{yes}.
@end defvr


@defvr {Config Variable} ds_config_ENABLE_STUB
If set  to @code{yes} stub libraries  for shared libraries  are built if
the correct  Make modules  are used.  It  is used by  inserting sections
like this:

@example
ifeq ($(strip $(ds_config_ENABLE_STUB)),yes)
...
endif
@end example

Defaults to the expansion of @code{@@ds_config_ENABLE_STUB@@}.
@end defvr


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c page
@node clang init rule
@subsection Rule's variables


@menu
* clang init rule prog::        Programs.
* clang init rule pp::          Preprocessor variables.
* clang init rule cc::          Compiler variables.
* clang init rule ld::          Linker variables.
* clang init rule misc::        Miscellaneous variables.
@end menu


@noindent
The rule's variables described in this section can be redefined or
modified before or after the invocation of @function{ds-c-language};
their declaration in the library has the form:

@example
VARIABLE_NAME ?= ...
@end example

The hierarchy of the variables is the following, with @code{...}
replaced by the identifier of the module:

@example
DEFS  INCLUDES    C_DEFAULT  C_WARNINGS    
  |    |              |         |
  |    |              |    -----
  |    |              |   |
  v    v              v   v
 CPPFLAGS            CCFLAGS
     |                  |
     |             -----
     |            |
     v            v
  ..._CC_COMPILE_FLAGS   ..._CC_COMPILE_MORE_FLAGS
             |                    |
             |         -----------
             |        |
             v        v
           ..._CC_COMPILE


C_DEFAULT   CFLAGS             LDFLAGS  LIBS
     |        |                   |      |
     v        v                   v      v
..._CC_BUILD_PROGRAM_FLAGS   ...CC_BUILD_PROGRAM_LIBS
                     |           |
                     v           v
                ..._CC_BUILD_PROGRAM


C_DEFAULT   CFLAGS             LDFLAGS  LIBS
     |        |                   |      |
     v        v                   v      v
..._CC_BUILD_SHARED_LIBRARY_FLAGS   ...CC_BUILD_SHARED_LIBRARY_LIBS
                     |           |
                     v           v
                ..._CC_BUILD_SHARED_LIBRARY
@end example


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c page
@node clang init rule prog
@subsubsection Programs


@defvr {Program Variable} CC
The C language compiler.
@end defvr


@defvr {Program Variable} CPP
The C language preprocessor.
@end defvr


@defvr {Program Variable} AR
Archives manager.  Used to create static libraries: archives of object
files.
@end defvr


@defvr {Program Variable} RANLIB
Index generator for archives.  Used to give more karma to a static
archive.
@end defvr


@defvr {Program Variable} STRIP
Remove debugging symbols from programs and shared libraries.
@end defvr


@defvr {Program Variable} GDB
The @gnu{} C language debugger.
@end defvr


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c page
@node clang init rule pp
@subsubsection Preprocessor variables


@defvr {Rule Variable} DEFS
Should be set to a list of C preprocessor symbol definitions; it is used
by all the C compiler invocations.

Defaults to the expansion of @code{@@DEFS@@}, which is set by the @gnu{}
Autoconf macro @code{AC_DEFINE}.  If Autoconf makes use of the
@file{config.h} file, @code{@@DEFS@@} will expand to the empty string.
@end defvr


@defvr {Rule Variable} INCLUDES
Should be alist of @code{-I<directory>} options for the C language
preprocessor; it is used by all the C compiler invocations. Options can
be added with:

@example
INCLUDES += -I<this> -I<that>
@end example

Defaults to the expansion of @code{@@INCLUDES@@} plus
@code{-I. -I$(srcdir)}.
@end defvr


@defvr {Rule Variable} CPPFLAGS
Should be set to a list of C preprocessor options to be used for every C
preprocessor invocation.  Defaults to:

@example
@@CPPFLAGS@@ $(DEFS) $(INCLUDES)
@end example
@end defvr


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c page
@node clang init rule cc
@subsubsection Compiler variables


@noindent
Notice that when the @code{AC_PROG_CC_C99} Autoconf macro is used,
options like @code{-std=c99} are included in the expansion of
@code{@@CC@@}, so they end up in the @code{CC} variable.


@defvr {Rule Variable} C_DEFAULT
Default options for the C compiler; it is used by all the C compiler
invocations.  Defaults to @code{-pipe -fPIC @@C_DEFAULT@@}.
@end defvr


@defvr {Rule Variable} C_WARNINGS
Default warning options for the C compiler; it is used by all the C
compiler invocations. Defaults to:

@example
-Wall                   -W
-Wextra                 -pedantic
-Wmissing-prototypes    -Wpointer-arith
-Wcast-qual             -Wcast-align
-Wwrite-strings         -Wnested-externs
-Wstrict-prototypes     -Wshadow
-fno-common
@end example

@noindent
If there is the need, for example, to remove the @code{-Wcast-qual}
option: we can redefine the variable or filter out an option:

@example
C_WARNINGS := $(filter-out -Wcast-qual,$(C_WARNINGS))
@end example

@noindent
notice the usage of @code{:=} rather than @code{=} to avoid infinite
recursion.
@end defvr


@defvr {Rule Variable} CCFLAGS
The list of C compiler options to be used for every C compiler
invocation that produces object files; it defaults to @code{$(C_DEFAULT)
$(C_WARNINGS)}.  Do not confuse this with @code{CFLAGS}, which is
customisable by the user.
@end defvr


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c page
@node clang init rule ld
@subsubsection Linker variables


@defvr {Rule Variable} LIBS
This is for libraries that must be linked with all the produced
libraries and programs; only the @code{-l} options must be included
here, the @code{-L} options must go into @code{LDFLAGS}. Defaults to the
expansion of @code{@@LIBS@@}, which is set by the @gnu{} Autoconf macros
@code{AC_CHECK_LIB}.
@end defvr


@defvr {Rule Variable} LDFLAGS
Should be set to a list of linker options; it is used when building
libraries and programs.  Defaults to the expansion of
@code{@@LDFLAGS@@}.
@end defvr


@defvr {Rule Variable} LDFLAGS_RPATH
Options to be passed to the linker to select the search path for
libraries. The default value is @code{-Wl,-rpath,$(libdir)}.

It appears that when using this: the @env{LD_LIBRARY_PATH} variable does
not work anymore to override the search path for programs and shared
libraries; for this reason this library is not appended by DevelStuff to
the value of @code{LDFLAGS}, it is our responsibility to append it in
the @file{Makefile}:

@example
LDFLAGS += $(LDFLAGS_RPATH)
@end example
@end defvr


@defvr {Rule Variable} LDFLAGS_DL
Should be set to @code{-ldl} and included at linking time for a library
or program that needs the @code{dlopen()} function. It can be redefined
with:

@example
LDFLAGS_DL = ...
@end example

This variable is not used by the DevelStuff functions.
@end defvr


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c page
@node clang init rule misc
@subsubsection Miscellaneous variables


@defvr {Rule Variable} CFLAGS
Should be set to a list of customisable options for the C
compiler. Defaults to the expansion of @code{@@CFLAGS@@} and should be
defined when invoking the @command{configure} script:

@example
$ ./configure CFLAGS='-march=i686 -mtune=i686 -g -O3'
@end example

@noindent
or redefined when invoking @command{make}:

@example
$ make CFLAGS='-march=i686 -mtune=i686 -g -O3'
@end example

The default value is set by the @gnu{} Autoconf macro @code{AC_PROG_CC}
and usually it is @code{-g -O2}.
@end defvr


@defvr {Rule Variable} OBJEXT
Should be set to the extension of object files, usually @code{o}
(without the leading dot). Defaults to the expansion of
@code{@@OBJEXT@@}, set by the Autoconf macro @code{AC_PROG_CC} and
@code{AC_PROG_CXX}, and should not be modified.
@end defvr


@defvr {Rule Variable} NO_MINUS_C_MINUS_O
If the compiler @strong{does not} accept the @code{-c -o} options
simultaneously to compile object files, this variable is defined to
something (not the empty string).  Defaults to the expansion of
@code{@@NO_MINUS_C_MINUS_O@@} which is set by the @code{AC_PROG_CC_C_O}
Autoconf macro.
@end defvr


@defvr {Rule Variable} CC_COMPILE_OUTPUT
If the C language compiler accepts the @code{-c -o} options
simultaneously to produce object files: this variable is set to @code{-c
-o}; else it is set to @code{-o}.
@end defvr


@defvr {Rule Variable} CC_BUILD_OUTPUT
Set to @code{-o}, it is meant to be used to select the output of a
linker invocation.
@end defvr


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c page
@node clang invocation
@section Invoking the compiler


@noindent
The modules that compile and link files make use of the following
functions to compose the compiler/linker command line.  We have to
remember that we can always redefine these variables and/or the whole
module from the library (you have the code).

In all the following functions the @var{identifier} argument must be a
valid Make variable identifier, which is used to build variable names
``local'' to the module.  All the following functions must be invoked as
follows; at the toplevel of the @file{Makefile}:

@example
$(eval $(call ds-cc-compile,mine))
@end example

@noindent
while inside of a @code{define} construct:

@example
$$(eval $$(call ds-cc-compile,mine))
@end example


@deffn {Make Function} ds-cc-compile @var{identifier} [@var{optional_flags}]
Define variables to be used to compile a C source file into an object
file.  @var{optional_flags} is an optional list of compiler flags.
Example:

@example
$(eval $(call ds-cc-compile,mine,-I../includes))
@end example

@noindent
is expanded to:

@example
mine_CC_COMPILE_ENV             ?=
mine_CC_COMPILE_MORE_FLAGS      ?=
mine_CC_COMPILE_FLAGS           ?= \
  $(CPPFLAGS) $(CCFLAGS) \
  -I../includes \
  $(CFLAGS) $(mine_CC_COMPILE_MORE_FLAGS)
mine_CC_COMPILE            ?= \
  $(mine_CC_COMPILE_ENV) $(CC) \
        $(mine_CC_COMPILE_FLAGS) $(CC_COMPILE_OUTPUT)
@end example

@noindent
we are fully free to preset all the variables.  To use the produced
variables to compile object files we do:

@example
objects.d/mine.$(OBJEXT) \
  : objects.d/%.$(OBJEXT) \
  : ../src/%.c ../includes/mine.h
	$(mine_CC_COMPILE) $(@@) $(<)
@end example

@noindent
notice that only the first prerequisite (@code{$(<)}) is used as source
file.
@end deffn


@deffn {Make Function} ds-cc-build-program @var{identifier} [@var{optional_flags}]
Define variables to be used to link a set of object files and static
libraries into an executable program.  @var{optional_flags} is an
optional list of linker flags.  Example:

@example
$(eval $(call ds-cc-build-program,mine,-lm))
@end example

@noindent
is expanded to:

@example
mine_CC_BUILD_PROGRAM_ENV       ?=
mine_CC_BUILD_PROGRAM_LIBS      ?= $(LDFLAGS) $(LIBS)
mine_CC_BUILD_PROGRAM_FLAGS     ?= $(C_DEFAULT) -lm $(CFLAGS) 
mine_CC_BUILD_PROGRAM_PRE       ?=
mine_CC_BUILD_PROGRAM_POST      ?=
mine_CC_BUILD_PROGRAM           ?= \
  $(mine_CC_BUILD_PROGRAM_ENV) $(CC)    \
        $(mine_CC_BUILD_PROGRAM_FLAGS)  \
        $(mine_CC_BUILD_PROGRAM_LIBS)   \
        $(CC_BUILD_OUTPUT) $(@@)         \
        $(mine_CC_BUILD_PROGRAM_PRE)    \
        $(^)                            \
        $(mine_CC_BUILD_PROGRAM_POST)
@end example

@noindent
we are fully free to preset all the variables; notice that all the
prerequisites (@code{$(^)}) are included as object files.

The variables must be used as:

@example
programs.d/mine : objects.d/%.$(OBJEXT)
	$(mine_CC_BUILD_PROGRAM)
ifeq ($(ds_config_ENABLE_STRIP),yes)
	$(STRIP) $(@@)
endif
@end example
@end deffn


@deffn {Make Function} ds-cc-build-shared-library @var{identifier} [@var{optional_flags}]
Define variables to be used to link a set of object files and static
libraries into a shared library.  @var{optional_flags} is an optional
list of linker flags.  Example:

@example
$(eval $(call ds-cc-build-shared-library,mine,-lm))
@end example

@noindent
is expanded to:

@example
mine_CC_BUILD_SHARED_LIBRARY_ENV       ?=
mine_CC_BUILD_SHARED_LIBRARY_LIBS      ?= $(LDFLAGS) $(LIBS)
mine_CC_BUILD_SHARED_LIBRARY_FLAGS     ?= \
  $(C_DEFAULT) -shared -lm $(CFLAGS) 
mine_CC_BUILD_SHARED_LIBRARY_PRE       ?=
mine_CC_BUILD_SHARED_LIBRARY_POST      ?=
mine_CC_BUILD_SHARED_LIBRARY           ?= \
  $(mine_CC_BUILD_SHARED_LIBRARY_ENV) $(CC)     \
        $(mine_CC_BUILD_SHARED_LIBRARY_FLAGS)   \
        $(mine_CC_BUILD_SHARED_LIBRARY_LIBS)    \
        $(CC_BUILD_OUTPUT) $(@@)                 \
        $(mine_CC_BUILD_SHARED_LIBRARY_PRE)     \
        $(^)                                    \
        $(mine_CC_BUILD_SHARED_LIBRARY_POST)
@end example

@noindent
we are fully free to preset all the variables; notice that all the
prerequisites (@code{$(^)}) are included as object files.

The variables must be used as:

@example
librarys.d/libmine.so : objects.d/%.$(OBJEXT)
	$(mine_CC_BUILD_SHARED_LIBRARY)
ifeq ($(ds_config_ENABLE_STRIP),yes)
	$(STRIP) $(@@)
endif
@end example
@end deffn




@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c page
@node clang module
@section Compiler modules


@menu
* clang module objects::        Compiling object files.
* clang module libraries::      Building libraries.
* clang module programs::       Building programs.
@end menu


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c page
@node clang module objects
@subsection Compiling object files


@menu
* clang module objects stub::   Compiling object files with stubs.
@end menu


@noindent
To compile a set of source files into object files we do this:

@example
$(eval $(call ds-c-sources,mine))
@end example

@noindent
which collects the files matching @code{$(srcdir)/src/*.c} and compiles
them into object files under @code{$(builddir)/objects.d}.  To override
the default values we can do:

@example
mine_SRCDIR     = $(srcdir)/src
mine_BUILDDIR   = $(builddir)/objects.d
mine_PATTERNS   = *.c
$(eval $(call ds-c-sources,mine))
@end example

@c ------------------------------------------------------------

@deffn {Make Module} ds-c-sources @var{identifier}
Define what is needed to compile a set of C source files into object
files.  All the variables used by the module are prefixed with
@var{identifier}.

The command line of the compiler is composed with:

@example
$(eval $(call ds-cc-compile,<IDENTIFIER>,-I$(<IDENTIFIER>_SRCDIR)))
@end example

@noindent
and all the variables defined by @code{ds-cc-compile} are available for
customisation; additionally, the following variables are available to
configure the module:

@table @code
@item <IDENTIFIER>_SRCDIR ?= $(srcdir)/src
the directory from which source files are collected; this directory is
added to the search path for @code{%.h} files using the @code{vpath}
directive;

@item <IDENTIFIER>_BUILDDIR ?= $(builddir)/objects.d
the directory in which output object files are created; this directory
is added to the search path for @code{%.$(OBJEXT)} files using the
@code{vpath} directive;

@item <IDENTIFIER>_PATTERNS ?= *.c
a list of shell wildcard patterns used to select source files from the
source directory; the full patterns are composed with:

@example
$(addprefix $(<IDENTIFIER>_SRCDIR)/,$(<IDENTIFIER>_PATTERNS))
@end example

@item <IDENTIFIER>_PREREQUISITES ?=
selects a list of prerequisites for the building rule, which is usually
a list of header files; notice that this list is not prefixed with the
source directory, but can benefit of the search paths selected with
@code{vpath};

@item <IDENTIFIER>_MAIN_SECTION ?= bin
selects the main phony rules section this module belongs to;
@end table

@noindent
the following variables are available for module inspection and usage:

@table @code
@item <IDENTIFIER>_SOURCES
the list of selected source files, prefixed by the source directory;

@item <IDENTIFIER>_OBJECTS
the list of object files that are produced, prefixed by the build
directory;

@item <IDENTIFIER>_TARGETS += $(<IDENTIFIER>_OBJECTS)
the list of targets for this module;

@item <IDENTIFIER>_CLEANFILES += $(<IDENTIFIER>_TARGETS)
the list of files to clean for this module;

@item <IDENTIFIER>_REALCLEANFILES += $(<IDENTIFIER>_CLEANFILES)
the list of files to really clean for this module;
@end table

@noindent
the following phony targets are available to drive the module:

@table @code
@item <IDENTIFIER>-all
build all the targets; this rule becomes a prerequisite of
@code{$(<IDENTIFIER>_MAIN_SECTION)};

@item <IDENTIFIER>-clean
@itemx <IDENTIFIER>-realclean
clean all the targets; these rules become prerequisites of
@code{$(<IDENTIFIER>_MAIN_SECTION)-clean} and
@code{$(<IDENTIFIER>_MAIN_SECTION)-realclean}.
@end table
@end deffn


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c page
@node clang module objects stub
@subsubsection Compiling object files with stubs


@center @strong{FULL DOCUMENTATATION OF STUB MECHANISM CURRENTLY MISSING}

@deffn {Make Module} ds-c-sources-with-stub @var{identifier}
Define what is needed to compile a set of C source files into object
files and supports automatic generation of stub files.  All the
variables used by the module are prefixed with @var{identifier}.

The interface of this function is the same of @function{ds-c-sources}
but more variables and rules are added.  The additional rules are
included, no matter what; for this module it does not matter if shared
libraries are enabled or disabled and neither matters if stub libraries
are enabled or disabled.

The following variables have different default value from the ones in
@function{ds-c-sources}:

@table @code
@item <identifier>_PREREQUISITES
selects a list of prerequisites for the building rule, which is usually
a list of header files; notice that this list is not prefixed with the
source directory, but can benefit of the search paths selected with
@code{vpath};

the default value is the list of files @file{internal.h}, @file{debug.h}
and the value of @code{<IDENTIFIER>_stubsrc_HEADER_FILE}, all prefixed
with the source directory.
@end table

The following configurable variables are defined:

@table @code
@item <IDENTIFIER>_stubsrc_BUILDDIR ?= $(srcdir)/stub
the directory in which the automatically generated source files are
placed;

@item <IDENTIFIER>_stubsrc_HEADER_FILE ?= <IDENTIFIER>.h
the name of the header file to include in the automatically generated C
sources through an appropriate @code{#include}; it should be the main
header file for the module;

@item <IDENTIFIER>_stubsrc_LIBRARY_ID ?= <IDENTIFIER>
the nickname of the library, to be used as namespace prefix in the
automatically generated C sources; it will be present in type
definitions, function names, macro names, global variables;

@item <IDENTIFIER>_stubsrc_STUB_SHARED_LIBRARY_ID ?= $(<IDENTIFIER>_stub_SHARED_LIBRARY_LINK_ID)
the identifier of the stub shared library that will be loaded by the
static stub library using the @code{dl} interface;

@item <IDENTIFIER>_stubsrc_EXTERN ?= $(<IDENTIFIER>_stubsrc_LIBRARY_ID)_decl
the exported functions and variables qualifier; it should be a
customisable replacement for the C language @code{extern} qualifier;

@item <IDENTIFIER>_stubsrc_GLOBAL_HEADER_NAME ?= $(<IDENTIFIER>_stubsrc_LIBRARY_ID)_stub.h
the name of the automatically generated global stub header file; it
should be explicitly included by the main header file of the module;

@item <IDENTIFIER>_stubsrc_SHARED_LIB_NAME ?= $(<IDENTIFIER>_stubsrc_LIBRARY_ID)_shared_stub_library.c
the name of the automatically generated main shared stub library source
file;

@item <IDENTIFIER>_stubsrc_STATIC_LIB_NAME ?= $(<IDENTIFIER>_stubsrc_LIBRARY_ID)_static_stub_library.c
the name of the automatically generated main static stub library source
file;
@end table

@noindent
in addition to the variables available from @function{ds-c-sources}, the
following variables are available for inspection:

@table @code
@item <IDENTIFIER>_stubsrc_HEADERS
the list of automatically generated header files, one for each of the
files listed in @code{<IDENTIFIER>_SOURCES};

@item <IDENTIFIER>_stubsrc_TABLES
the list of automatically generated source files holding the stub
tables, one for each of the files listed in @code{<IDENTIFIER>_SOURCES};

@item <IDENTIFIER>_stub_shared_library_OBJECTS
the list of object files included in the stub shared library;

@item <IDENTIFIER>_stub_static_library_OBJECTS
the list of object files included in the stub static library.
@end table
@end deffn


@c ------------------------------------------------------------

@c page
@node clang module libraries
@subsection Building libraries


@menu
* clang module libraries shared::       Building shared libraries.
* clang module libraries static::       Building static libraries.
* clang module libraries stub::         Building shared and static
                                        libraries supporting the
                                        stub mechanism.
@end menu

@noindent
To build a shared library we do:

@example
$(eval $(call ds-c-sources,mine))
$(eval $(call ds-c-shared-library,mine))
@end example

@noindent
in which: the first line produces the object files collecting the
sources with the pattern @code{$(srcdir)/src/*.c}; the second line links
the objects into the library @code{$(builddir)/libraries.d/limine.so}.

To build a static library we do:

@example
$(eval $(call ds-c-sources,mine))
$(eval $(call ds-c-static-library,mine))
@end example

@noindent
in which: the first line produces the object files collecting the
sources with the pattern @code{$(srcdir)/src/*.c}; the second line links
the objects into the library @code{$(builddir)/libraries.d/libmine.a}.

It is possible to build both the shared and static libraries with:

@example
$(eval $(call ds-c-sources,mine))
$(eval $(call ds-c-shared-library,mine))
$(eval $(call ds-c-static-library,mine))
@end example

A lot of variables are available to customise things.

@c ------------------------------------------------------------

@c page
@node clang module libraries shared
@subsubsection Building shared libraries


@deffn {Make Module} ds-c-shared-library @var{identifier}
Define what is needed to link a set of object files into a shared
library; it is meant to be used to link a set of object files produced
with @function{ds-c-sources}.  All the variables and phony rules used by
the module are prefixed with @code{<@var{identifier}>_shared_library}.

The expansion of this function is included only if
@code{ds_config_ENABLE_SHARED} is set to @code{yes}; debugging symbols
are stripped from the shared library if @code{ds_config_ENABLE_STRIP} is
set to @code{yes}.  @ref{clang init config} for details on
configuration.

The command line of the linker is composed with:

@example
$(eval $(call ds-cc-build-library,<IDENTIFIER>_shared_library))
@end example

@noindent
and all the variables defined by @code{ds-cc-build-library} are
available for customisation; additionally the following variables are
available to configure the module:

@table @code
@item <@var{identifier}>_shared_library_BUILDDIR ?= $(builddir)/libraries.d
select the output directory for the library file;

@item <IDENTIFIER>_shared_library_OBJECTS ?= $(<IDENTIFIER>_OBJECTS)
the list of object files to be included in the library, prefixed with
the directory in which they are to be found; the default value is
consistent with the interface of @function{ds-c-sources}, @ref{clang
module objects};

@item <IDENTIFIER>_shared_library_ID ?= <IDENTIFIER>
the value of this variable is used to compose the name of the library
file: @code{lib<libname>.so}, it should be something like @code{ucl2.3}:
the library nickname with the @code{major.minor} interface version
number attached;

@item <IDENTIFIER>_shared_library_LINK_ID ?=
the value of this variable is used to compose the name of the symbolic
link to the library file: @code{lib<libname>.so}, it should be something
like @code{ucl2}: the library nickname with the major interface version
number attached; if this variable is left empty, the symbolic link will
@strong{not} be created; the default value is the empty string;

@item <IDENTIFIER>_shared_library_MAIN_SECTION ?= bin
selects the main phony rules section this module belongs to;
@end table

@noindent
the following variables are available for inspection:

@table @code
@item <IDENTIFIER>_shared_library_NAME
the file name of the shared library;

@item <IDENTIFIER>_shared_library_PATHNAME
the file name of the shared library prefixed with the build directory;

@item <IDENTIFIER>_shared_library_LINK_NAME
the name of the symbolic link to the shared library file;

@item <IDENTIFIER>_shared_library_LINK_PATHNAME
the name of the symbolic link to the shared library file prefixed with
the build directory;

@item <IDENTIFIER>_shared_library_TARGETS
the list of targets for this module; it should be the shared library
file name and the symbolic link name, both prefixed with the build
directory;

@item <IDENTIFIER>_shared_library_INSTLST
the list of files to install, prefixed with the directory in which they
are to be found; it should be the library file name; notice that the
symbolic link is also installed, but it is directly created in the
destination directory;

@item <IDENTIFIER>_shared_library_INSTDIR
the directory in which to install the files; defaults to
@code{$(libdir)};
@end table

@noindent
the following phony targets are available to drive the module:

@table @code
@item <IDENTIFIER>_shared_library-all
build all the targets; this rule becomes a prerequisite of
@code{$(<IDENTIFIER>_shared_library_MAIN_SECTION)};

@item <IDENTIFIER>_shared_library-clean
@itemx <IDENTIFIER>_shared_library-realclean
clean all the produced files; these rules become prerequisites of
@code{$(<IDENTIFIER>_shared_library_MAIN_SECTION)-clean} and
@code{$(<IDENTIFIER>_shared_library_MAIN_SECTION)-realclean}.
@end table
@end deffn


@c ------------------------------------------------------------

@c page
@node clang module libraries static
@subsubsection Building static libraries


@deffn {Make Module} ds-c-static-library @var{identifier} @var{libname}
Define what is needed to archive a set of object files into a static
library; it is meant to be used to link a set of object files produced
with @function{ds-c-sources}.  All the variables and phony rules used by
the module are prefixed with @code{<@var{identifier}>_static_library}.

The expansion of this function is included only if
@code{ds_config_ENABLE_STATIC} is set to @code{yes}.  @ref{clang init
config}.

The following variables are available to configure the module:

@table @code
@item <@var{identifier}>_static_library_BUILDDIR ?= $(builddir)/libraries.d
select the output directory for the library file;

@item <IDENTIFIER>_static_library_OBJECTS ?= $(<IDENTIFIER>_OBJECTS)
the list of object files to be included in the library, prefixed with
the directory in which they are to be found; the default value is
consistent with the interface of @function{ds-c-sources}, @ref{clang
module objects};

@item <IDENTIFIER>_static_library_ID ?= <IDENTIFIER>
the value of this variable is used to compose the name of the library
file: @code{lib<libname>.so}, it should be something like @code{ucl2.3}:
the library nickname with the @code{major.minor} interface version
number attached;

@item <IDENTIFIER>_static_library_MAIN_SECTION ?= dev
selects the main phony rules section this module belongs to;
@end table

@noindent
the following variables are available for inspection:

@table @code
@item <IDENTIFIER>_static_library_NAME
the file name of the static library;

@item <IDENTIFIER>_static_library_PATHNAME
the file name of the static library prefixed with the build directory;

@item <IDENTIFIER>_static_library_TARGETS
the list of targets for this module; it should be the static library
file name prefixed with the build directory;

@item <IDENTIFIER>_static_library_INSTLST
the list of files to install, prefixed with the directory in which they
are to be found; it should be the library file name;

@item <IDENTIFIER>_static_library_INSTDIR
the directory in which to install the files; defaults to
@code{$(libdir)};
@end table

@noindent
the following phony targets are available to drive the module:

@table @code
@item <IDENTIFIER>_static_library-all
build all the targets; this rule becomes a prerequisite of
@code{$(<IDENTIFIER>_static_library_MAIN_SECTION)};

@item <IDENTIFIER>_static_library-clean
@itemx <IDENTIFIER>_static_library-realclean
clean all the produced files; these rules become prerequisites of
@code{$(<IDENTIFIER>_static_library_MAIN_SECTION)-clean} and
@code{$(<IDENTIFIER>_static_library_MAIN_SECTION)-realclean}.
@end table
@end deffn


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c page
@node clang module libraries stub
@subsubsection Building shared and static libraries supporting the stub mechanism


@center @strong{FULL DOCUMENTATATION OF STUB MECHANISM CURRENTLY MISSING}


@deffn {Make Function} ds-c-library-with-stub @var{IDENTIFIER}
Define what is needed to build both a shared and static library from
source files, supporting the stub mechanism.  The expansion of the
function is:

@example
# This links the stub-shared library with the shared library.
<IDENTIFIER>_stub_shared_library_CC_BUILD_SHARED_LIBRARY_PRE = \
   -L$(<IDENTIFIER>_shared_library_BUILDDIR) \
   -l$(<IDENTIFIER>_shared_library_ID)

$(eval $(call ds-c-sources-with-stub,<IDENTIFIER>))
$(eval $(call ds-c-shared-library,<IDENTIFIER>))
$(eval $(call ds-c-static-library,<IDENTIFIER>))

ifeq ($(strip $(ds_config_ENABLE_STUB)),yes)
$(eval $(call ds-c-shared-library,<IDENTIFIER>_stub))
$(eval $(call ds-c-static-library,<IDENTIFIER>_stub))
endif # ds_config_ENABLE_STUB = yes

# Install the main header file of the library.
$(eval $(call ds-h-files-installer,<IDENTIFIER>,\
   $(<IDENTIFIER>_SRCDIR),$(<IDENTIFIER>_stubsrc_HEADER_FILE)))

# Install the stub header files.
$(eval $(call ds-h-files-installer,<IDENTIFIER>_stubsrc,\
   $(<IDENTIFIER>_stubsrc_BUILDDIR),*.h))
@end example
@end deffn




@c ------------------------------------------------------------

@c page
@node clang module programs
@subsection Building programs


@menu
* clang module programs single::        Linking several object files
                                        into a single program.
* clang module programs multi::         Linking several programs.
* clang module programs examples::      Building example programs.
* clang module programs tests::         Building test programs.
@end menu


@noindent
To build a single executable program from a set of object files we do:

@example
$(eval $(call ds-c-sources,mine))
$(eval $(call ds-c-single-program,mine,my))
@end example

@noindent
in which: the first line produces the object files collecting the
sources with the pattern @code{$(srcdir)/src/*.c} and storing the
objects into @code{$(builddir)/objects.d}; the second line links the
objects into the program @code{$(builddir)/programs.d/my}.

To build an executable for each object file in a set we do:

@example
$(eval $(call ds-c-sources,mine))
$(eval $(call ds-c-programs,mine))
@end example

@noindent
in which: the first line produces the object files collecting the
sources with the pattern @code{$(srcdir)/src/*.c} and storing the
objects into @code{$(builddir)/objects.d}; the second line links each
object file into a program storing the result in
@code{$(builddir)/programs.d}; the name of the programs is build by
stripping the extension from the object file name.

@c ------------------------------------------------------------

@c page
@node clang module programs single
@subsubsection Linking several object files into a single program


@cindex @code{ds_config_ENABLE_STRIP}, stripping symbols from single programs.
@cindex @function{ds-cc-build-program}, linking several object files into a single program.


@deffn {Make Module} ds-c-single-program @var{identifier} @var{progname}
@deffnx {Make Module} ds-c-single-program-no-install @var{identifier} @var{progname}
Define what is  needed to link a set of object  files into an executable
program.  The  no install version  does not install the  linked program.
All the variables  and phony rules used by the  module are prefixed with
@code{<@var{identifier}>_program}.

Debugging symbols are stripped from the program if
@code{ds_config_ENABLE_STRIP} is set to @code{yes}.  @ref{clang init
config} for details.

The command line of the linker is composed with:

@example
$(eval $(call ds-cc-build-program,<IDENTIFIER>_program))
@end example

@noindent
and all the variables defined by @code{ds-cc-build-program} are
available for customisation; additionally the following variables are
available to configure the module:

@table @code
@item <IDENTIFIER>_program_BUILDDIR ?= $(builddir)/programs.d
select the output directory for the executable file;

@item <IDENTIFIER>_program_OBJECTS ?= $(<IDENTIFIER>_OBJECTS)
the list of object files to be linked in the executable, prefixed with
the directory in which they are to be found; this is exactly what is
produced by the @function{ds-c-sources} function, @ref{clang module
objects};

@item <IDENTIFIER>_program_PREFIX ?=
a string that is prefixed to the name of the program;

@item <IDENTIFIER>_program_ENV ?=
the shell compatible definition of a set of environment variables to be
assigned before evaluating the produced program; it is used by the
@code{run-<IDENTIFIER>} phony rule (described below);

@item <IDENTIFIER>_program_MAIN_SECTION ?= bin
selects the main phony rules section this module belongs to;
@end table

@noindent
the following variables are available for inspection:

@table @code
@item <IDENTIFIER>_program_NAME
this is the @var{progname} argument prefixed with the selected program
prefix;

@item <IDENTIFIER>_program_PATHNAME
the file name of the program prefixed with the build directory in which
it is created;

@item <IDENTIFIER>_program_TARGETS
the list of targets for this module; should be the program file name
prefixed with its build directory; it is set with @code{+=}, so it is
possible to add targets by presetting the variable;

@item <IDENTIFIER>_program_INSTLST
the list of files to install, prefixed with the directory in which they
are to be found; by default it is set to the executable program, not the
module's targets;

@item <IDENTIFIER>_program_INSTDIR
the directory in which to install the files; defaults to
@code{$(pkglibexecdir)};
@end table

@noindent
the following phony rules are available to drive the module:

@table @code
@item <IDENTIFIER>_program-all
build all the targets; this rule becomes a prerequisite of
@code{$(<IDENTIFIER>_program_MAIN_SECTION)};

@item <IDENTIFIER>_program-clean
@itemx <IDENTIFIER>_program-realclean
clean all the produced files; these rules become prerequisites of
@code{$(<IDENTIFIER>_program_MAIN_SECTION)-clean} and
@code{$(<IDENTIFIER>_program_MAIN_SECTION)-realclean};

@item run-<IDENTIFIER>
evaluates the produced program.
@end table
@end deffn

Notice that, by default, the program is installed under
@code{$(pkglibexecdir)}, so, with usual system configurations, it will
not be found by applications inspecting the @env{PATH} search path. This
is fine if we install in @code{$(bindir)} a wrapper shell script that
executes the real program after environment setup.

Such a script can be called @var{progname} and it can be subject of
@gnu{} Autoconf substitutions; so it can be something like:

@example
#!/bin/bash
#
# Launcher for '@var{progname}'.

PACKAGE_NAME_LOWERCASE="@@PACKAGE_NAME_LOWERCASE@@"
PACKAGE_XVERSION="@@PACKAGE_XVERSION@@"
PKG_DIR="@@PKG_DIR@@"

prefix="@@prefix@@"
exec_prefix="@@exec_prefix@@"
libexecdir="@@libexecdir@@"
pkglibexecdir="@@pkglibexecdir@@"

PROGRAM_NAME="@var{progname}"

# System administrator customisable settings:
#export LD_LIBRARY_PATH=
export PATH=/bin:/usr/bin:/usr/local/bin

exec "$pkglibexecdir/$PROGRAM_NAME" "$@@"

### end of file
@end example


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c page
@node clang module programs multi
@subsubsection Linking several programs


@cindex @code{ds_config_ENABLE_STRIP}, stripping symbols from several programs.
@cindex @function{ds-cc-build-program}, linking several object files into a several programs.


@deffn {Make Module} ds-c-programs @var{identifier}
@deffnx {Make Module} ds-c-programs-no-install @var{identifier}
Define what is needed to link a set of object files into a set of
executable programs.  The no install version does not install the linked
programs.  All the variables and phony rules used by the module are
prefixed with @code{<@var{identifier}>_programs}.

Debugging symbols are stripped from the program if
@code{ds_config_ENABLE_STRIP} is set to @code{yes}.  @ref{clang init
config} for details.

The command line of the linker is composed with:

@example
$(eval $(call ds-cc-build-program,<IDENTIFIER>_programs))
@end example

@noindent
and all the variables defined by @code{ds-cc-build-program} are
available for customisation; additionally the following variables are
available to configure the module:

@table @code
@item <IDENTIFIER>_programs_SRCDIR ?= $(<IDENTIFIER>_BUILDDIR)
the source directory in which the object files are to be found; all the
object files have to be in the same directory; the deafult value is
exactly what is defined by @function{ds-c-sources}, @ref{clang module
objects};

@item <IDENTIFIER>_programs_BUILDDIR ?= $(builddir)/programs.d
select the output directory for the executable files;

@item <IDENTIFIER>_programs_OBJECTS ?= $(<IDENTIFIER>_OBJECTS)
the list of object files to be linked in the executables, prefixed with
the directory in which they are to be found; this is exactly what is
produced by the @function{ds-c-sources} function, @ref{clang module
objects};

@item <IDENTIFIER>_programs_PREFIX ?=
a string that is prefixed to the name of the programs;

@item <IDENTIFIER>_programs_ENV ?=
the shell compatible definition of a set of environment variables to be
assigned before evaluating the produced programs; it is used by the
@code{run-<IDENTIFIER>} phony rule (described below);

@item <IDENTIFIER>_programs_MAIN_SECTION ?= bin
select the main phony rules section this module belongs to;
@end table

@noindent
the following variables are available for inspection:

@table @code
@item <IDENTIFIER>_programs_NAMES
the list of names of the produced programs; it is built by stripping the
extension from the object file names and prefixing the selected prefix;

@item <IDENTIFIER>_programs_PATHNAMES
the file name of the program prefixed with the build directory in which
it is created;

@item <IDENTIFIER>_programs_TARGETS
the list of targets for this module; should be the list of executable
programs pathnames; it is set with @code{+=}, so it is possible to add
targets by presetting the variable;

@item <IDENTIFIER>_programs_INSTLST
the list of files to install, prefixed with the directory in which they
are to be found; by default it is set to the executable programs, not
the module's targets;

@item <IDENTIFIER>_programs_INSTDIR
the directory in which to install the files; defaults to
@code{$(pkglibexecdir)};
@end table

@noindent
the following phony rules are available to drive the module:

@table @code
@item <IDENTIFIER>_programs-all
build all the targets; this rule becomes a prerequisite of
@code{$(<IDENTIFIER>_programs_MAIN_SECTION)};

@item <IDENTIFIER>_programs-clean
@itemx <IDENTIFIER>_programs-realclean
clean all the produced files; these rules become prerequisites of
@code{$(<IDENTIFIER>_programs_MAIN_SECTION)-clean} and
@code{$(<IDENTIFIER>_programs_MAIN_SECTION)-realclean};

@item run-<IDENTIFIER>
evaluates the produced programs.
@end table
@end deffn


@c ------------------------------------------------------------

@c page
@node clang module programs examples
@subsubsection Linking example programs


@cindex Compiling example programs
@cindex Example programs, compilation

@noindent
When using the following function, it is useful to also include
@function{ds-examples}.


@deffn {Make Function} ds-c-example-programs @var{IDENTIFIER}
Define what is needed to compile and link a set of example programs.
This function is meant to be used to compile example programs for the
use of a library.  Calling it with:

@example
$(eval $(call ds-c-example-programs,mine))
@end example

@noindent
expands to:

@example
mine_examples_SRCDIR       ?= $$(srcdir)/examples
mine_examples_BUILDDIR     ?= $$(builddir)/examples.d
mine_examples_MAIN_SECTION ?= examples

$$(eval $$(call ds-c-sources,mine_examples))

mine_examples_programs_BUILDDIR     ?= $$(mine_examples_BUILDDIR)
mine_examples_programs_MAIN_SECTION = examples

$$(eval $$(call ds-c-programs-no-install,mine_examples))
@end example

@noindent
which means the following:

@enumerate
@item
source files are collected with the pattern
@code{$(srcdir)/examples/*.c};

@item
object files are compiled and stored in @code{$(builddir)/examples.d};

@item
an executable program for each objec file is linked and stored in
@code{$(builddir)/examples.d}; the name of the programs is built by
stripping the extension from the corresponding object file;

@item
examples can be run with the @code{run-mine} and @code{examples} phony
rule.
@end enumerate
@end deffn


When using @function{ds-c-example-programs} to show how to use a library
built with:

@example
$(eval $(call ds-c-sources,mine))
$(eval $(call ds-c-shared-library,mine))
@end example

@noindent
we may want to do the following:

@example
# Add the library header file as prerequisite for the
# example object files.
mine_examples_PREREQUISITES = $(mine_SRCDIR)/mine.h

# Add the source directory of the library to the include
# search path.
mine_examples_CC_COMPILE_MORE_FLAGS = -I$(mine_SRCDIR)

# Add the shared library to the linker command line.
mine_examples_programs_CC_BUILD_PROGRAM_PRE = \
  -L$(mine_shared_library_BUILDDIR) -l$(mine_shared_library_ID)

# When running the example programs we need to find the
# shared library in its build directory
mine_examples_programs_ENV = \
  LD_LIBRARY_PATH=$(mine_shared_library_BUILDDIR)

$(eval $(call ds-c-example-programs,mine))
@end example

@c ------------------------------------------------------------

@c page
@node clang module programs tests
@subsubsection Building test programs


@cindex Compiling test programs
@cindex Test programs, compilation

@noindent
When using the following function, it is useful to also include
@function{ds-tests}.


@deffn {Make Function} ds-c-test-programs @var{IDENTIFIER}
Define what is needed to compile and link a set of test programs.
This function is meant to be used to compile test programs for the
use of a library.  Calling it with:

@example
$(eval $(call ds-c-test-programs,mine))
@end example

@noindent
expands to:

@example
mine_tests_SRCDIR       ?= $(srcdir)/tests
mine_tests_BUILDDIR     ?= $(builddir)/tests.d
mine_tests_MAIN_SECTION ?= tests

$(eval $(call ds-c-sources,mine_tests))

mine_tests_programs_BUILDDIR     ?= $(mine_tests_BUILDDIR)
mine_tests_programs_MAIN_SECTION = tests

$(eval $(call ds-c-programs-no-install,mine_tests))

$(mine_tests_programs_MAIN_SECTION): run-mine_tests
@end example

@noindent
which means the following:

@enumerate
@item
source files are collected with the pattern
@code{$(srcdir)/tests/*.c};

@item
object files are compiled and stored in @code{$(builddir)/tests.d};

@item
an executable program for each objec file is linked and stored in
@code{$(builddir)/tests.d}; the name of the programs is built by
stripping the extension from the corresponding object file;

@item
tests can be run with the @code{run-mine} and @code{tests} phony
rule.
@end enumerate
@end deffn


When using @function{ds-c-test-programs} to test the usage of a library
built with:

@example
$(eval $(call ds-c-sources,mine))
$(eval $(call ds-c-shared-library,mine))
@end example

@noindent
we may want to do the following:

@example
# Add the library header file as prerequisite for the
# test object files.
mine_tests_PREREQUISITES = $(mine_SRCDIR)/mine.h

# Add the source directory of the library to the include
# search path.
mine_tests_CC_COMPILE_MORE_FLAGS = -I$(mine_SRCDIR)

# Add the shared library to the linker command line.
mine_tests_programs_CC_BUILD_PROGRAM_PRE = \
  -L$(mine_shared_library_BUILDDIR) -l$(mine_shared_library_ID)

# When running the test programs we need to find the
# shared library in its build directory
mine_tests_programs_ENV = \
  LD_LIBRARY_PATH=$(mine_shared_library_BUILDDIR)

$(eval $(call ds-c-test-programs,mine))
@end example

@c ------------------------------------------------------------

@c page
@node clang misc
@section Miscellaneous modules



@deffn {Make Function} ds-h-files-installer @var{identifier} @var{srcdir} [@var{patterns}]
Define what is needed to install a set of C header files.  All the
variables used by the module are prefixed with
@code{<IDENTIFIER>_c_headers}.

@var{srcdir} must be the directory from which files are collected,
selecting them with @var{patterns}.  The default of @var{patterns} is
@code{*.h}.

The following variables are available for configuration and inspection:

@table @code
@item <IDENTIFIER>_c_headers_MAIN_SECTION
selects the main phony rules section this module belongs to; defaults to
@code{dev};

@item <IDENTIFIER>_c_headers_SRCDIR
the selected source directory;

@item <IDENTIFIER>_c_headers_PATTERNS
the selected file patterns;

@item <IDENTIFIER>_c_headers_INSTLST
the list of files that will be installed;

@item <IDENTIFIER>_c_headers_INSTDIR
the installation directory; defaults to @code{$(pkgincludedir)}.
@end table
@end deffn


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c page
@node Package License
@appendix @gnu{} General Public License

@c The GNU General Public License.
@center Version 3, 29 June 2007

@c This file is intended to be included within another document,
@c hence no sectioning command or @node.

@display
Copyright @copyright{} 2007 Free Software Foundation, Inc. @url{http://fsf.org/}

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.
@end display

@heading Preamble

The GNU General Public License is a free, copyleft license for
software and other kinds of works.

The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom
to share and change all versions of a program---to make sure it remains
free software for all its users.  We, the Free Software Foundation,
use the GNU General Public License for most of our software; it
applies also to any other work released this way by its authors.  You
can apply it to your programs, too.

When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you
have certain responsibilities if you distribute copies of the
software, or if you modify it: responsibilities to respect the freedom
of others.

For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too,
receive or can get the source code.  And you must show them these
terms so they know their rights.

Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the
manufacturer can do so.  This is fundamentally incompatible with the
aim of protecting users' freedom to change the software.  The
systematic pattern of such abuse occurs in the area of products for
individuals to use, which is precisely where it is most unacceptable.
Therefore, we have designed this version of the GPL to prohibit the
practice for those products.  If such problems arise substantially in
other domains, we stand ready to extend this provision to those
domains in future versions of the GPL, as needed to protect the
freedom of users.

Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish
to avoid the special danger that patents applied to a free program
could make it effectively proprietary.  To prevent this, the GPL
assures that patents cannot be used to render the program non-free.

The precise terms and conditions for copying, distribution and
modification follow.

@heading TERMS AND CONDITIONS

@enumerate 0
@item Definitions.

``This License'' refers to version 3 of the GNU General Public License.

``Copyright'' also means copyright-like laws that apply to other kinds
of works, such as semiconductor masks.

``The Program'' refers to any copyrightable work licensed under this
License.  Each licensee is addressed as ``you''.  ``Licensees'' and
``recipients'' may be individuals or organizations.

To ``modify'' a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of
an exact copy.  The resulting work is called a ``modified version'' of
the earlier work or a work ``based on'' the earlier work.

A ``covered work'' means either the unmodified Program or a work based
on the Program.

To ``propagate'' a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

To ``convey'' a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user
through a computer network, with no transfer of a copy, is not
conveying.

An interactive user interface displays ``Appropriate Legal Notices'' to
the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

@item Source Code.

The ``source code'' for a work means the preferred form of the work for
making modifications to it.  ``Object code'' means any non-source form
of a work.

A ``Standard Interface'' means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

The ``System Libraries'' of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
``Major Component'', in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

The ``Corresponding Source'' for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

The Corresponding Source need not include anything that users can
regenerate automatically from other parts of the Corresponding Source.

The Corresponding Source for a work in source code form is that same
work.

@item Basic Permissions.

All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

You may make, run and propagate covered works that you do not convey,
without conditions so long as your license otherwise remains in force.
You may convey covered works to others for the sole purpose of having
them make modifications exclusively for you, or provide you with
facilities for running those works, provided that you comply with the
terms of this License in conveying all material for which you do not
control copyright.  Those thus making or running the covered works for
you must do so exclusively on your behalf, under your direction and
control, on terms that prohibit them from making any copies of your
copyrighted material outside their relationship with you.

Conveying under any other circumstances is permitted solely under the
conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

@item Protecting Users' Legal Rights From Anti-Circumvention Law.

No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such
circumvention is effected by exercising rights under this License with
respect to the covered work, and you disclaim any intention to limit
operation or modification of the work as a means of enforcing, against
the work's users, your or third parties' legal rights to forbid
circumvention of technological measures.

@item Conveying Verbatim Copies.

You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

@item Conveying Modified Source Versions.

You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these
conditions:

@enumerate a
@item
The work must carry prominent notices stating that you modified it,
and giving a relevant date.

@item
The work must carry prominent notices stating that it is released
under this License and any conditions added under section 7.  This
requirement modifies the requirement in section 4 to ``keep intact all
notices''.

@item
You must license the entire work, as a whole, under this License to
anyone who comes into possession of a copy.  This License will
therefore apply, along with any applicable section 7 additional terms,
to the whole of the work, and all its parts, regardless of how they
are packaged.  This License gives no permission to license the work in
any other way, but it does not invalidate such permission if you have
separately received it.

@item
If the work has interactive user interfaces, each must display
Appropriate Legal Notices; however, if the Program has interactive
interfaces that do not display Appropriate Legal Notices, your work
need not make them do so.
@end enumerate

A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
``aggregate'' if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

@item  Conveying Non-Source Forms.

You may convey a covered work in object code form under the terms of
sections 4 and 5, provided that you also convey the machine-readable
Corresponding Source under the terms of this License, in one of these
ways:

@enumerate a
@item
Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by the
Corresponding Source fixed on a durable physical medium customarily
used for software interchange.

@item
Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by a written
offer, valid for at least three years and valid for as long as you
offer spare parts or customer support for that product model, to give
anyone who possesses the object code either (1) a copy of the
Corresponding Source for all the software in the product that is
covered by this License, on a durable physical medium customarily used
for software interchange, for a price no more than your reasonable
cost of physically performing this conveying of source, or (2) access
to copy the Corresponding Source from a network server at no charge.

@item
Convey individual copies of the object code with a copy of the written
offer to provide the Corresponding Source.  This alternative is
allowed only occasionally and noncommercially, and only if you
received the object code with such an offer, in accord with subsection
6b.

@item
Convey the object code by offering access from a designated place
(gratis or for a charge), and offer equivalent access to the
Corresponding Source in the same way through the same place at no
further charge.  You need not require recipients to copy the
Corresponding Source along with the object code.  If the place to copy
the object code is a network server, the Corresponding Source may be
on a different server (operated by you or a third party) that supports
equivalent copying facilities, provided you maintain clear directions
next to the object code saying where to find the Corresponding Source.
Regardless of what server hosts the Corresponding Source, you remain
obligated to ensure that it is available for as long as needed to
satisfy these requirements.

@item
Convey the object code using peer-to-peer transmission, provided you
inform other peers where the object code and Corresponding Source of
the work are being offered to the general public at no charge under
subsection 6d.

@end enumerate

A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

A ``User Product'' is either (1) a ``consumer product'', which means any
tangible personal property which is normally used for personal,
family, or household purposes, or (2) anything designed or sold for
incorporation into a dwelling.  In determining whether a product is a
consumer product, doubtful cases shall be resolved in favor of
coverage.  For a particular product received by a particular user,
``normally used'' refers to a typical or common use of that class of
product, regardless of the status of the particular user or of the way
in which the particular user actually uses, or expects or is expected
to use, the product.  A product is a consumer product regardless of
whether the product has substantial commercial, industrial or
non-consumer uses, unless such uses represent the only significant
mode of use of the product.

``Installation Information'' for a User Product means any methods,
procedures, authorization keys, or other information required to
install and execute modified versions of a covered work in that User
Product from a modified version of its Corresponding Source.  The
information must suffice to ensure that the continued functioning of
the modified object code is in no case prevented or interfered with
solely because modification has been made.

If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or
updates for a work that has been modified or installed by the
recipient, or for the User Product in which it has been modified or
installed.  Access to a network may be denied when the modification
itself materially and adversely affects the operation of the network
or violates the rules and protocols for communication across the
network.

Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

@item Additional Terms.

``Additional permissions'' are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders
of that material) supplement the terms of this License with terms:

@enumerate a
@item
Disclaiming warranty or limiting liability differently from the terms
of sections 15 and 16 of this License; or

@item
Requiring preservation of specified reasonable legal notices or author
attributions in that material or in the Appropriate Legal Notices
displayed by works containing it; or

@item
Prohibiting misrepresentation of the origin of that material, or
requiring that modified versions of such material be marked in
reasonable ways as different from the original version; or

@item
Limiting the use for publicity purposes of names of licensors or
authors of the material; or

@item
Declining to grant rights under trademark law for use of some trade
names, trademarks, or service marks; or

@item
Requiring indemnification of licensors and authors of that material by
anyone who conveys the material (or modified versions of it) with
contractual assumptions of liability to the recipient, for any
liability that these contractual assumptions directly impose on those
licensors and authors.
@end enumerate

All other non-permissive additional terms are considered ``further
restrictions'' within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions; the
above requirements apply either way.

@item Termination.

You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

@item Acceptance Not Required for Having Copies.

You are not required to accept this License in order to receive or run
a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

@item Automatic Licensing of Downstream Recipients.

Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

An ``entity transaction'' is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

@item Patents.

A ``contributor'' is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's ``contributor version''.

A contributor's ``essential patent claims'' are all patent claims owned
or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, ``control'' includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

In the following three paragraphs, a ``patent license'' is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To ``grant'' such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  ``Knowingly relying'' means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

A patent license is ``discriminatory'' if it does not include within the
scope of its coverage, prohibits the exercise of, or is conditioned on
the non-exercise of one or more of the rights that are specifically
granted under this License.  You may not convey a covered work if you
are a party to an arrangement with a third party that is in the
business of distributing software, under which you make payment to the
third party based on the extent of your activity of conveying the
work, and under which the third party grants, to any of the parties
who would receive the covered work from you, a discriminatory patent
license (a) in connection with copies of the covered work conveyed by
you (or copies made from those copies), or (b) primarily for and in
connection with specific products or compilations that contain the
covered work, unless you entered into that arrangement, or that patent
license was granted, prior to 28 March 2007.

Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

@item No Surrender of Others' Freedom.

If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey
a covered work so as to satisfy simultaneously your obligations under
this License and any other pertinent obligations, then as a
consequence you may not convey it at all.  For example, if you agree
to terms that obligate you to collect a royalty for further conveying
from those to whom you convey the Program, the only way you could
satisfy both those terms and this License would be to refrain entirely
from conveying the Program.

@item Use with the GNU Affero General Public License.

Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

@item Revised Versions of this License.

The Free Software Foundation may publish revised and/or new versions
of the GNU General Public License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies that a certain numbered version of the GNU General Public
License ``or any later version'' applies to it, you have the option of
following the terms and conditions either of that numbered version or
of any later version published by the Free Software Foundation.  If
the Program does not specify a version number of the GNU General
Public License, you may choose any version ever published by the Free
Software Foundation.

If the Program specifies that a proxy can decide which future versions
of the GNU General Public License can be used, that proxy's public
statement of acceptance of a version permanently authorizes you to
choose that version for the Program.

Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

@item Disclaimer of Warranty.

THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM ``AS IS'' WITHOUT
WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND
PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE
DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
CORRECTION.

@item Limitation of Liability.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR
CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR
LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM
TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER
PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

@item Interpretation of Sections 15 and 16.

If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

@end enumerate

@heading END OF TERMS AND CONDITIONS

@heading How to Apply These Terms to Your New Programs

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the ``copyright'' line and a pointer to where the full notice is found.

@smallexample
@var{one line to give the program's name and a brief idea of what it does.}
Copyright (C) @var{year} @var{name of author}

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see @url{http://www.gnu.org/licenses/}.
@end smallexample

Also add information on how to contact you by electronic and paper mail.

If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

@smallexample
@var{program} Copyright (C) @var{year} @var{name of author}
This program comes with ABSOLUTELY NO WARRANTY; for details type @samp{show w}.
This is free software, and you are welcome to redistribute it
under certain conditions; type @samp{show c} for details.
@end smallexample

The hypothetical commands @samp{show w} and @samp{show c} should show
the appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an ``about box''.

You should also get your employer (if you work as a programmer) or school,
if any, to sign a ``copyright disclaimer'' for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
@url{http://www.gnu.org/licenses/}.

The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use
the GNU Lesser General Public License instead of this License.  But
first, please read @url{http://www.gnu.org/philosophy/why-not-lgpl.html}.

@c ------------------------------------------------------------

@c page
@node Documentation License
@appendix GNU Free Documentation License

@cindex FDL, GNU Free Documentation License
@center Version 1.1, March 2000

@display
Copyright @copyright{} 2000 Free Software Foundation, Inc.
59 Temple Place, Suite 330, Boston, MA  02111-1307, USA

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
@end display

@enumerate 0
@item
PREAMBLE

The purpose of this License is to make a manual, textbook, or other
written document @dfn{free} in the sense of freedom: to assure everyone
the effective freedom to copy and redistribute it, with or without
modifying it, either commercially or noncommercially.  Secondarily,
this License preserves for the author and publisher a way to get
credit for their work, while not being considered responsible for
modifications made by others.

This License is a kind of ``copyleft'', which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.

@item
APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work that contains a
notice placed by the copyright holder saying it can be distributed
under the terms of this License.  The ``Document'', below, refers to any
such manual or work.  Any member of the public is a licensee, and is
addressed as ``you''.

A ``Modified Version'' of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A ``Secondary Section'' is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (For example, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The ``Invariant Sections'' are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.

The ``Cover Texts'' are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.

A ``Transparent'' copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup has been designed to thwart or discourage
subsequent modification by readers is not Transparent.  A copy that is
not ``Transparent'' is called ``Opaque''.

Examples of suitable formats for Transparent copies include plain
@sc{ascii} without markup, Texinfo input format, La@TeX{} input format,
@acronym{SGML} or @acronym{XML} using a publicly available
@acronym{DTD}, and standard-conforming simple @acronym{HTML} designed
for human modification.  Opaque formats include PostScript,
@acronym{PDF}, proprietary formats that can be read and edited only by
proprietary word processors, @acronym{SGML} or @acronym{XML} for which
the @acronym{DTD} and/or processing tools are not generally available,
and the machine-generated @acronym{HTML} produced by some word
processors for output purposes only.

The ``Title Page'' means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, ``Title Page'' means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

@item
VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.

@item
COPYING IN QUANTITY

If you publish printed copies of the Document numbering more than 100,
and the Document's license notice requires Cover Texts, you must enclose
the copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a publicly-accessible computer-network location containing a complete
Transparent copy of the Document, free of added material, which the
general network-using public has access to download anonymously at no
charge using public-standard network protocols.  If you use the latter
option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location
until at least one year after the last time you distribute an Opaque
copy (directly or through your agents or retailers) of that edition to
the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.

@item
MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

@enumerate A
@item
Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.

@item
List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has less than five).

@item
State on the Title page the name of the publisher of the
Modified Version, as the publisher.

@item
Preserve all the copyright notices of the Document.

@item
Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.

@item
Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.

@item
Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document's license notice.

@item
Include an unaltered copy of this License.

@item
Preserve the section entitled ``History'', and its title, and add to
it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section entitled ``History'' in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.

@item
Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the ``History'' section.
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.

@item
In any section entitled ``Acknowledgments'' or ``Dedications'',
preserve the section's title, and preserve in the section all the
substance and tone of each of the contributor acknowledgments
and/or dedications given therein.

@item
Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.

@item
Delete any section entitled ``Endorsements''.  Such a section
may not be included in the Modified Version.

@item
Do not retitle any existing section as ``Endorsements''
or to conflict in title with any Invariant Section.
@end enumerate

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section entitled ``Endorsements'', provided it contains
nothing but endorsements of your Modified Version by various
parties---for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.

@item
COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections entitled ``History''
in the various original documents, forming one section entitled
``History''; likewise combine any sections entitled ``Acknowledgments'',
and any sections entitled ``Dedications''.  You must delete all sections
entitled ``Endorsements.''

@item
COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.

You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.

@item
AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, does not as a whole count as a Modified Version
of the Document, provided no compilation copyright is claimed for the
compilation.  Such a compilation is called an ``aggregate'', and this
License does not apply to the other self-contained works thus compiled
with the Document, on account of their being thus compiled, if they
are not themselves derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one quarter
of the entire aggregate, the Document's Cover Texts may be placed on
covers that surround only the Document within the aggregate.
Otherwise they must appear on covers around the whole aggregate.

@item
TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License provided that you also include the
original English version of this License.  In case of a disagreement
between the translation and the original English version of this
License, the original English version will prevail.

@item
TERMINATION

You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License.  Any other attempt to
copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such
parties remain in full compliance.

@item
FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
@uref{http://www.gnu.org/copyleft/}.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License ``or any later version'' applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.
@end enumerate

@page
@appendixsubsec ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

@smallexample
@group
  Copyright (C)  @var{year}  @var{your name}.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.1
  or any later version published by the Free Software Foundation;
  with the Invariant Sections being @var{list their titles}, with the
  Front-Cover Texts being @var{list}, and with the Back-Cover Texts being @var{list}.
  A copy of the license is included in the section entitled ``GNU
  Free Documentation License''.
@end group
@end smallexample

If you have no Invariant Sections, write ``with no Invariant Sections''
instead of saying which ones are invariant.  If you have no
Front-Cover Texts, write ``no Front-Cover Texts'' instead of
``Front-Cover Texts being @var{list}''; likewise for Back-Cover Texts.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.

@c ------------------------------------------------------------

@c page
@node References
@appendix Bibliography and references


@c page
@node Concept Index
@appendix An entry for each concept
     
@printindex cp
     
@node Function Index
@appendix An entry for each function. 

@printindex fn

@node Variable Index
@appendix An entry for each variable. 

@printindex vr

@node Type Index
@appendix An entry for each type. 

@printindex tp

@contents
@bye

@c end of file
