# @configure_input@
#
# Part of: DevelStuff
# Contents: library of functions for GNU Make
# Date: Mon Aug 20, 2007
# 
# Abstract
# 
#	This is  a library of functions  for GNU Make. It  will not work
#	with  other 'make' programs.   Along with  this file  you should
#	have  received  a documentation  file  in  Texinfo format  named
#	"infrastructure.texi".
#
# Copyright (c) 2007, 2008 Marco Maggi
# 
# This program is  free software: you can redistribute  it and/or modify
# it under the  terms of the GNU General Public  License as published by
# the Free Software Foundation, either  version 3 of the License, or (at
# your option) any later version.
# 
# This program  is distributed in the  hope that it will  be useful, but
# WITHOUT   ANY  WARRANTY;   without  even   the  implied   warranty  of
# MERCHANTABILITY  or FITNESS  FOR A  PARTICULAR PURPOSE.   See  the GNU
# General Public License for more details.
# 
# You  should have received  a copy  of the  GNU General  Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

#page
## ------------------------------------------------------------
## Configuration variables.
## ------------------------------------------------------------

ds_config_VERBOSE_MESSAGES	?= yes
ds_config_DOC_ENABLED		?= yes
ds_config_DEV_ENABLED		?=
ds_config_ABI			?= direct

# *FIXME* This  is undocumented because support for  versioned layout is
# not fully specified: it  is not clear what is good to  always put in a
# versioned  directory.   The value  of  this  variable influences  some
# installation directory, but not all of them.
ds_config_VERSIONED_LAYOUT	?= @ds_config_VERSIONED_LAYOUT@

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Miscellaneous.
## ------------------------------------------------------------

define ds-ornull
$(if $(1),$(1),$(2))
endef

define ds-verbose
$(if $(ds_config_VERBOSE_MESSAGES),$(1),$(2))
endef

define ds-echo
@$(call ds-verbose,echo $(1))
endef

## ------------------------------------------------------------
## File system inspection.

define ds-drop-backup-files
$(filter-out %~,$(1))
endef

define ds-drop-equal-prefixed-files
$(foreach f,$(1),$(if $(filter =%,$(notdir $(f))),,$(f)))
endef

define ds-drop-unwanted-files
$(call ds-drop-equal-prefixed-files,$(call ds-drop-backup-files,$(1)))
endef

define ds-files-from-dir
$(call ds-drop-unwanted-files,$(wildcard $(addprefix $(1)/,$(call ds-ornull,$(2),*))))
endef

define ds-replace-dir
$(addprefix $(1)/,$(notdir $(2)))
endef

define ds-glob
$(if $($(1)_SRCDIR),\
	$(call ds-files-from-dir,$($(1)_SRCDIR),$(2)),\
	$(error null source directory variable "$(1)_SRCDIR"))
endef

## ------------------------------------------------------------
## Source directory handling.

define ds-srcdir
$(1)_SRCDIR	?= $$(call ds-ornull,$(2),$$(srcdir)/$(1))
$$(call ds-assert-srcdir,$(1))
endef

define ds-assert-srcdir
$(if $($(1)_SRCDIR),\
	$(shell test -d $($(1)_SRCDIR) || \
		printf "*warning*: missing srcdir '%s'\n" $($(1)_SRCDIR) >&2),\
	$(error null source directory variable "$(1)_SRCDIR"))
endef

## ------------------------------------------------------------
## Build directory handling.

define ds-builddir
$(1)_BUILDDIR		?= $$(call ds-ornull,$(2),$$(builddir)/$(1).d)

.PHONY: $(1)-make-builddir

$(1)-make-builddir: ; $$(call ds-make-builddir,$(1))
$(1)-all: $(1)-make-builddir
endef

define ds-make-builddir
$(if $($(1)_BUILDDIR),\
	$(shell test -d $($(1)_BUILDDIR) || $(MKDIR) $($(1)_BUILDDIR)),\
	$(error null build directory variable "$(1)_BUILDDIR"))
endef

## ------------------------------------------------------------
## Clean files

define ds-clean-files
$(if $($(1)_CLEANFILES),$(RM) $($(1)_CLEANFILES),\
	$(warning empty clean variable "$(1)_CLEANFILES"))
endef

define ds-real-clean-files
$(if $($(1)_REALCLEANFILES),$(RM) $($(1)_REALCLEANFILES),\
	$(warning empty real clean variable "$(1)_REALCLEANFILES"))
endef

define ds-default-clean-files-variables
$(1)_CLEANFILES		+= $$($(1)_TARGETS)
$(1)_REALCLEANFILES	+= $$($(1)_CLEANFILES)
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Mandatory modules.
## ------------------------------------------------------------

define ds-begin
-include Makefile.variables

$$(eval $$(call ds-package-variables))
$$(eval $$(call ds-common-programs))
$$(eval $$(call ds-main-rules))
$$(eval $$(call ds-examples))
$$(eval $$(call ds-tests))
$$(eval $$(call ds-generic-documentation))
endef

## ------------------------------------------------------------

define ds-end
.PHONY: echo-variable echo-list-variable

echo-variable:
	@echo $$($$(VARIABLE))

echo-list-variable:
	@$$(foreach f,$$($$(VARIABLE)),echo $$(f);)

# This  appears to  be ignored  by GNU  Make 3.81;  at least  it  is not
# mentioned in the Info documentation.  But it was used in the make file
# of Tcl and it seems that it does no harm.
.NOEXPORT:
endef

## ------------------------------------------------------------

define ds-package-variables
PACKAGE_NAME		= @PACKAGE_NAME@
PACKAGE_VERSION		= @PACKAGE_VERSION@
PACKAGE_VERSION_MAJMIN	= @PACKAGE_VERSION_MAJOR_MINOR@
PACKAGE_XVERSION	= @PACKAGE_XVERSION@
PACKAGE_NAME_LOWERCASE	= @PACKAGE_NAME_LOWERCASE@
PKG_ID			= $$(PACKAGE_NAME)-$$(PACKAGE_XVERSION)
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Shortcuts for common module sets.
## ------------------------------------------------------------

define ds-common-end
$(eval $(call ds-texinfo-documentation))
$(eval $(call ds-uninstall-scripts))
$(eval $(call ds-meta-scripts))
$(eval $(call ds-pkg-config))
$(eval $(call ds-autoconf))
$(eval $(call ds-config-inspection-script))
$(eval $(call ds-source-distribution))
$(eval $(call ds-binary-distribution))
$(eval $(call ds-slackware-distribution))
$(eval $(call ds-end))
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Directories.
## ------------------------------------------------------------

# If there is not a value for 'TMPDIR' from the environment we select a
# common default.
ifeq ($(strip $(TMPDIR)),)
TMPDIR		= /tmp
endif

builddir	= $(if @builddir@,@builddir@,.)
srcdir		= $(if @srcdir@,@srcdir@,.)

ifneq ($$(strip $$(ds_config_EXCLUDE_AUTOCONF_DIRECTORIES)),)

prefix		= @prefix@
exec_prefix	= @exec_prefix@

bindir		= @bindir@
datarootdir	= @datarootdir@
datadir		= @datadir@
docdir		= @datarootdir@/doc
includedir	= @includedir@
infodir		= @infodir@
libdir		= @libdir@
libexecdir	= @libexecdir@
localstatedir	= @localstatedir@
mandir		= @mandir@
sbindir		= @sbindir@
sharedstatedir	= @sharedstatedir@
sysconfdir	= @sysconfdir@

endif

ifneq ($$(strip $$(ds_config_EXCLUDE_DEVELSTUFF_DIRECTORIES)),)

PKG_DIR		= @PKG_DIR@
pkgdatadir	= @pkgdatadir@
pkgdocdir	= @pkgdocdir@
pkgexampledir	= @pkgexampledir@
pkginfodir	= @pkginfodir@
pkghtmldir	= @pkghtmldir@
pkgincludedir	= @pkgincludedir@
pkglibdir	= @pkglibdir@
pkglibexecdir	= @pkglibexecdir@
pkgsysconfdir	= @pkgsysconfdir@

endif

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Programs.
## ------------------------------------------------------------

define ds-common-programs
BASH_PROGRAM	= @BASH_PROGRAM@
SHELL		= @SHELL@
@SET_MAKE@

BZIP		= @BZIP@
CAT		= @CAT@
CP		= @CP@ --force --verbose --preserve=mode --
DATE		= @DATE@
GREP		= @GREP@
GAWK		= @GAWK@
GZIP		= @GZIP@
M4		= @M4@
MAKEINFO	= @MAKEINFO@
MKDIR		= @MKDIR@ --parents --verbose
MV		= @MV@ --verbose --
RM		= @RM@ --force --recursive --verbose --
RM_FILE		= @RM@ --force --verbose --
RM_SILENT	= @RM@ --force --recursive --
RMDIR		= @RMDIR@ --parents --ignore-fail-on-non-empty --
SED		= @SED@
SYMLINK		= @SYMLINK@ --symbolic
TAR		= @TAR@
SUDO		= @SUDO@

TCLSH		= @TCLSH@

INSTALL			= @INSTALL@
INSTALL_DIR_MODE	?= 0755
INSTALL_BIN_MODE	?= 0555
INSTALL_DATA_MODE	?= 0444
INSTALL_LIB_MODE	?= 0444
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Main rules.
## ------------------------------------------------------------

define ds-main-rules
ds_main_MAIN_RULES	= all clean realclean install

ds_main_GROUP_RULES	= bin
ifneq ($$(strip $$(ds_config_DOC_ENABLED)),)
ds_main_GROUP_RULES	+= doc
endif
ifneq ($$(strip $$(ds_config_DEV_ENABLED)),)
ds_main_GROUP_RULES	+= dev
endif

## ------------------------------------------------------------

# This is the pathname of the infrastructure directory: a relative
# pathname with respect to the build directory.
ds_main_INFRADIR	?= $$(srcdir)/infrastructure

# This is the pathname of the configuration directory: a relative
# pathname with respect to the build directory.
ds_main_CFGDIR		?= $$(srcdir)/configuration

## ------------------------------------------------------------

.PHONY: $$(ds_main_GROUP_RULES) $$(ds_main_MAIN_RULES)
.PHONY: $$(foreach g,$$(ds_main_GROUP_RULES),$$(addprefix $$(g)-,$$(ds_main_MAIN_RULES)))

all:		$$(ds_main_GROUP_RULES)
clean:		$$(addsuffix -clean,     $$(ds_main_GROUP_RULES))
realclean:	$$(addsuffix -realclean, $$(ds_main_GROUP_RULES)) clean
install:	$$(addsuffix -install,	 $$(ds_main_GROUP_RULES))

## ------------------------------------------------------------
## Main group rules.

$$(ds_main_GROUP_RULES):
$$(addsuffix -all, $$(ds_main_GROUP_RULES)): %-all : %

## ------------------------------------------------------------
## Auxiliary installation rules.

.PHONY: $$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-install-aux)

install: bin-install-aux
ifneq ($$(strip $$(ds_config_DOC_ENABLED)),)
install: doc-install-aux
endif
ifneq ($$(strip $$(ds_config_DEV_ENABLED)),)
install: dev-install-aux
endif

# These are declared as empty rules, so that "make" does not print a
# warning 'no rule to make target' message.
$$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-install-aux):

## ------------------------------------------------------------

.PHONY: clean-builddir

clean-builddir:
	$(RM) $(builddir)/*

## ------------------------------------------------------------

.PHONY: nop nop-clean nop-realclean

nop:

clean:		nop-clean
realclean:	nop-realclean
nop-clean:
nop-realclean:

## ------------------------------------------------------------

uninstall:	$$(addsuffix -uninstall,$$(ds_main_GROUP_RULES))

ds_main_UNINSTALL_SCRIPT_PREFIX	= \
	$$(libexecdir)/$$(PACKAGE_NAME_LOWERCASE)/*/uninstall-$$(PACKAGE_NAME_LOWERCASE)

ds_main_UNINSTALL_BIN_CANDIDATES = $$(wildcard $$(ds_main_UNINSTALL_SCRIPT_PREFIX)-[0-9]*)
ds_main_UNINSTALL_DOC_CANDIDATES = $$(wildcard $$(ds_main_UNINSTALL_SCRIPT_PREFIX)-doc-[0-9]*)
ds_main_UNINSTALL_DEV_CANDIDATES = $$(wildcard $$(ds_main_UNINSTALL_SCRIPT_PREFIX)-dev-[0-9]*)

bin-uninstall: ; $$(call ds-main-uninstall,$$(ds_main_UNINSTALL_BIN_CANDIDATES))
doc-uninstall: ; $$(call ds-main-uninstall,$$(ds_main_UNINSTALL_DOC_CANDIDATES))
dev-uninstall:
ifneq ($$(strip $$(ds_config_DEV_ENABLED)),)
	$$(call ds-main-uninstall,$$(ds_main_UNINSTALL_DEV_CANDIDATES))
endif

## ------------------------------------------------------------

.PHONY: abi abu

ifeq ($$(ds_config_ABI),direct)
abi: all install
abu: all uninstall install
endif

ifeq ($$(ds_config_ABI),bindist)
abi: all bindist bindist-install
abu: all uninstall bindist bindist-install
endif

ifeq ($$(ds_config_ABI),slackware)
abi: all slackware slackware-install
abu: all slackware slackware-upgrade
endif

## ------------------------------------------------------------

.PHONY: print-install-layout print-install-files-layout print-install-directories-layout
.PHONY: $$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-print-install-layout)
.PHONY: $$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-print-install-files-layout)
.PHONY: $$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-print-install-directories-layout)

print-install-layout:			$$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-print-install-layout)
print-install-files-layout:		$$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-print-install-files-layout)
print-install-directories-layout:	$$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-print-install-directories-layout)

$$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-print-install-layout):
$$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-print-install-files-layout):
$$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-print-install-directories-layout):

## ------------------------------------------------------------

.PHONY: print-uninstall-script print-uninstall-files-script print-uninstall-directories-script
.PHONY: $$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-print-uninstall-script)
.PHONY: $$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-print-uninstall-files-script)
.PHONY: $$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-print-uninstall-directories-script)

print-uninstall-script:			$$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-print-uninstall-script)
print-uninstall-files-script:		$$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-print-uninstall-files-script)
print-uninstall-directories-script:	$$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-print-uninstall-directories-script)

$$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-print-uninstall-script):
$$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-print-uninstall-directories-script):
$$(foreach g,$$(ds_main_GROUP_RULES),$$(g)-print-uninstall-files-script):

## ------------------------------------------------------------

ds_main_CLEANFILES	= config.log config.status config.cache Makefile*

.PHONY: config-clean nothing

# This  target is to  allow one  to update  the 'Makefile',  if required
# without doing anything else; if the 'Makefile' does not need updating:
# nothing  happens.   This target  is  required  by the  'develstuff.sh'
# script when querying  the 'Makefile' for variable values.   If the ':'
# command is not  used, and the target is left  with no commands, 'make'
# will print the  message "Nothing to be done for  'nothing'"; we do not
# want to fill the user's terminal with this.
nothing:
	@:

Makefile: $$(srcdir)/Makefile.in $$(srcdir)/configure $$(builddir)/config.status
	$$(builddir)/config.status

config.status: $$(srcdir)/configure
	$$(builddir)/config.status --recheck

config-clean:
	-$$(RM) $$(ds_main_CLEANFILES)

endef

## ------------------------------------------------------------

# Synopsis:
#
#	$(call ds-main-uninstall,<LIST_OF_PACKAGES>)
#
# Description:
#
#  Ask the user to select an uninstall script to run, then
#  run it. If the list is empty: nothing happens.

define ds-main-uninstall
$(if $(1),\
@echo
@echo 'Select package to uninstall (type "x" to abort):'
@select P in $(1) ; do test -n "$${P}" && $(BASH_PROGRAM) "$${P}"; break; done)
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Source modules.
## ------------------------------------------------------------

define ds-module
# $(1) - is the module identifier
# $(2) - is the main section: bin, dev, doc, nop, test, or whatever
# $(3) - is the installation mode, second argument to 'ds-install-module'

.PHONY: $$(addprefix $(1)-,	all clean realclean				\
				install install-aux uninstall uninstall-aux	\
				\
				print-install-files-layout			\
				print-install-directories-layout		\
				print-install-layout				\
				\
				print-install-files-layout-aux			\
				print-install-directories-layout-aux		\
				print-install-layout-aux			\
				\
				print-uninstall-files-script			\
				print-uninstall-directories-script		\
				print-uninstall-script				\
				\
				print-uninstall-files-script-aux		\
				print-uninstall-directories-script-aux		\
				print-uninstall-script-aux)

$(1)-all: $$($(1)_TARGETS)
$(1)-clean:				; -@$$(call ds-clean-files,$(1))
$(1)-realclean:				; -@$$(call ds-real-clean-files,$(1))
$(1)-install:	$(1)-install-aux	; @$$(call ds-install-module,$(1),$(call ds-ornull,$(3),DATA))
$(1)-uninstall:	$(1)-uninstall-aux	; @$$(call ds-uninstall-module,$(1))
$(1)-install-aux:
$(1)-uninstall-aux:

$(1)-print-install-files-layout:	$(1)-print-install-files-layout-aux
	@$$(call ds-module-print-files-layout,$(1))
$(1)-print-install-directories-layout:	$(1)-print-install-directories-layout-aux
	@$$(call ds-module-print-directories-layout,$(1))
$(1)-print-install-layout:		$(1)-print-install-layout-aux
	@$$(call ds-module-print-layout,$(1))

$(1)-print-install-files-layout-aux:
$(1)-print-install-directories-layout-aux:
$(1)-print-install-layout-aux:		$(1)-print-install-files-layout-aux \
					$(1)-print-install-directories-layout-aux

$(1)-print-uninstall-files-script:		$(1)-print-uninstall-files-script-aux
	@$$(call ds-module-print-uninstall-files-script,$(1))
$(1)-print-uninstall-directories-script:	$(1)-print-uninstall-directories-script-aux
	@$$(call ds-module-print-uninstall-directories-script,$(1))
$(1)-print-uninstall-script:			$(1)-print-uninstall-script-aux
	@$$(call ds-module-print-uninstall-script,$(1))

$(1)-print-uninstall-files-script-aux:
$(1)-print-uninstall-directories-script-aux:
$(1)-print-uninstall-script-aux:	$(1)-print-uninstall-files-script-aux \
					$(1)-print-uninstall-directories-script-aux

# ------------------------------------------------------------

$(2):		$(1)-all
$(2)-clean:	$(1)-clean
$(2)-realclean:	$(1)-realclean
$(2)-install:	$(1)-install
$(2)-uninstall:	$(1)-uninstall

$(2)-print-install-files-layout:	$(1)-print-install-files-layout
$(2)-print-install-directories-layout:	$(1)-print-install-directories-layout
$(2)-print-install-layout:		$(1)-print-install-layout

$(2)-print-uninstall-files-script:	 $(1)-print-uninstall-files-script
$(2)-print-uninstall-directories-script: $(1)-print-uninstall-directories-script
$(2)-print-uninstall-script:		 $(1)-print-uninstall-script

endef

define ds-module-no-install
# $(1) - is the module identifier
# $(2) - is the main section: bin, dev, doc, nop, test, or whatever
.PHONY: $$(addprefix $(1)-,all clean realclean)

$(1)-all: $$($(1)_TARGETS)
$(1)-clean:	; -@$$(call ds-clean-files,$(1))
$(1)-realclean:	; -@$$(call ds-real-clean-files,$(1))

$(2):		$(1)-all
$(2)-clean:	$(1)-clean
$(2)-realclean:	$(1)-realclean
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Canned installation commands.
## ------------------------------------------------------------

define ds-permissions
$(1)_OWNER	= $(2)
$(1)_GROUP	= $(3)
$(1)_FMODE	= $(4)
$(1)_DMODE	= $(5)
endef

## ------------------------------------------------------------
## Module's directory and files installation.

define ds-install-directory
$(if $($(1)_INSTDIR),$(INSTALL) \
	-m $(call ds-ornull,$($(1)_DMODE),$(INSTALL_DIR_MODE)) \
        $(if $($(1)_OWNER),-o $($(1)_OWNER)) \
        $(if $($(1)_GROUP),-g $($(1)_GROUP)) \
	-d $(DESTDIR)$($(1)_INSTDIR),\
	$(error null install directory variable "$(1)_INSTDIR"))
endef

define ds-install-files
$(if $($(1)_INSTLST),\
	$(if $($(1)_INSTDIR),\
		$(INSTALL) \
			-m $(call ds-ornull,$($(1)_FMODE),$(INSTALL_$(2)_MODE)) \
			$(if $($(1)_OWNER),-o $($(1)_OWNER)) \
			$(if $($(1)_GROUP),-g $($(1)_GROUP)) \
			$($(1)_INSTLST) $(DESTDIR)$($(1)_INSTDIR),\
		$(error null install directory variable "$(1)_INSTDIR")),\
	$(error empty install list variable "$(1)_INSTLST"))
endef

## ------------------------------------------------------------
## Module's installation functions.

define ds-install-module
$(call ds-echo,'installing $(1) files...')
$(call ds-install-directory,$(1))
$(call ds-install-files,$(1),$(2))
$(call ds-echo,'------------------------------------------- completed.')
endef

define ds-install-data
$(call ds-install-module,$(1),DATA)
endef

define ds-install-bin
$(call ds-install-module,$(1),BIN)
endef

define ds-install-lib
$(call ds-install-module,$(1),LIB)
endef

## ------------------------------------------------------------
## Module's uninstall functions.

define ds-uninstall-files
$(foreach f,$($(1)_INSTLST),$(RM_FILE) $($(1)_INSTDIR)/$(notdir $(f));)
endef

define ds-uninstall-directories
$(RMDIR) $($(1)_INSTDIR)
endef

define ds-uninstall-module
$(call ds-uninstall-files,$(1))
$(call ds-uninstall-directories,$(1))
endef

## ------------------------------------------------------------
## Module's installation layout inspection.

define ds-module-print-files-layout
$(foreach f,$($(1)_INSTLST),echo $($(1)_INSTDIR)/$(notdir $(f));)
endef

define ds-module-print-directories-layout
echo $($(1)_INSTDIR)
endef

define ds-module-print-layout
$(call ds-module-print-files-layout,$(1))
$(call ds-module-print-directories-layout,$(1))
endef

## ------------------------------------------------------------
## Module's uninstall scripts.

define ds-module-print-uninstall-files-script
$(foreach f,$($(1)_INSTLST),echo $(RM_FILE) $($(1)_INSTDIR)/$(notdir $(f));)
endef

define ds-module-print-uninstall-directories-script
echo $(RMDIR) $($(1)_INSTDIR)
endef

define ds-module-print-uninstall-script
$(call ds-module-print-uninstall-files-script,$(1))
$(call ds-module-print-uninstall-directories-script,$(1))
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Predefined modules: meta scripts.
## ------------------------------------------------------------

# Synopsis:
#
#	$(eval $(call ds-meta-scripts))
#
# Description:
#
#  Add a module to install package handling scripts. Meta scripts are:
#
#	preinstall		to be executed before installing the package
#				(for example to add users and groups)
#
#	postinstall		to be executed after package installation
#				(for example to configure the pakcage)
#
#	preremoval		to be executed before removing the package
#				(for example to remove programs from menu
#				infrastructures)
#
#	postremoval		to be executed after removing the package
#				(for example to remove users and groups)
#
#  It is fine if only some (or none) of the scripts exist in the source tree.

define ds-meta-scripts
$$(eval $$(call ds-srcdir,ds_meta_scripts,$$(srcdir)/meta))
$$(eval $$(call ds-builddir,ds_meta_scripts,$$(builddir)/meta.d))

ds_meta_scripts_NAMES	= preinstall postinstall preremoval postremoval
ds_meta_scripts_SOURCES = $$(call ds-glob,ds_meta_scripts,$$(addsuffix .in,$$(ds_meta_scripts_NAMES)))
ds_meta_scripts_INSTLST	= $$(call ds-replace-dir,$$(ds_meta_scripts_BUILDDIR),$$(ds_meta_scripts_SOURCES:.in=))
ds_meta_scripts_INSTDIR	= $$(pkglibexecdir)

ifneq ($$(strip $$(ds_meta_scripts_SOURCES)),)
$$(eval $$(call ds-module,ds_meta_scripts,bin,BIN))
endif

endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Predefined modules: pkg-config meta data files.
## ------------------------------------------------------------

# Synopsis:
#
#	$(eval $(call ds-pkg-config,<NAMES>))
#
# Description:
#
#  Add a module to install the meta data files for pkg-config.
#  More than one meta file can be selected by setting the
#  <NAMES> parameter to the list of file names with the ".pc"
#  extension stripped.
#
#  Each of the file names will be "$(builddir)/meta.d/<NAME>.pc",
#  and it should be produced by "configure" by putting the line
#
#	AC_CONFIG_FILES(meta.d/<NAME>.pc:meta/<NAME>.pc.in)
#
#  in the "configure.ac" file. It is fine if the files do not
#  not exist. If <NAMES> is not used: by default an attempt
#  is done to use "$(PACKAGE_NAME_LOWERCASE).pc".

define ds-pkg-config
$$(eval $$(call ds-srcdir,ds_pkg_config,$$(srcdir)/meta))
$$(eval $$(call ds-builddir,ds_pkg_config,$$(builddir)/meta.d))

ds_pkg_config_NAMES	= $$(addsuffix .pc,$$(call ds-ornull,$2,$$(PACKAGE_NAME_LOWERCASE)))
ds_pkg_config_SOURCES	= $$(call ds-glob,ds_pkg_config,$$(addsuffix .in,$$(ds_pkg_config_NAMES)))
ds_pkg_config_INSTLST	= $$(call ds-replace-dir,$$(ds_pkg_config_BUILDDIR),$$(ds_pkg_config_SOURCES:.in=))
ds_pkg_config_INSTDIR	= $$(libdir)/pkgconfig

ifneq ($$(strip $$(ds_pkg_config_SOURCES)),)
$$(eval $$(call ds-module,ds_pkg_config,bin,DATA))
endif

endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Predefined modules: GNU Autoconf macro files.
## ------------------------------------------------------------

# Synopsis:
#
#	$(eval $(call ds-autoconf,<NAMES>))
#
# Description:
#
#  Add a module to install macro files GNU Autoconf. These
#  files are meant to be included in foreign packages that
#  depend on this pakcage.
#
#  More than one macro file can be selected by setting the
#  <NAMES> parameter to the list of file names with the ".m4"
#  extension stripped.
#
#  The files are searched in the directory "$(srcdir)/autoconf".
#  It is fine if the files do not not exist. If <NAMES> is not
#  used: by default an attempt is done to install
#  "$(PACKAGE_NAME_LOWERCASE).m4".

define ds-autoconf
$$(eval $$(call ds-srcdir,ds_autoconf,$$(srcdir)/autoconf))

ds_autoconf_NAMES	= $$(addsuffix .m4,$$(call ds-ornull,$2,$$(PACKAGE_NAME_LOWERCASE)))
ds_autoconf_INSTLST	= $$(call ds-glob,ds_autoconf,$$(ds_autoconf_NAMES))
ds_autoconf_INSTDIR	= $$(datadir)/aclocal

ifneq ($$(strip $$(ds_autoconf_INSTLST)),)
$$(eval $$(call ds-module,ds_autoconf,dev,DATA))
endif

endef

## ------------------------------------------------------------





#page
## ------------------------------------------------------------
## Predefined modules: uninstall scripts.
## ------------------------------------------------------------

# Synopsis:
#
#	$(eval $(call ds-uninstall-scripts))
#
# Description:
#
#  Build scripts to uninstall the packages.
#
# *** WARNING ***
#
#  When using this function: it must be the last thing of the Makefile,
#  only a call to 'ds-end' may come after it.

define ds-uninstall-scripts

$$(eval $$(call ds-uninstall-scripts-module,bin,BIN))
$$(eval $$(call ds-uninstall-scripts-module,doc,DOC,doc-))
ifneq ($$(strip $$(ds_config_DEV_ENABLED)),)
$$(eval $$(call ds-uninstall-scripts-module,dev,DEV,dev-))
endif

endef

## ------------------------------------------------------------

define ds-uninstall-scripts-module

$$(eval $$(call ds-builddir,ds_uninstall_$(1)_scripts,$$(builddir)/uninstall.d))

ds_uninstall_$(2)_SCRIPT	= \
	$$(ds_uninstall_$(1)_scripts_BUILDDIR)/uninstall-$(PACKAGE_NAME_LOWERCASE)-$(3)$$(PACKAGE_XVERSION).sh

ds_uninstall_$(1)_scripts_TARGETS	= $$(ds_uninstall_$(2)_SCRIPT)
ds_uninstall_$(1)_scripts_INSTLST	= $$(ds_uninstall_$(1)_scripts_TARGETS)
ds_uninstall_$(1)_scripts_INSTDIR	= $$(pkglibexecdir)

ds_uninstall_$(1)_scripts_CLEANFILES		= $$(ds_uninstall_$(1)_scripts_TARGETS)
ds_uninstall_$(1)_scripts_REALCLEANFILES	= $$(ds_uninstall_$(1)_scripts_TARGETS)

$$(eval $$(call ds-module,ds_uninstall_$(1)_scripts,$(1),BIN))

$$(ds_uninstall_$(2)_SCRIPT):
	$$(call ds-echo,'building $(1) uninstall script...')
# This is not required because the first 'echo' outputs with '>'.
#	-@test -f $$(@) && $(RM) $$(@)
	@echo '#!/bin/sh'							>$$(@)
	@echo '#'								>>$$(@)
	@echo '# Executing this script will remove the package: $(PACKAGE_NAME_LOWERCASE)-$(3)$$(PACKAGE_XVERSION).'	>>$$(@)
	@echo '#'								>>$$(@)
	@echo '# *** WARNING ***'						>>$$(@)
	@echo '#'								>>$$(@)
	@echo '# Do not run this script if you use a package management'	>>$$(@)
	@echo '# system, like the one of Slackware Linux. Rely on it'		>>$$(@)
	@echo '# for package removal.'						>>$$(@)
	@echo									>>$$(@)
	@$(MAKE) --silent $(1)-print-uninstall-script >>$$(@)
	@printf '\n### end of file\n' >>$$(@)
	$$(call ds-echo,'------------------------------------------------------------ done.')

endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Predefined modules: package config inspection script.
## ------------------------------------------------------------

# Synopsis:
#
#	$(eval $(call ds-config-inspection-sript))
#
# Description:
#
#  Install the configuration inspection script: a program that
#  outputs the installation directory, include files directory,
#  package version, etc.

define ds-config-inspection-script
$$(eval $$(call ds-srcdir,ds_config_script,$$(srcdir)/meta))
$$(eval $$(call ds-builddir,ds_config_script,$$(builddir)/meta.d))

ds_config_script_NAME	 = $$(PACKAGE_NAME_LOWERCASE)-config
ds_config_script_INSTLST = $$(ds_config_script_BUILDDIR)/$$(ds_config_script_NAME)
ds_config_script_INSTDIR = $$(bindir)

$$(eval $$(call ds-module,ds_config_script,bin,BIN))
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Predefined modules: tests.
## ------------------------------------------------------------

# Synopsis:
#
#	$(eval $(call ds-tests))
#
# Description:
#
#  Add test rules. The official targets are: 'test', 'test-clean',
#  'test-realclean'.

define ds-tests
.PHONY: test  test-clean  test-realclean
.PHONY: tests tests-clean tests-realclean
.PHONY: check

test:
tests:			test
check:			test

test-clean:
tests-clean:		test-clean
clean:			test-clean

test-realclean:		test-clean
tests-realclean:	test-realclean
realclean:		test-realclean
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Predefined modules: Tcl tests.
## ------------------------------------------------------------

# Synopsis:
#
#	$(eval $(call ds-tcl-programs))
#	$(eval $(call ds-tests))
#	$(eval $(call ds-tcl-tests))
#
# Description:
#
#  Add rules for testing Tcl scripts and packages, using the 'tcltest'
#  package. From the command line of 'make' the variable 'TCLFLAGS' can
#  be used to configure the 'tcltest' package.

define ds-tcl-tests
ds_tcl_TESTDIR			?= $$(srcdir)/tests
ds_tcl_TESTMAIN			?= $$(ds_tcl_TESTDIR)/all.tcl

ds_tcl_test_TARGETS		?=
ds_tcl_test_CLEANFILES		?=
ds_tcl_test_REALCLEANFILES	?=

.PHONY: tcltest tcltests

tcltest tcltests: $$(ds_tcl_test_TARGETS)
	if test -f $$(ds_tcl_TESTDIR); then		\
	  export TMPDIR=$$(TMPDIR);			\
	  export srcdir=$$(srcdir);			\
	  export builddir=$$(builddir);			\
	  $$(TCLSH) $$(ds_tcl_TESTDIR) $$(TESTFLAGS);	\
	fi

tcltest-clean:
	-$$(RM) $$(test_CLEANFILES)
tcltest-realclean:
	-$$(RM) $$(test_REALCLEANFILES)

test-clean: tcltest-clean
test-realclean: tcltest-realclean
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Predefined modules: examples.
## ------------------------------------------------------------

# Synopsis:
#
#	$(eval $(call ds-examples))
#
# Description:
#
#  Add rules to drive examples building and installation.

define ds-examples
ds_examples_TARGETS	?=

ds_examples_INSTLST	?=
ds_examples_INSTDIR	= $$(pkgexampledir)

$$(eval $$(call ds-default-clean-files-variables,ds_examples))
$$(eval $$(call ds-module,ds_examples,doc,DATA))

.PHONY: example  example-clean  example-realclean
.PHONY: examples examples-clean examples-realclean

examples:		ds_examples-all
examples-clean:		ds_examples-clean
examples-realclean:	ds_examples-realclean

example:		examples
example-clean:		examples-clean
example-realclean:	examples-realclean
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Predefined modules: generic documentation.
## ------------------------------------------------------------

# Synopsis:
#
#	$(eval $(call ds-generic-documentation))
#
# Description:
#
#  Add rules to install generic documentation files.

define ds-generic-documentation
$$(eval $$(call ds-srcdir,ds_doc_generic,$$(srcdir)))

ds_doc_generic_PTN	?= README* COPYING license.terms INSTALL* BUGS \
			   NEWS ChangeLog DESCRIPTION.txt TODO

ds_doc_generic_INSTLST		?= $$(call ds-glob,ds_doc_generic,$$(ds_doc_generic_PTN))
ds_doc_generic_INSTDIR		= $$(pkgdocdir)

$$(eval $$(call ds-module,ds_doc_generic,doc,DATA))
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Predefined modules: Texinfo documentation.
## ------------------------------------------------------------

# Synopsis:
#
#	$(eval $(call ds-texinfo-documentation))
#
# Description:
#
#  Add rules to install documentation in Texinfo format.
#  The variable 'ds_doc_texinfo_AUX_PREREQ' can be used
#  to add prerequisites.

define ds-texinfo-documentation
ds_doc_texinfo_SRCDIR	= $$(srcdir)/doc
ds_doc_texinfo_BUILDDIR	= $$(builddir)/ds_doc_texinfo.d

vpath	%.texi		$$(ds_doc_texinfo_SRCDIR)
vpath	%.texiinc	$$(ds_doc_texinfo_SRCDIR)

DS_TEXI_FLAGS		= -I $$(ds_doc_texinfo_SRCDIR) -I $$(ds_doc_texinfo_BUILDDIR)
DS_TEXI2INFO_FLAGS	= $$(DS_TEXI_FLAGS)
DS_TEXI2HTML_FLAGS	= $$(DS_TEXI_FLAGS) --html --no-split

ds_doc_texinfo_PREREQ	= $$(ds_doc_texinfo_BUILDDIR)/version.texiinc \
			  $$(wildcard $$(ds_doc_texinfo_SRCDIR)/*.texiinc) \
			  $$(ds_doc_texinfo_AUX_PREREQ)

## ------------------------------------------------------------

$$(eval $$(call ds-srcdir,ds_doc_texi2info,$$(ds_doc_texinfo_SRCDIR)))
$$(eval $$(call ds-builddir,ds_doc_texi2info,$$(ds_doc_texinfo_BUILDDIR)))

ds_doc_texi2info_SOURCES	= $$(call ds-glob,ds_doc_texi2info,*.texi)
ds_doc_texi2info_TARGETS	= $$(call ds-replace-dir,$$(ds_doc_texi2info_BUILDDIR)/,\
					$$(ds_doc_texi2info_SOURCES:.texi=.info))
ds_doc_texi2info_INSTLST	= $$(wildcard $$(foreach f,$$(ds_doc_texi2info_TARGETS),$$(f)*))
ifneq ($$(strip $$(ds_config_VERSIONED_LAYOUT)),)
ds_doc_texi2info_INSTDIR	= $$(pkginfodir)
else
ds_doc_texi2info_INSTDIR	= $$(infodir)
endif

ds_doc_texi2info_CLEANFILES	= $$(ds_doc_texinfo_BUILDDIR)
ds_doc_texi2info_REALCLEANFILES	= $$(ds_doc_texi2info_CLEANFILES)

$$(eval $$(call ds-module,ds_doc_texi2info,doc,DATA))

## ------------------------------------------------------------

$$(eval $$(call ds-srcdir,ds_doc_texi2html,$$(ds_doc_texinfo_SRCDIR)))
$$(eval $$(call ds-builddir,ds_doc_texi2html,$$(ds_doc_texinfo_BUILDDIR)))

ds_doc_texi2html_SOURCES	= $$(call ds-glob,ds_doc_texi2html,*.texi)
ds_doc_texi2html_TARGETS	= $$(call ds-replace-dir,$$(ds_doc_texi2html_BUILDDIR)/,\
					$$(ds_doc_texi2html_SOURCES:.texi=.html))
ds_doc_texi2html_INSTLST	= $$(wildcard $$(ds_doc_texi2html_TARGETS))
ds_doc_texi2html_INSTDIR	= $$(pkghtmldir)

ds_doc_texi2html_CLEANFILES	= $$(ds_doc_texinfo_BUILDDIR)
ds_doc_texi2html_REALCLEANFILES	= $$(ds_doc_texi2html_CLEANFILES)

$$(eval $$(call ds-module,ds_doc_texi2html,doc,DATA))

## ------------------------------------------------------------

$$(ds_doc_texinfo_BUILDDIR)/%.info: $$(ds_doc_texi2info_SRCDIR)/%.texi $$(ds_doc_texinfo_PREREQ)
	$$(MAKEINFO) $$(DS_TEXI2INFO_FLAGS) $$(<) -o $$(@)

$$(ds_doc_texinfo_BUILDDIR)/%.html: $$(ds_doc_texi2html_SRCDIR)/%.texi $$(ds_doc_texinfo_PREREQ)
	$$(MAKEINFO) $$(DS_TEXI2HTML_FLAGS) $$(<) -o $$(@)

$$(ds_doc_texinfo_BUILDDIR)/version.texiinc: Makefile
	echo -e "@macro version{}\n$$(PACKAGE_XVERSION)\n@end macro\n" >$$(@)

endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Predefined modules: C compiler rules.
## ------------------------------------------------------------

define ds-c-language

## ------------------------------------------------------------
## DevelStuff configuration variables.

# If set to 'yes' static libraries are built.
ds_config_ENABLE_STATIC		?= @ds_config_ENABLE_STATIC@

# If set to 'yes' shared libraries are built.
ds_config_ENABLE_SHARED		?= @ds_config_ENABLE_SHARED@

# If set to 'yes' stub libraries are built.
ds_config_ENABLE_STUB		?= @ds_config_ENABLE_STUB@

# Set it to 'yes' to disable 'strip' upon libraries.
ds_config_ENABLE_STRIP		?= yes

## ------------------------------------------------------------
## C language programs programs.

CC		= @CC@
CPP		= @CPP@
AR		= @AR@ rc
RANLIB		= @RANLIB@
STRIP		= @STRIP@
GDB		= @GDB@

## ------------------------------------------------------------
## Preprocessor options.

# This will be empty if we are using the "config.h" file.
DEFS		?= @DEFS@
INCLUDES	+= @INCLUDES@ -I. -I$$(srcdir)
CPPFLAGS	?= @CPPFLAGS@ $$(DEFS) $$(INCLUDES)

## ------------------------------------------------------------
## Compiler options.

# Notice that '-std=c99' is appended to 'CC' by the Autoconf
# macro 'AC_PROG_CC_C99'.
C_DEFAULT	?= -pipe -fPIC @C_DEFAULT@
C_WARNINGS	?= -Wall -W -Wextra -pedantic \
			-Wmissing-prototypes \
			-Wpointer-arith -Wcast-qual -Wcast-align \
			-Wwrite-strings -Wnested-externs \
			-Wstrict-prototypes -Wshadow -fno-common
CCFLAGS		?= $$(C_DEFAULT) $$(C_WARNINGS)

# Customisable compiler options.
CFLAGS		?= @CFLAGS@

## ------------------------------------------------------------
## Linker stuff.

LIBS		?= @LIBS@
LDFLAGS		?= @LDFLAGS@
LDFLAGS_RPATH	?= @LDFLAGS_RPATH@
LDFLAGS_DL	?= @LDFLAGS_DL@

## ------------------------------------------------------------
## Other compiler variables.

OBJEXT			= @OBJEXT@
NO_MINUS_C_MINUS_O	= @NO_MINUS_C_MINUS_O@
ifeq ($$(strip $$(NO_MINUS_C_MINUS_O)),)
CC_COMPILE_OUTPUT	?= -c -o
else
CC_COMPILE_OUTPUT	?= -o
endif

CC_BUILD_OUTPUT		?= -o

endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## C language: generic compiler functions.
## ------------------------------------------------------------

# $(1) - the identifier of the module
# $(2) - a list of linker options
define ds-cc-compile
$(1)_CC_COMPILE_ENV		?=
$(1)_CC_COMPILE_MORE_FLAGS	?=
$(1)_CC_COMPILE_FLAGS		?= $$(CPPFLAGS) $$(CCFLAGS) $(2) $$(CFLAGS) $$($(1)_CC_COMPILE_MORE_FLAGS)
$(1)_CC_COMPILE			?= $$($(1)_CC_COMPILE_ENV) $$(CC) $$($(1)_CC_COMPILE_FLAGS) $$(CC_COMPILE_OUTPUT)
endef

# $(1) - the identifier of the module
# $(2) - a list of linker options
define ds-cc-build-program
$(1)_CC_BUILD_PROGRAM_ENV	?=
$(1)_CC_BUILD_PROGRAM_LIBS	?= $$(LDFLAGS) $$(LIBS)
$(1)_CC_BUILD_PROGRAM_FLAGS	?= $$(C_DEFAULT) $(2) $$(CFLAGS)
$(1)_CC_BUILD_PROGRAM_PRE	?=
$(1)_CC_BUILD_PROGRAM_POST	?=
$(1)_CC_BUILD_PROGRAM		?= $$($(1)_CC_BUILD_PROGRAM_ENV) $$(CC) \
					$$($(1)_CC_BUILD_PROGRAM_FLAGS) $$($(1)_CC_BUILD_PROGRAM_LIBS) \
					$$(CC_BUILD_OUTPUT) $$(@) \
					$$($(1)_CC_BUILD_PROGRAM_PRE) $$(^) $$($(1)_CC_BUILD_PROGRAM_POST)
endef

# $(1) - the identifier of the module
# $(2) - a list of linker options
define ds-cc-build-shared-library
$(1)_CC_BUILD_SHARED_LIBRARY_ENV	?=
$(1)_CC_BUILD_SHARED_LIBRARY_LIBS	?= $$(LDFLAGS) $$(LIBS)
$(1)_CC_BUILD_SHARED_LIBRARY_FLAGS	?= $$(C_DEFAULT) -shared $(2) $$(CFLAGS) 
$(1)_CC_BUILD_SHARED_LIBRARY_PRE	?=
$(1)_CC_BUILD_SHARED_LIBRARY_POST	?=
$(1)_CC_BUILD_SHARED_LIBRARY		?= $$($(1)_CC_BUILD_SHARED_LIBRARY_ENV) $$(CC) \
					$$($(1)_CC_BUILD_SHARED_LIBRARY_FLAGS) $$($(1)_CC_BUILD_SHARED_LIBRARY_LIBS) \
					$$(CC_BUILD_OUTPUT) $$(@) \
					$$($(1)_CC_BUILD_SHARED_LIBRARY_PRE) $$(^) $$($(1)_CC_BUILD_SHARED_LIBRARY_POST)
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## C language: compiling object files.
## ------------------------------------------------------------

define ds-c-sources

# The value $(1) is the identifier of this module.
$(1)_SRCDIR		?= $$(srcdir)/src
$(1)_BUILDDIR		?= $$(builddir)/objects.d
$(1)_PATTERNS		?= *.c

$(1)_PREREQUISITES	?=
$(1)_MAIN_SECTION	?= bin

$$(eval $$(call ds-srcdir,$(1),$$($(1)_SRCDIR)))
$$(eval $$(call ds-builddir,$(1),$$($(1)_BUILDDIR)))

vpath	%.h		$$($(1)_SRCDIR)
vpath	%.$$(OBJEXT)	$$($(1)_BUILDDIR)

$$(eval $$(call ds-cc-compile,$(1),-I$$($(1)_SRCDIR)))

$(1)_SOURCES	= $$(call ds-glob,$(1),$$(call ds-ornull,$$($(1)_PATTERNS),*.c))
$(1)_OBJECTS	= $$(call ds-replace-dir,$$($(1)_BUILDDIR),$$($(1)_SOURCES:.c=.$$(OBJEXT)))

# This is needed because it is the interface to 'ds-module-no-install'
$(1)_TARGETS	+= $$($(1)_OBJECTS)

$(1)_CLEANFILES		+= $$($(1)_TARGETS)
$(1)_REALCLEANFILES	+= $$($(1)_CLEANFILES)

$$(eval $$(call ds-module-no-install,$(1),$$($(1)_MAIN_SECTION)))

$$($(1)_OBJECTS) : $$($(1)_BUILDDIR)/%.$$(OBJEXT) : $$($(1)_SRCDIR)/%.c $$($(1)_PREREQUISITES)
	$$($(1)_CC_COMPILE) $$(@) $$(<)
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## C language: compiling object files with stub sources.
## ------------------------------------------------------------

define ds-c-sources-with-stub

## ------------------------------------------------------------
## Common argument variables.

# The value $(1) is the identifier of this module.
$(1)_SRCDIR		?= $$(srcdir)/src
$(1)_stubsrc_BUILDDIR	?= $$(srcdir)/stub
$(1)_BUILDDIR		?= $$(builddir)/objects.d
$(1)_PATTERNS		?= *.c

$(1)_PREREQUISITES	?= $$(wildcard $$(addprefix $$($(1)_SRCDIR)/,\
				$$($(1)_stubsrc_HEADER_FILE) internal.h debug.h))
$(1)_MAIN_SECTION	?= bin

## ------------------------------------------------------------
## Stub related variables.

$(1)_stubsrc_HEADER_FILE		?= $(1).h
$(1)_stubsrc_LIBRARY_ID			?= $(1)
$(1)_stubsrc_STUB_SHARED_LIBRARY_ID	?= $$($(1)_stub_SHARED_LIBRARY_LINK_ID)
$(1)_stubsrc_EXTERN			?= $$($(1)_stubsrc_LIBRARY_ID)_decl

$(1)_stubsrc_GLOBAL_HEADER_NAME	?= $$($(1)_stubsrc_LIBRARY_ID)_stub.h
$(1)_stubsrc_SHARED_LIB_NAME	?= $$($(1)_stubsrc_LIBRARY_ID)_shared_stub_library.c
$(1)_stubsrc_STATIC_LIB_NAME	?= $$($(1)_stubsrc_LIBRARY_ID)_static_stub_library.c

$(1)_stubsrc_GLOBAL_HEADER	= $$($(1)_stubsrc_BUILDDIR)/$$($(1)_stubsrc_GLOBAL_HEADER_NAME)
$(1)_stubsrc_SHARED_LIB		= $$($(1)_stubsrc_BUILDDIR)/$$($(1)_stubsrc_SHARED_LIB_NAME)
$(1)_stubsrc_STATIC_LIB		= $$($(1)_stubsrc_BUILDDIR)/$$($(1)_stubsrc_STATIC_LIB_NAME)

## ------------------------------------------------------------
## Stub related commands.

$(1)_MKSTUB			= $$(ds_main_INFRADIR)/mkstub $$($(1)_stubsrc_FLAGS)
$(1)_MKSTUB_MODULE_HEADER	= $$($(1)_MKSTUB) --make-stub-module-header
$(1)_MKSTUB_MODULE_TABLE	= $$($(1)_MKSTUB) --make-stub-module-table
$(1)_MKSTUB_GLOBAL_HEADER	= $$($(1)_MKSTUB) --make-stub-global-header
$(1)_MKSTUB_SHARED_LIB		= $$($(1)_MKSTUB) --make-stub-shared-library
$(1)_MKSTUB_STATIC_LIB		= $$($(1)_MKSTUB) --make-stub-static-library

$(1)_stubsrc_FLAGS	= --header-file=$$($(1)_stubsrc_HEADER_FILE)	\
			  --library=$$($(1)_stubsrc_LIBRARY_ID)		\
			  --function-qualifier=$$($(1)_stubsrc_EXTERN)	\
			  --shared-stub-library-name=$$($(1)_stub_shared_library_LINK_NAME)

## ------------------------------------------------------------
## Rule related variables.

$$(eval $$(call ds-srcdir,$(1),$$($(1)_SRCDIR)))
$$(eval $$(call ds-builddir,$(1),$$($(1)_BUILDDIR)))
$$(eval $$(call ds-builddir,$(1)_stubsrc,$$(srcdir)/stub))

vpath	%.h		$$($(1)_SRCDIR)
vpath	%.h		$$($(1)_stubsrc_BUILDDIR)
vpath	%.$$(OBJEXT)	$$($(1)_BUILDDIR)


$(1)_SOURCES		= $$(call ds-glob,$(1),$$(call ds-ornull,$$($(1)_PATTERNS),*.c))
$(1)_stubsrc_HEADERS	= $$(addprefix $$($(1)_stubsrc_BUILDDIR)/stub_,$$(notdir $$($(1)_SOURCES:.c=.h)))
$(1)_stubsrc_TABLES	= $$(addprefix $$($(1)_stubsrc_BUILDDIR)/table_,$$(notdir $$($(1)_SOURCES)))
$(1)_OBJECTS		= $$(call ds-replace-dir,$$($(1)_BUILDDIR),$$($(1)_SOURCES:.c=.$$(OBJEXT)))

$(1)_stub_shared_library_OBJECTS = $$($(1)_BUILDDIR)/$$($(1)_stubsrc_SHARED_LIB_NAME:.c=.$$(OBJEXT))
$(1)_stub_static_library_OBJECTS = $$($(1)_BUILDDIR)/$$($(1)_stubsrc_STATIC_LIB_NAME:.c=.$$(OBJEXT))
$(1)_stubsrc_OBJECTS	= $$($(1)_stub_shared_library_OBJECTS) \
			  $$($(1)_stub_static_library_OBJECTS)

# This is needed because it is the interface to 'ds-module-no-install'
$(1)_TARGETS		+= $$($(1)_OBJECTS) $$($(1)_stubsrc_OBJECTS)

$(1)_CLEANFILES		+= $$($(1)_TARGETS)
$(1)_REALCLEANFILES	+= $$($(1)_CLEANFILES)						\
			   $$($(1)_stubsrc_HEADERS) $$($(1)_stubsrc_GLOBAL_HEADER)	\
			   $$($(1)_stubsrc_TABLES)					\
			   $$($(1)_stubsrc_SHARED_LIB) $$($(1)_stubsrc_STATIC_LIB)

$$(eval $$(call ds-module-no-install,$(1),$$($(1)_MAIN_SECTION)))

## ------------------------------------------------------------
## Stub generation rules.

$$($(1)_stubsrc_HEADERS): $$($(1)_stubsrc_BUILDDIR)/stub_%.h : $$($(1)_SRCDIR)/%.c
	$$($(1)_MKSTUB_MODULE_HEADER) -o$$(@) $$(<)

$$($(1)_stubsrc_GLOBAL_HEADER): $$($(1)_stubsrc_HEADERS)
	$$($(1)_MKSTUB_GLOBAL_HEADER) -o$$(@) $$($(1)_SOURCES)

$$($(1)_stubsrc_TABLES): $$($(1)_stubsrc_BUILDDIR)/table_%.c : $$($(1)_SRCDIR)/%.c
	$$($(1)_MKSTUB_MODULE_TABLE) -o$$(@) $$(<)

$$($(1)_stubsrc_SHARED_LIB): $$($(1)_SOURCES)
	$$($(1)_MKSTUB_SHARED_LIB) -o$$(@) $$($(1)_SOURCES)

$$($(1)_stubsrc_STATIC_LIB): $$($(1)_SOURCES)
	$$($(1)_MKSTUB_STATIC_LIB) -o$$(@) $$($(1)_SOURCES)

## ------------------------------------------------------------
## Rules.

$$(eval $$(call ds-cc-compile,$(1),-I$$($(1)_SRCDIR)))

# The -I option allows the compilation  of object files to find the stub
# headers.  The -D options defines to the empty string the "stub" macros
# used to  declare the timestamp of  a function; notice  that the double
# quotes  are mandatory because  the parentheses  are meaningful  to the
# shell.
$(1)_CC_COMPILE_FLAGS	+= -I$$($(1)_stubsrc_BUILDDIR) "-Dstub(TIMESTAMP)="

$$($(1)_OBJECTS) : $$($(1)_BUILDDIR)/%.$$(OBJEXT) : $$($(1)_SRCDIR)/%.c $$($(1)_PREREQUISITES) \
			$$($(1)_stubsrc_BUILDDIR)/stub_%.h $$($(1)_stubsrc_GLOBAL_HEADER)
	$$($(1)_CC_COMPILE) $$(@) $$(<)

$$($(1)_stubsrc_OBJECTS) : $$($(1)_BUILDDIR)/%.$$(OBJEXT) : $$($(1)_stubsrc_BUILDDIR)/%.c $$($(1)_PREREQUISITES) \
			$$($(1)_stubsrc_TABLES) $$($(1)_stubsrc_GLOBAL_HEADER)
	$$($(1)_CC_COMPILE) $$(@) $$(<)
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## C language: building shared libraries.
## ------------------------------------------------------------

define ds-c-shared-library
ifeq ($$(strip $$(ds_config_ENABLE_SHARED)),yes)

# $(1) - the identifier of the module
$(1)_shared_library_BUILDDIR		?= $$(builddir)/libraries.d
$(1)_shared_library_OBJECTS		?= $$($(1)_OBJECTS)
$(1)_shared_library_ID			?= $(1)
$(1)_shared_library_LINK_ID		?=
$(1)_shared_library_MAIN_SECTION	?= bin

$(1)_shared_library_NAME	= lib$$($(1)_shared_library_ID).so
$(1)_shared_library_PATHNAME	= $$($(1)_shared_library_BUILDDIR)/$$($(1)_shared_library_NAME)
$(1)_shared_library_LINK_NAME	= lib$$($(1)_shared_library_LINK_ID).so
$(1)_shared_library_LINK_PATHNAME = $$($(1)_shared_library_BUILDDIR)/$$($(1)_shared_library_LINK_NAME)

$$(eval $$(call ds-cc-build-shared-library,$(1)_shared_library))
$$(eval $$(call ds-builddir,$(1)_shared_library,$$($(1)_shared_library_BUILDDIR)))

$(1)_shared_library_TARGETS	= $$($(1)_shared_library_PATHNAME) $$($(1)_shared_library_LINK_PATHNAME)
$(1)_shared_library_INSTLST	= $$($(1)_shared_library_PATHNAME)
$(1)_shared_library_INSTDIR	?= $(libdir)

$(1)_shared_library_CLEANFILES		+= $$($(1)_shared_library_TARGETS)
$(1)_shared_library_REALCLEANFILES	+= $$($(1)_shared_library_CLEANFILES)

$$(eval $$(call ds-module,$(1)_shared_library,$$($(1)_shared_library_MAIN_SECTION),LIB))

$$($(1)_shared_library_PATHNAME) : $$($(1)_shared_library_OBJECTS)
	$$(call ds-echo,'## ------------------------------------------------------------')
	$$(call ds-echo,'## Building shared library $$($(1)_shared_library_NAME)')
	$$($(1)_shared_library_CC_BUILD_SHARED_LIBRARY)
ifeq ($$(ds_config_ENABLE_STRIP),yes)
	$$(STRIP) $$(@)
endif
ifneq ($$(strip $$($(1)_shared_library_LINK_ID)),)
	cd $$($(1)_shared_library_BUILDDIR);\
	test -L $$($(1)_shared_library_LINK_NAME) || \
	$$(SYMLINK) $$($(1)_shared_library_NAME) $$($(1)_shared_library_LINK_NAME)
endif # $(1)_shared_library_LINK_ID = ""
	$$(call ds-echo,'## ------------------------------------------------------------ done.')

## ------------------------------------------------------------

ifneq ($$(strip $$($(1)_shared_library_LINK_ID)),)
$(1)_shared_library-install-aux:
	$$(call ds-install-directory,$(1)_shared_library)
	cd $$(DESTDIR)$$($(1)_shared_library_INSTDIR) ; \
	$$(SYMLINK) $$($(1)_shared_library_NAME) $$($(1)_shared_library_LINK_NAME)

$(1)_shared_library-uninstall-aux:
	$$(RM_FILE) $$(DESTDIR)$$(libdir)/$$($(1)_shared_library_LINK_NAME)

$(1)_shared_library-print-install-files-layout-aux:
	@echo $$($(1)_shared_library_INSTDIR)/$$($(1)_shared_library_LINK_NAME)

$(1)_shared_library-print-uninstall-files-script-aux:
	@echo $$(RM_FILE) $$($(1)_shared_library_INSTDIR)/$$($(1)_shared_library_LINK_NAME)

endif # $(1)_shared_library_LINK_ID = ""
endif # ds_config_ENABLE_SHARED = yes
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## C language: building static libraries.
## ------------------------------------------------------------

define ds-c-static-library
ifeq ($$(strip $$(ds_config_ENABLE_STATIC)),yes)

# $(1) - the identifier of the module
$(1)_static_library_BUILDDIR		?= $$(builddir)/libraries.d
$(1)_static_library_OBJECTS		?= $$($(1)_OBJECTS)
$(1)_static_library_ID			?= $(1)
$(1)_static_library_MAIN_SECTION	?= dev

$(1)_static_library_NAME	= lib$$($(1)_static_library_ID).a
$(1)_static_library_PATHNAME	= $$($(1)_static_library_BUILDDIR)/$$($(1)_static_library_NAME)

$$(eval $$(call ds-builddir,$(1)_static_library,$$($(1)_static_library_BUILDDIR)))

$(1)_static_library_TARGETS	= $$($(1)_static_library_PATHNAME)
$(1)_static_library_INSTLST	= $$($(1)_static_library_TARGETS)
$(1)_static_library_INSTDIR	?= $(libdir)

$$(eval $$(call ds-default-clean-files-variables,$(1)_static_library))
$$(eval $$(call ds-module,$(1)_static_library,$$($(1)_static_library_MAIN_SECTION),LIB))

$$($(1)_static_library_PATHNAME) : $$($(1)_static_library_OBJECTS)
	$$(call ds-echo,'## ------------------------------------------------------------')
	$$(call ds-echo,'## Building static library $$($(1)_static_library_NAME)')
	$$(AR) $$(@) $$(^)
	-($$(RANLIB) $$(@) || true) >/dev/null 2>&1
	$$(call ds-echo,'## ------------------------------------------------------------ done.')

endif # ds_config_ENABLE_STATIC = yes
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## C language: library with stub support.
## ------------------------------------------------------------

define ds-c-library-with-stub

# This links the stub-shared library with the shared library.
$(1)_stub_shared_library_CC_BUILD_SHARED_LIBRARY_PRE	= \
	-L$$($(1)_shared_library_BUILDDIR) -l$$($(1)_shared_library_ID)

$$(eval $$(call ds-c-sources-with-stub,$(1)))
$$(eval $$(call ds-c-shared-library,$(1)))
$$(eval $$(call ds-c-static-library,$(1)))

ifeq ($$(strip $$(ds_config_ENABLE_STUB)),yes)
$$(eval $$(call ds-c-shared-library,$(1)_stub))
$$(eval $$(call ds-c-static-library,$(1)_stub))
endif # ds_config_ENABLE_STUB = yes

# Install the main header file of the library.
$$(eval $$(call ds-h-files-installer,$(1),$$($(1)_SRCDIR),$$($(1)_stubsrc_HEADER_FILE)))

# Install the stub header files.
$$(eval $$(call ds-h-files-installer,$(1)_stubsrc,$$($(1)_stubsrc_BUILDDIR),*.h))

endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## C language: linking a single program.
## ------------------------------------------------------------

define ds-c-single-program

# $(1) is the identifier of the module
$(1)_program_BUILDDIR		?= $$(builddir)/programs.d
$(1)_program_OBJECTS		?= $$($(1)_OBJECTS)
$(1)_program_PREFIX		?=
$(1)_program_ENV		?=
$(1)_program_MAIN_SECTION	?= bin

$(1)_program_NAME	= $$($(1)_program_PREFIX)$(2)
$(1)_program_PATHNAME	= $$($(1)_program_BUILDDIR)/$$($(1)_program_NAME)

$$(eval $$(call ds-cc-build-program,$(1)_program))
$$(eval $$(call ds-builddir,$(1)_program,$$(call ds-ornull,$$($(1)_program_BUILDDIR),$$(builddir)/programs.d)))

$(1)_program_TARGETS	+= $$($(1)_program_PATHNAME)
$(1)_program_INSTLST	= $$($(1)_program_PATHNAME)
$(1)_program_INSTDIR	?= $(pkglibexecdir)

$$(eval $$(call ds-default-clean-files-variables,$(1)_program))
$$(eval $$(call ds-module,$(1)_program,$$($(1)_program_MAIN_SECTION),LIB))

$$($(1)_program_PATHNAME) : $$($(1)_program_OBJECTS)
	$$($(1)_program_CC_BUILD_PROGRAM)
ifeq ($$(ds_config_ENABLE_STRIP),yes)
	$$(STRIP) $$(@)
endif

.PHONY: run-$(1)

run-$(1): $(1)_program-all
	$$($(1)_program_ENV) $$($(1)_program_PATHNAME)
endef


## ------------------------------------------------------------

define ds-c-single-program-no-install

# $(1) is the identifier of the module
# $(2) is the name of the program
$(1)_program_BUILDDIR		?= $$(builddir)/programs.d
$(1)_program_OBJECTS		?= $$($(1)_OBJECTS)
$(1)_program_PREFIX		?=
$(1)_program_ENV		?=
$(1)_program_MAIN_SECTION	?= bin

$(1)_program_NAME	= $$($(1)_program_PREFIX)$(2)
$(1)_program_PATHNAME	= $$($(1)_program_BUILDDIR)/$$($(1)_program_NAME)

$$(eval $$(call ds-builddir,$(1)_program,$$($(1)_program_BUILDDIR)))
$$(eval $$(call ds-cc-build-program,$(1)_program))

$(1)_program_TARGETS	= $$($(1)_program_PATHNAME)

$$(eval $$(call ds-default-clean-files-variables,$(1)_program))
$$(eval $$(call ds-module-no-install,$(1)_program,$$($(1)_program_MAIN_SECTION)))

$$($(1)_program_PATHNAME) : $$($(1)_program_OBJECTS)
	$$($(1)_program_CC_BUILD_PROGRAM)
ifeq ($$(ds_config_ENABLE_STRIP),yes)
	$$(STRIP) $$(@)
endif

.PHONY: run-$(1)

run-$(1): $(1)_program-all
	$$($(1)_program_ENV) $$($(1)_program_PATHNAME)
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## C language: linking a set of programs.
## ------------------------------------------------------------

define ds-c-programs

# $(1) is the identifier of the module
$(1)_programs_SRCDIR		?= $$($(1)_BUILDDIR)
$(1)_programs_BUILDDIR		?= $$(builddir)/programs.d
$(1)_programs_OBJECTS		?= $$($(1)_OBJECTS)
$(1)_programs_PREFIX		?=
$(1)_programs_ENV		?=
$(1)_programs_MAIN_SECTION	?= bin

$(1)_programs_NAMES	= $$(addprefix $$($(1)_programs_PREFIX),$$(notdir $$($(1)_programs_OBJECTS:.$(OBJEXT)=)))
$(1)_programs_PATHNAMES	= $$(addprefix $$($(1)_programs_BUILDDIR)/,$$($(1)_programs_NAMES))

$$(eval $$(call ds-builddir,$(1)_programs,$$($(1)_programs_BUILDDIR)))
$$(eval $$(call ds-cc-build-program,$(1)_programs))

$(1)_programs_TARGETS	= $$($(1)_programs_PATHNAMES)
$(1)_programs_INSTLST	= $$($(1)_programs_PATHNAMES)
$(1)_programs_INSTDIR	?= $(pkglibexecdir)

$$(eval $$(call ds-default-clean-files-variables,$(1)_programs))
$$(eval $$(call ds-module,$(1)_programs,$$($(1)_programs_MAIN_SECTION)))

$$($(1)_programs_PATHNAMES) : $$($(1)_programs_BUILDDIR)/$$($(1)_programs_PREFIX)% : $$($(1)_programs_SRCDIR)/%.$(OBJEXT)
	$$($(1)_programs_CC_BUILD_PROGRAM)
ifeq ($$(ds_config_ENABLE_STRIP),yes)
	$$(STRIP) $$(@)
endif

.PHONY: run-$(1) $$(addprefix run-,$$($(1)_programs_NAMES))

run-$(1): $$(addprefix run-,$$($(1)_programs_NAMES))

$$(addprefix run-,$$($(1)_programs_NAMES)): run-% : $$($(1)_programs_BUILDDIR)/%
	$$($(1)_programs_ENV) $$(<)

endef

## ------------------------------------------------------------

define ds-c-programs-no-install

# $(1) is the identifier of the module
$(1)_programs_SRCDIR		?= $$($(1)_BUILDDIR)
$(1)_programs_OBJECTS		?= $$($(1)_OBJECTS)
$(1)_programs_BUILDDIR		?= $$(builddir)/programs.d
$(1)_programs_PREFIX		?=
$(1)_programs_ENV		?=
$(1)_programs_MAIN_SECTION	?= bin

$(1)_programs_NAMES	= $$(addprefix $$($(1)_programs_PREFIX),$$(notdir $$($(1)_programs_OBJECTS:.$(OBJEXT)=)))
$(1)_programs_PATHNAMES	= $$(addprefix $$($(1)_programs_BUILDDIR)/,$$($(1)_programs_NAMES))

$$(eval $$(call ds-builddir,$(1)_programs,$$($(1)_programs_BUILDDIR)))
$$(eval $$(call ds-cc-build-program,$(1)_programs))

$(1)_programs_TARGETS	= $$($(1)_programs_PATHNAMES)

$$(eval $$(call ds-default-clean-files-variables,$(1)_programs))
$$(eval $$(call ds-module-no-install,$(1)_programs,$$($(1)_programs_MAIN_SECTION)))

$$($(1)_programs_PATHNAMES) : $$($(1)_programs_BUILDDIR)/$$($(1)_programs_PREFIX)% : $$($(1)_programs_SRCDIR)/%.$(OBJEXT)
	$$($(1)_programs_CC_BUILD_PROGRAM)
ifeq ($$(ds_config_ENABLE_STRIP),yes)
	$$(STRIP) $$(@)
endif

.PHONY: run-$(1) $$(addprefix run-,$$($(1)_programs_NAMES))

run-$(1): $$(addprefix run-,$$($(1)_programs_NAMES))

$$(addprefix run-,$$($(1)_programs_NAMES)): run-% : $$($(1)_programs_BUILDDIR)/%
	$$($(1)_programs_ENV) $$(<)

endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## C language: linking example programs.
## ------------------------------------------------------------

define ds-c-example-programs
# $(1) is the identifier of the module

$(1)_examples_SRCDIR		?= $$(srcdir)/examples
$(1)_examples_BUILDDIR		?= $$(builddir)/examples.d
$(1)_examples_MAIN_SECTION	?= examples

$$(eval $$(call ds-c-sources,$(1)_examples))

$(1)_examples_programs_BUILDDIR		?= $$($(1)_examples_BUILDDIR)
$(1)_examples_programs_MAIN_SECTION	= examples

$$(eval $$(call ds-c-programs-no-install,$(1)_examples))

endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## C language: linking test programs.
## ------------------------------------------------------------

define ds-c-test-programs
# $(1) is the identifier of the module

$(1)_tests_SRCDIR		?= $$(srcdir)/tests
$(1)_tests_BUILDDIR		?= $$(builddir)/tests.d
$(1)_tests_MAIN_SECTION		?= test

$$(eval $$(call ds-c-sources,$(1)_tests))

$(1)_tests_programs_BUILDDIR		?= $$($(1)_tests_BUILDDIR)
$(1)_tests_programs_MAIN_SECTION	?= test

$$(eval $$(call ds-c-programs-no-install,$(1)_tests))

$$($(1)_tests_programs_MAIN_SECTION): run-$(1)_tests

endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## C language: miscellaneous modules.
## ------------------------------------------------------------

# Synopsis:
#
#	$(eval $(call ds-h-files-installer,<IDENTIFIER>,<SRCDIR>,<PATTERNS>))
#
# Description:
#
#  Install header files.

define ds-h-files-installer

# $(1) - the identifier of the module
$(1)_c_headers_SRCDIR		?= $(2)
$(1)_c_headers_PATTERNS		?= $(3)
$(1)_c_headers_MAIN_SECTION	?= dev

$$(eval $$(call ds-srcdir,$(1),$$($(1)_c_headers_SRCDIR)))

$(1)_c_headers_INSTLST	= $$(call ds-glob,$(1),$$(call ds-ornull,$$($(1)_c_headers_PATTERNS),*.h))
$(1)_c_headers_INSTDIR	?= $$(pkgincludedir)

$$(eval $$(call ds-module,$(1)_c_headers,$$($(1)_c_headers_MAIN_SECTION)))

endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Predefined modules: MBFL scripts.
## ------------------------------------------------------------

# Synopsis:
#
#	$(eval $(call ds-mbfl-scripts-rules))
#
# Description:
# 
#  Add rules to preprocess a GNU Bash shell script with the MBFL
#  preprocessor.

define ds-mbfl-scripts-rules
MBFLPP			?= @MBFLPP@
MBFLPP_FLAGS		?=
MBFLTEST		?= @MBFLTEST@
MBFLTEST_FLAGS		?=

%.sh: %.sh.m4
	$$(MBFLPP) $$(MBFLPP_FLAGS) --output=$$(@) $$(^)
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Predefined modules: Emacs compiling.
## ------------------------------------------------------------

# Synopsis:
#
#	$(eval $(call ds-emacs-programs))
#
# Description:
#
#  Add variables for GNU Emacs batch mode invocation.

define ds-emacs-programs
EMACS		= @EMACS@
EMACS_FLAGS	= -batch -f batch-byte-compile
endef

# Synopsis:
#
#	$(eval $(call ds-emacs-compiler))
#
# Description:
#
#  Declare a module to compile GNU Emacs Lisp source files.
#
#  The  'EMACS_AUX_FLAGS' variable allows to put in additional
#  flags like '--user marco', which may be required because
#  '-batch' turns off loading of user's rc file, and we may
#  need the load directories selected there.

define ds-emacs-compiler
$$(eval $$(call ds-srcdir,emacs,$$(srcdir)/emacs))

emacs_SOURCES	= $$(wildcard *.el)
emacs_TARGETS	= $$(sources:.el=.elc)
emacs_INSTLST	= $$(emacs_SOURCES) $$(emacs_TARGETS)
emacs_INSTDIR	?=

emacs_CLEANFILES	= $$(emacs_TARGETS)
emacs_REALCLEANFILES	= $$(emacs_TARGETS)

$$(eval $$(call ds-module,emacs,bin,DATA))

.SUFFIXES: .el

%.elc : %.el
	$$(EMACS) $$(EMACS_AUX_FLAGS) $$(EMACS_FLAGS) $$(<)
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Predefined modules: source distribution.
## ------------------------------------------------------------

# Synopsis:
#
#	$(eval $(call ds-source-distribution))
#
# Description:
#
#  Add rules to build a source distribution.

define ds-source-distribution
ds_dist_TMPDIR		?= $$(TMPDIR)/$$(PKG_ID)
ds_dist_ARCHIVE		?= $$(PKG_ID)-src.tar.bz2
ds_dist_DESTDIR		= $$(builddir)/dist.d

ds_dist_REPOSITORY	?= /usr/local/src
ds_dist_PACKAGE_SECTION	?= local
ds_dist_PACKAGE_DEST	= $$(ds_dist_REPOSITORY)/$$(ds_dist_PACKAGE_SECTION)

.PHONY: dist dist-store

dist:
	-test -d $$(ds_dist_DESTDIR) || $$(MKDIR) $$(ds_dist_DESTDIR)
	$$(RM_SILENT) $$(ds_dist_TMPDIR)
	$$(RM_SILENT) $$(TMPDIR)/$$(ds_dist_ARCHIVE)
	$$(MKDIR) $$(ds_dist_TMPDIR)
	$$(TAR) \
		--directory=$$(srcdir) --create --file=- --dereference		\
		--exclude=RCS                   --exclude=CVS                   \
		--exclude=.git			--exclude=.git\*		\
		--exclude=archives              --exclude=\*.ps			\
		--exclude=\*.dvi                --exclude=tmp			\
		--exclude=\*.gz                 --exclude=\*.tar                \
		--exclude=\*.so                 --exclude=\*.$$(OBJEXT)         \
		--exclude=\*.a                  --exclude=\*.rpm                \
		--exclude=\*.deb                --exclude=.emacs\*		\
		--exclude=\*~                   --exclude=TAGS                  \
		--exclude=config.log            --exclude=config.status         \
		--exclude=config.cache          --exclude=Makefile              \
		--exclude=autom4te.cache	--exclude="{arch}"              \
		--exclude=.arch-ids		--exclude=\+\+\*                \
		--exclude=\=\*                                                  \
		. | $$(TAR) --directory=$$(ds_dist_TMPDIR) --extract --file=-
	$$(TAR) --directory=$$(TMPDIR) --verbose \
		--create --bzip2 --file=$$(ds_dist_DESTDIR)/$$(ds_dist_ARCHIVE) $$(PKG_ID)
	$$(RM_SILENT) $$(ds_dist_TMPDIR)

dist-store:
	$$(MV) $$(ds_dist_DESTDIR)/$$(ds_dist_ARCHIVE) $$(ds_dist_PACKAGE_DEST)

endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Binary distribution.
## ------------------------------------------------------------

# Synopsis:
#
#	$(eval $(call ds-binary-distribution))
#
# Description:
#
#  Add rules to build a binary distribution.

define ds-binary-distribution
ds_bindist_ARCHIVE_BIN	= $$(PACKAGE_NAME)-$$(PACKAGE_XVERSION).tar.gz
ds_bindist_ARCHIVE_DOC	= $$(PACKAGE_NAME)-doc-$$(PACKAGE_XVERSION).tar.gz
ds_bindist_ARCHIVE_DEV	= $$(PACKAGE_NAME)-dev-$$(PACKAGE_XVERSION).tar.gz
ds_bindist_TMPDIR	= $$(TMPDIR)/$$(PACKAGE_NAME)-$$(PACKAGE_XVERSION)
ds_bindist_DESTDIR	= $$(builddir)/bindist.d

.PHONY: bindist bindist-bin bindist-doc bindist-dev

bindist: bindist-bin bindist-doc bindist-dev

bindist-bin:
	$$(call ds-bindist-make-package,bin-install,$$(ds_bindist_ARCHIVE_BIN))

bindist-doc:
ifneq ($$(strip $$(ds_config_DOC_ENABLED)),)
	$$(call ds-bindist-make-package,doc-install,$$(ds_bindist_ARCHIVE_DOC))
endif

bindist-dev:
ifneq ($$(strip $$(ds_config_DEV_ENABLED)),)
	$$(call ds-bindist-make-package,dev-install,$$(ds_bindist_ARCHIVE_DEV))
endif

.PHONY: bindist-install bindist-bin-install bindist-doc-install bindist-dev-install

bindist-install: bindist-bin-install bindist-doc-install bindist-dev-install

bindist-bin-install:
	$$(call ds-bindist-install,$$(ds_bindist_ARCHIVE_BIN))

bindist-doc-install:
ifneq ($$(strip $$(ds_config_DOC_ENABLED)),)
	$$(call ds-bindist-install,$$(ds_bindist_ARCHIVE_DOC))
endif

bindist-dev-install:
ifneq ($$(strip $$(ds_config_DEV_ENABLED)),)
	$$(call ds-bindist-install,$$(ds_bindist_ARCHIVE_DEV))
endif

endef

# Synopsis:
#
#	$(call ds-bindist-make-package,<INSTALL_RULE>,<ARCHIVE_NAME>)
#
# Description:
#
#  Build a binary distribution archive.

define ds-bindist-make-package
test -d $(ds_bindist_DESTDIR) || $(MKDIR) $(ds_bindist_DESTDIR)
$(RM_SILENT) $(ds_bindist_TMPDIR)
$(MAKE) $(1) DESTDIR=$(ds_bindist_TMPDIR)
$(TAR) --directory=$(ds_bindist_TMPDIR) --create --gzip --verbose \
	--file=$(ds_bindist_DESTDIR)/$(2) .
$(RM_SILENT) $(ds_bindist_TMPDIR)
endef

# Synopsis:
#
#	$(call ds-bindist-install,<ARCHIVE_PATHNAME>)
#
# Description:
#
#  Install a binary distribution archive.

define ds-bindist-install
$(TAR) --directory=/ --extract --gzip --verbose \
	--no-overwrite-dir --no-same-owner --same-permissions \
	--file=$(ds_bindist_DESTDIR)/$(1)
endef

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Predefined modules: Slackware packaging.
## ------------------------------------------------------------

# Synopsis:
#
#	$$(eval $$(call ds-slackware-distribution))
#
# Description:
#
#  Add rules to build a Slackware packages. The "configure.ac"
#  template must hold something like:
#
#	AC_PATH_PROG([ds_slackware_MAKEPKG_PROGRAM],[makepkg],[:],[/sbin:${PATH}])
#	AC_PATH_PROG([ds_slackware_INSTALLPKG_PROGRAM],[installpkg],[:],[/sbin:${PATH}])
#	AC_PATH_PROG([ds_slackware_REMOVEPKG_PROGRAM],[removepkg],[:],[/sbin:${PATH}])
#	AC_PATH_PROG([ds_slackware_UPGRADEPKG_PROGRAM],[upgradepkg],[:],[/sbin:${PATH}])
#
#  or, if using the DevelStuff macros:
#
#	DS_SLACKWARE_PROGRAMS

define ds-slackware-distribution

ds_slackware_REPOSITORY		?= /usr/local/slackware
ds_slackware_PACKAGE_SECTION	?= local
ds_slackware_PACKAGE_DEST	= $$(ds_slackware_REPOSITORY)/$$(ds_slackware_PACKAGE_SECTION)

# Leave it empty to exclude the 'doc' rules.
ds_slackware_DOC_ENABLED	?= $$(ds_config_DOC_ENABLED)

# Leave it empty to exclude the 'dev' rules.
ds_slackware_DEV_ENABLED	?= $$(ds_config_DEV_ENABLED)

ds_slackware_ROOTDIR		?= @ds_slackware_ROOTDIR@
ds_slackware_SUDO_USER		?= root
ds_slackware_SUDO		= $$(SUDO) -u $$(ds_slackware_SUDO_USER)

# This is required because the Slackware programs are in "/sbin",
# which normally is not in the user's 'PATH'.
ds_slackware_PATH_AC		= @ds_slackware_PATH@
ds_slackware_PATH		= $$(call ds-ornull,$$(ds_slackware_PATH_AC),$$(PATH):/sbin)
ds_slackware_ENV		= ROOT=$$(ds_slackware_ROOTDIR) PATH=$$(ds_slackware_PATH)

ds_slackware_TMPDIR		= $$(TMPDIR)/$$(PACKAGE_NAME)-$$(PACKAGE_XVERSION)
ds_slackware_STOREDIR		= $$(builddir)/slackware.d

ds_slackware_MAKEPKG_CHOWN	?= --chown y

ds_slackware_MAKEPKG_PROGRAM	= @ds_slackware_MAKEPKG_PROGRAM@
ds_slackware_INSTALLPKG_PROGRAM	= @ds_slackware_INSTALLPKG_PROGRAM@
ds_slackware_REMOVEPKG_PROGRAM	= @ds_slackware_REMOVEPKG_PROGRAM@
ds_slackware_UPGRADEPKG_PROGRAM	= @ds_slackware_UPGRADEPKG_PROGRAM@

ds_slackware_PRECMD		= $$(ds_slackware_ENV) $$(ds_slackware_SUDO)
ds_slackware_MAKEPKG		= $$(ds_slackware_PRECMD) $$(ds_slackware_MAKEPKG_PROGRAM) $$(ds_slackware_MAKEPKG_CHOWN)
ds_slackware_INSTALLPKG		= $$(ds_slackware_PRECMD) $$(ds_slackware_INSTALLPKG_PROGRAM)
ds_slackware_UPGRADEPKG		= $$(ds_slackware_PRECMD) $$(ds_slackware_UPGRADEPKG_PROGRAM)
ds_slackware_REMOVEPKG		= $$(ds_slackware_PRECMD) $$(ds_slackware_REMOVEPKG_PROGRAM)

# This should be an architecture tag, like 'i486'.
# 'noarch' means that the package works for any
# architecture
ds_slackware_PACKAGE_ARCHITECTURE	?= $(shell $(ds_main_INFRADIR)/config.guess | cut -f1 -d'-')
# This should be the build number followed by
# your initials ('mm' = Marco Maggi).
ds_slackware_PACKAGE_TAG	?= 1mm
ds_slackware_PACKAGE_SPEC	?= -$$(ds_slackware_PACKAGE_ARCHITECTURE)-$$(ds_slackware_PACKAGE_TAG)

ds_slackware_PACKAGE_SUFFIX	= $$(ds_slackware_PACKAGE_SPEC).tgz
ds_slackware_PACKAGE_BIN_FILE	= $$(PACKAGE_NAME)-$$(PACKAGE_XVERSION)$$(ds_slackware_PACKAGE_SUFFIX)
ds_slackware_PACKAGE_DOC_FILE	= $$(PACKAGE_NAME)-doc-$$(PACKAGE_XVERSION)-noarch-$$(ds_slackware_PACKAGE_TAG).tgz
ds_slackware_PACKAGE_DEV_FILE	= $$(PACKAGE_NAME)-dev-$$(PACKAGE_XVERSION)$$(ds_slackware_PACKAGE_SUFFIX)

ds_slackware_STORED_PACKAGE_BIN	= $$(ds_slackware_STOREDIR)/$$(ds_slackware_PACKAGE_BIN_FILE)
ds_slackware_STORED_PACKAGE_DOC	= $$(ds_slackware_STOREDIR)/$$(ds_slackware_PACKAGE_DOC_FILE)
ds_slackware_STORED_PACKAGE_DEV	= $$(ds_slackware_STOREDIR)/$$(ds_slackware_PACKAGE_DEV_FILE)

.PHONY: slackware slackware-install slackware-upgrade slackware-store slackware-clean
.PHONY: slackware-bin slackware-doc slackware-dev

slackware: slackware-bin slackware-doc slackware-dev

slackware-bin: all
	$$(call ds-slackware-make-package,bin,$$(ds_slackware_PACKAGE_BIN_FILE))

slackware-doc: all
ifneq ($$(strip $$(ds_slackware_DOC_ENABLED)),)
	$$(call ds-slackware-make-package,doc,$$(ds_slackware_PACKAGE_DOC_FILE))
endif

slackware-dev: all
ifneq ($$(strip $$(ds_slackware_DEV_ENABLED)),)
	$$(call ds-slackware-make-package,dev,$$(ds_slackware_PACKAGE_DEV_FILE))
endif

## ------------------------------------------------------------

slackware-install:
	$$(ds_slackware_INSTALLPKG) $$(ds_slackware_STORED_PACKAGE_BIN)
ifneq ($$(strip $$(ds_slackware_DOC_ENABLED)),)
	$$(ds_slackware_INSTALLPKG) $$(ds_slackware_STORED_PACKAGE_DOC)
endif
ifneq ($$(strip $$(ds_slackware_DEV_ENABLED)),)
	$$(ds_slackware_INSTALLPKG) $$(ds_slackware_STORED_PACKAGE_DEV)
endif

slackware-upgrade:
	$$(ds_slackware_UPGRADEPKG) --verbose --reinstall \
		$$(call ds-slackware-get-installed-package,$$(PACKAGE_NAME))%$$(ds_slackware_STORED_PACKAGE_BIN)
ifneq ($$(strip $$(ds_slackware_DOC_ENABLED)),)
	$$(ds_slackware_UPGRADEPKG) --verbose --reinstall \
		$$(call ds-slackware-get-installed-package,$$(PACKAGE_NAME)-doc)%$$(ds_slackware_STORED_PACKAGE_DOC)
endif
ifneq ($$(strip $$(ds_slackware_DEV_ENABLED)),)
	$$(ds_slackware_UPGRADEPKG) --verbose --reinstall \
		$$(call ds-slackware-get-installed-package,$$(PACKAGE_NAME)-dev)%$$(ds_slackware_STORED_PACKAGE_DEV)
endif

slackware-remove:
	$$(ds_slackware_REMOVEPKG) $$(ds_slackware_PACKAGE_BIN_FILE)
ifneq ($$(strip $$(ds_slackware_DOC_ENABLED)),)
	$$(ds_slackware_REMOVEPKG) $$(ds_slackware_PACKAGE_DOC_FILE)
endif
ifneq ($$(strip $$(ds_slackware_DEV_ENABLED)),)
	$$(ds_slackware_REMOVEPKG) $$(ds_slackware_PACKAGE_DEV_FILE)
endif

slackware-store:
	$$(MV) $$(ds_slackware_STORED_PACKAGE_BIN) $$(ds_slackware_PACKAGE_DEST)
ifneq ($$(strip $$(ds_slackware_DOC_ENABLED)),)
	$$(MV) $$(ds_slackware_STORED_PACKAGE_DOC) $$(ds_slackware_PACKAGE_DEST)
endif
ifneq ($$(strip $$(ds_slackware_DEV_ENABLED)),)
	$$(MV) $$(ds_slackware_STORED_PACKAGE_DEV) $$(ds_slackware_PACKAGE_DEST)
endif

slackware-clean:
	-@$$(RM) \
		$$(ds_slackware_STORED_PACKAGE_BIN) \
		$$(ds_slackware_STORED_PACKAGE_DOC) \
		$$(ds_slackware_STORED_PACKAGE_DEV)

$$(eval $$(call ds-slackware-install-doinst,bin))
ifneq ($$(strip $$(ds_slackware_DOC_ENABLED)),)
$$(eval $$(call ds-slackware-install-doinst,doc))
endif
ifneq ($$(strip $$(ds_slackware_DEV_ENABLED)),)
$$(eval $$(call ds-slackware-install-doinst,dev))
endif

endef

# Synopsis:
#
#	$(call ds-slackware-make-package,<SECTION>,<PACKAGE_NAME>)
#
# Description:
#
#  Build the Slackware package for a set of files; <SECTION> must be one
#  among: bin, doc, dev. <PACKAGE_NAME> must be the file name of the
#  package, without directory part, with ".tgz" extension.

define ds-slackware-make-package
$(ds_slackware_SUDO) $(RM_SILENT) $(ds_slackware_TMPDIR)
umask 0; $(ds_slackware_SUDO) $(MAKE) $(1)-install DESTDIR=$(ds_slackware_TMPDIR)
$(MAKE) ds_slackware_doinst_$(1)-install DESTDIR=$(ds_slackware_TMPDIR)
cd $(ds_slackware_TMPDIR)/$(ds_slackware_ROOTDIR); $(ds_slackware_MAKEPKG) $(2)
test -d slackware.d || $(MKDIR) slackware.d
$(ds_slackware_SUDO) $(CP) $(ds_slackware_TMPDIR)/$(ds_slackware_ROOTDIR)/$(2) slackware.d
$(ds_slackware_SUDO) $(RM_SILENT) $(ds_slackware_TMPDIR)
endef

# Synopsis:
#
#	$(call ds-slackware-get-installed-package,<PACKAGE_NAME>)
#
# Description:
#
#  Attempt to get the currently installed package name.

define ds-slackware-get-installed-package
$(shell ls $(ds_slackware_ROOTDIR)/var/log/packages | grep '$(1)-[0-9]' | head)
endef


# Synopsis:
#
#	$(eval $(call ds-slackware-install-doinst,<SECTION>))
#
# Description:
#
#  Install the Slackware post-installation script, if any.
#  <SECTION> must be one among: bin, doc, dev.

define ds-slackware-install-doinst

$$(eval $$(call ds-srcdir,ds_slackware_doinst_$(1),$$(srcdir)/meta/slackware/$(1)))
$$(eval $$(call ds-builddir,ds_slackware_doinst_$(1),$$(builddir)/meta.d/slackware/$(1)))

ds_slackware_doinst_$(1)_NAMES		= doinst.sh slack-desc
ds_slackware_doinst_$(1)_SOURCES	= \
	$$(call ds-glob,ds_slackware_doinst_$(1),$$(addsuffix .in,$$(ds_slackware_doinst_$(1)_NAMES)))
ds_slackware_doinst_$(1)_INSTLST	= \
	$$(call ds-replace-dir,$$(ds_slackware_doinst_$(1)_BUILDDIR),$$(ds_slackware_doinst_$(1)_SOURCES:.in=))
ds_slackware_doinst_$(1)_INSTDIR	= $$(ds_slackware_ROOTDIR)/install


.PHONY: ds_slackware_doinst_$(1)-install

ifeq ($$(strip $$(ds_slackware_doinst_$(1)_INSTLST)),)
ds_slackware_doinst_$(1)-install:
else
ds_slackware_doinst_$(1)-install:
	umask 0; $$(ds_slackware_SUDO) $$(INSTALL) -m 0755 -d $$(DESTDIR)$$(ds_slackware_doinst_$(1)_INSTDIR)
	$$(foreach f,$$(ds_slackware_doinst_$(1)_INSTLST),\
	umask 0; $$(ds_slackware_SUDO) $$(INSTALL) -m 0644 $$(f) \
		$$(DESTDIR)$$(ds_slackware_doinst_$(1)_INSTDIR)/$$(notdir $$(f));)
endif

endef


### end of file
# Local Variables:
# mode: makefile
# End:
