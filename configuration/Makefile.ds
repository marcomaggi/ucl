# Makefile --
# 
# Part of: Useless Containers Library (UCL)
# Contents: project rules
# Date: Mon Oct  7, 2002
# 
# Abstract
# 
# 
# 
# Copyright (c) 2002, 2003, 2004 Marco Maggi
# 
# This library is free software;  you can redistribute it and/or modify
# it  under the  terms  of the  GNU  Lesser General  Public License  as
# published by the Free Software  Foundation; either version 2.1 of the
# License, or (at your option) any later version.
# 
# This library is  distributed in the hope that it  will be useful, but
# WITHOUT  ANY   WARRANTY;  without   even  the  implied   warranty  of
# MERCHANTABILITY  or FITNESS FOR  A PARTICULAR  PURPOSE.  See  the GNU
# Lesser General Public License for more details.
# 
# You  should have received  a copy  of the  GNU Lesser  General Public
# License along with  this library; if not, write  to the Free Software
# Foundation, Inc.,  59 Temple Place, Suite 330,  Boston, MA 02111-1307
# USA
# 

#PAGE
## ------------------------------------------------------------
## Compiler rules.
## ------------------------------------------------------------

vpath	%.c	$(top_srcdir)/generic
vpath	%.h	$(top_srcdir)/generic

library_OBJS	= ucl.o ucl_btree.o ucl_circular.o ucl_hash.o \
		  ucl_heap.o ucl_list.o ucl_map.o ucl_string.o \
		  ucl_strtok.o ucl_tree.o ucl_vector.o
#ucl_graph.o

%.o: %.c ucl.h

headers_INSTLST	= $(top_srcdir)/generic/ucl.h

#PAGE
## ------------------------------------------------------------
## Test rules.
## ------------------------------------------------------------

vpath	%.h		$(top_srcdir)/tests
vpath	%.c		$(top_srcdir)/tests

test_CONTAINERS		= btree circular hash heap list map \
			  string strtok tree vector

TEST_SHARED_CFLAGS	= -L. -l$(PACKAGE_NAME)$(PACKAGE_VERSION) -Wl,-rpath,.
TEST_STATIC_CFLAGS	= $(library_STATIC_NAME)

.PHONY: test test-clean

test:		$(foreach t, $(test_CONTAINERS), test-$(t))
test-clean:	$(foreach t, $(test_CONTAINERS), test-$(t)-clean)

showsize: showsize.c
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)

#PAGE
## ------------------------------------------------------------
## Binary tree tests.
## ------------------------------------------------------------

test_btree_SOURCES	= $(wildcard $(top_srcdir)/tests/btree-*.c)
test_btree_OBJECTS	= $(notdir $(test_btree_SOURCES:.c=.o))
test_btree_TARGETS	= $(notdir $(test_btree_SOURCES:.c=))
test_btree_CLEANFILES	= $(test_btree_TARGETS) $(test_btree_OBJECTS) \
			  btreetest.o

.PHONY: test-btree test-btree-clean

test-btree: $(test_btree_TARGETS)
test-btree-clean:
	$(RM) $(test_btree_CLEANFILES)

btree-%.o: btree-%.c btreetest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

btree-%: $(library_SHARED_NAME)
btree-%: btree-%.o btreetest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

btree-%: $(library_STATIC_NAME)
btree-%: btree-%.o btreetest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif

#PAGE
## ------------------------------------------------------------
## Circular list tests.
## ------------------------------------------------------------

test_circular_SOURCES	= $(wildcard $(top_srcdir)/tests/circular-*.c)
test_circular_OBJECTS	= $(notdir $(test_circular_SOURCES:.c=.o))
test_circular_TARGETS	= $(notdir $(test_circular_SOURCES:.c=))
test_circular_CLEANFILES = $(test_circular_TARGETS) $(test_circular_OBJECTS) \
			   circulartest.o

.PHONY: test-circular test-circular-clean

test-circular: $(test_circular_TARGETS)
test-circular-clean:
	$(RM) $(test_circular_CLEANFILES)

circular-%.o: circular-%.c circulartest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

circular-%: $(library_SHARED_NAME)
circular-%: circular-%.o circulartest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

circular-%: $(library_STATIC_NAME)
circular-%: circular-%.o circulartest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif


#PAGE
## ------------------------------------------------------------
## Hash table tests.
## ------------------------------------------------------------

test_hash_SOURCES	= $(wildcard $(top_srcdir)/tests/hash-*.c)
test_hash_OBJECTS	= $(notdir $(test_hash_SOURCES:.c=.o))
test_hash_TARGETS	= $(notdir $(test_hash_SOURCES:.c=))
test_hash_CLEANFILES	= $(test_hash_TARGETS) $(test_hash_OBJECTS) \
			  hashtest.o

.PHONY: test-hash test-hash-clean

test-hash: $(test_hash_TARGETS)
test-hash-clean:
	$(RM) $(test_hash_CLEANFILES)

hash-%.o: hash-%.c hashtest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

hash-%: $(library_SHARED_NAME)
hash-%: hash-%.o hashtest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

hash-%: $(library_STATIC_NAME)
hash-%: hash-%.o hashtest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif


#PAGE
## ------------------------------------------------------------
## Heap tests.
## ------------------------------------------------------------

test_heap_SOURCES	= $(wildcard $(top_srcdir)/tests/heap-*.c)
test_heap_OBJECTS	= $(notdir $(test_heap_SOURCES:.c=.o))
test_heap_TARGETS	= $(notdir $(test_heap_SOURCES:.c=))
test_heap_CLEANFILES	= $(test_heap_TARGETS) $(test_heap_OBJECTS) \
			  heaptest.o

.PHONY: test-heap test-heap-clean

test-heap: $(test_heap_TARGETS)
test-heap-clean:
	$(RM) $(test_heap_CLEANFILES)

heap-%.o: heap-%.c heaptest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

heap-%: $(library_SHARED_NAME)
heap-%: heap-%.o heaptest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

heap-%: $(library_STATIC_NAME)
heap-%: heap-%.o heaptest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif

#PAGE
## ------------------------------------------------------------
## List tests.
## ------------------------------------------------------------

test_list_SOURCES	= $(wildcard $(top_srcdir)/tests/list-*.c)
test_list_OBJECTS	= $(notdir $(test_list_SOURCES:.c=.o))
test_list_TARGETS	= $(notdir $(test_list_SOURCES:.c=))
test_list_CLEANFILES	= $(test_list_TARGETS) $(test_list_OBJECTS) \
			  listtest.o

.PHONY: test-list test-list-clean

test-list: $(test_list_TARGETS)
test-list-clean:
	$(RM) $(test_list_CLEANFILES)

list-%.o: list-%.c listtest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

list-%: $(library_SHARED_NAME)
list-%: list-%.o listtest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

list-%: $(library_STATIC_NAME)
list-%: list-%.o listtest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif


#PAGE
## ------------------------------------------------------------
## Map tests.
## ------------------------------------------------------------

test_map_SOURCES	= $(wildcard $(top_srcdir)/tests/map-*.c)
test_map_OBJECTS	= $(notdir $(test_map_SOURCES:.c=.o))
test_map_TARGETS	= $(notdir $(test_map_SOURCES:.c=))
test_map_CLEANFILES	= $(test_map_TARGETS) $(test_map_OBJECTS) \
			  maptest.o

.PHONY: test-map test-map-clean

test-map: $(test_map_TARGETS)
test-map-clean:
	$(RM) $(test_map_CLEANFILES)

map-%.o: map-%.c maptest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

map-%: $(library_SHARED_NAME)
map-%: map-%.o maptest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

map-%: $(library_STATIC_NAME)
map-%: map-%.o maptest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif


#PAGE
## ------------------------------------------------------------
## String tests.
## ------------------------------------------------------------

test_string_SOURCES	= $(wildcard $(top_srcdir)/tests/string-*.c)
test_string_OBJECTS	= $(notdir $(test_string_SOURCES:.c=.o))
test_string_TARGETS	= $(notdir $(test_string_SOURCES:.c=))
test_string_CLEANFILES	= $(test_string_TARGETS) $(test_string_OBJECTS) \
			  stringtest.o

.PHONY: test-string test-string-clean

test-string: $(test_string_TARGETS)
test-string-clean:
	$(RM) $(test_string_CLEANFILES)

string-%.o: string-%.c stringtest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

string-%: $(library_SHARED_NAME)
string-%: string-%.o stringtest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

string-%: $(library_STATIC_NAME)
string-%: string-%.o stringtest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif


#PAGE
## ------------------------------------------------------------
## Strtok token tests.
## ------------------------------------------------------------

test_strtok_SOURCES	= $(wildcard $(top_srcdir)/tests/strtok-*.c)
test_strtok_OBJECTS	= $(notdir $(test_strtok_SOURCES:.c=.o))
test_strtok_TARGETS	= $(notdir $(test_strtok_SOURCES:.c=))
test_strtok_CLEANFILES	= $(test_strtok_TARGETS) $(test_strtok_OBJECTS) \
			  strtoktest.o

.PHONY: test-strtok test-strtok-clean

test-strtok: $(test_strtok_TARGETS)
test-strtok-clean:
	$(RM) $(test_strtok_CLEANFILES)

strtok-%.o: strtok-%.c strtoktest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

strtok-%: $(library_SHARED_NAME)
strtok-%: strtok-%.o strtoktest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

strtok-%: $(library_STATIC_NAME)
strtok-%: strtok-%.o strtoktest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif


#PAGE
## ------------------------------------------------------------
## Tree tests.
## ------------------------------------------------------------

test_tree_SOURCES	= $(wildcard $(top_srcdir)/tests/tree-*.c)
test_tree_OBJECTS	= $(notdir $(test_tree_SOURCES:.c=.o))
test_tree_TARGETS	= $(notdir $(test_tree_SOURCES:.c=))
test_tree_CLEANFILES	= $(test_tree_TARGETS) $(test_tree_OBJECTS) \
			  treetest.o

.PHONY: test-tree test-tree-clean

test-tree: $(test_tree_TARGETS)
test-tree-clean:
	$(RM) $(test_tree_CLEANFILES)

tree-%.o: tree-%.c treetest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

tree-%: $(library_SHARED_NAME)
tree-%: tree-%.o treetest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

tree-%: $(library_STATIC_NAME)
tree-%: tree-%.o treetest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif


#PAGE
## ------------------------------------------------------------
## Vector tests.
## ------------------------------------------------------------

test_vector_SOURCES	= $(wildcard $(top_srcdir)/tests/vector-*.c)
test_vector_OBJECTS	= $(notdir $(test_vector_SOURCES:.c=.o))
test_vector_TARGETS	= $(notdir $(test_vector_SOURCES:.c=))
test_vector_CLEANFILES	= $(test_vector_TARGETS) $(test_vector_OBJECTS) \
			  vectortest.o

.PHONY: test-vector test-vector-clean

test-vector: $(test_vector_TARGETS)
test-vector-clean:
	$(RM) $(test_vector_CLEANFILES)

vector-%.o: vector-%.c vectortest.h

ifeq	(,$(TEST_LINK_STATIC_LIBRARY))

vector-%: $(library_SHARED_NAME)
vector-%: vector-%.o vectortest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(TEST_SHARED_CFLAGS) $(^) -o $(@)
#	-LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./$(@)
	-./$(@)
	$(RM) $(@)

else

vector-%: $(library_STATIC_NAME)
vector-%: vector-%.o vectortest.o
	$(CC) $(ALL_CFLAGS) $(CFLAGS) $(^) $(TEST_STATIC_CFLAGS) -o $(@)
	-./$(@)
	$(RM) $(@)

endif

### end of file
# Local Variables:
# mode: makefile
# page-delimiter: "^#PAGE"
# End:
