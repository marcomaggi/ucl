@c overview-using.texiinc --
@c 
@c

@c  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@macro pkgconfig{}
@command{pkgconfig}
@end macro

@c  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
@c The following values must be defined before the inclusion of this
@c file.

@ignore
@set using_package_name         @ng{}
@set using_package              neko-glibc
@set using_PACKAGE              NEKO_GLIBC
@set using_config_script        neko-glibc-config
@set using_xversion             1.0a1
@set using_version              1.0.0
@set using_iface_version        1.2
@set using_autoconf_macro       NEKO_GLIBC
@end ignore

@c  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c ------------------------------------------------------------
@node overview using
@section Using the library


@noindent
In the following we assume that the library is installed under the
@file{/usr/local} hierarchy, the extended version identifier is
@value{using_xversion}, the version identifier is @value{using_version}
and the interface version is @value{using_iface_version}.

A shell script is installed on the system to provide informations about
version numbers and installation directories; it should be
@file{/usr/local/bin/@value{using_config_script}}.  Run
@command{@value{using_config_script}} without arguments for the usage
screen.  An example of output for the important options is:

@example
$ @value{using_config_script} --package-xversion
@value{using_xversion}

$ @value{using_config_script} --package-version
@value{using_version}

$ @value{using_config_script} --library-interface-version
@value{using_iface_version}

$ @value{using_config_script} --pkgincludedir
/usr/local/include/@value{using_package}/@value{using_xversion}

$ @value{using_config_script} --libdir
/usr/local/lib

$ @value{using_config_script} --library-id
@value{using_package}@value{using_iface_version}
@end example

There is a single header file that must be included in C sources:
@file{@value{using_package}.h}; in our source code we can put:

@example
#include <@value{using_package}.h>
@end example

@noindent
and use the output of @code{@value{using_config_script} --pkgincludedir}
as argument to the @code{-I} option of the C preprocessor.

The libraries are installed under the directory obtained by running
@code{@value{using_config_script} --libdir}; we can use its output as
argument of the @code{-L} option to the linker.

If we want to link with the shared or static library we take the output
of @code{@value{using_config_script} --library-id} and use it as value
for the @code{-l} option to the linker.

If this library implements the stub mechanism and we want to use it: we
have to link with the static stub library; the script has an option for
it:

@example
$ @value{using_config_script} --stub-static-library-id
@value{using_package}staticstub@value{using_iface_version}
@end example

@noindent
we take the output of @code{@value{using_config_script}
--stub-static-library-id} and use it as value for the @code{-l} option
to the linker.


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c ------------------------------------------------------------
@node overview autoconf
@section Using @gnu{} Autoconf to load @value{using_package_name}


@noindent
If you use @gnu{} Autoconf to configure your application you can embed
in your distribution the file @file{@value{using_package}.m4}, installed
under @file{$prefix/share/aclocal}, and load it in your
@file{configure.ac} by putting:

@example
m4_include(@value{using_package}.m4)
@end example

@noindent
in @file{aclocal.m4}.  This macro file defines a function that can be
invoked with:

@example
@value{using_autoconf_macro}
@end example

@noindent
it finds and invokes @command{@value{using_config_script}} to acquire
installation directories and library names.  The macro accepts two
arguments: the major and minor interface version numbers that are
needed; both of the arguments are optional, but it is recommended to
specify them.

@code{@value{using_autoconf_macro}} defines the following symbols:

@table @code
@item @@@value{using_PACKAGE}_INCLUDEDIR@@
the directory under which header files are installed, example:
@file{/usr/local/include/@value{using_package}/@value{using_xversion}};

@item @@@value{using_PACKAGE}_LIBDIR@@
the directory under which shared and static libraries are installed,
example: @file{/usr/local/lib};

@item @@@value{using_PACKAGE}_CPPFLAGS@@
the preprocessor option @option{-I} with the value of
@code{@@@value{using_PACKAGE}_INCLUDEDIR@@} appended, example:
@code{-I/usr/local/include/@value{using_package}/@value{using_xversion}};
this value should be appended to the value of the @var{CPPFLAGS}
variable in your @file{Makefile};

@item @@@value{using_PACKAGE}_LDFLAGS@@
the linker option @option{-L} with the value of
@code{@@@value{using_PACKAGE}_LIBDIR@@} appended, example:
@file{-L/usr/local/lib}; this value should be appended to the value of
the @code{LDFLAGS} variable in your @file{Makefile};

@item @@@value{using_PACKAGE}_LIBRARY_ID@@
the identifier of the shared or static library, example:
@code{@value{using_package}@value{using_iface_version}};

@item @@@value{using_PACKAGE}_LIBS@@
the linker option @option{-l} with the value of
@code{@@@value{using_PACKAGE}_LIBRARY_ID@@} appended, example:
@code{-l@value{using_package}@value{using_iface_version}}; this value
must be appended to the command line of the linking command for
libraries and programs that directly use the @value{using_package_name};
for example: it could be appended to the value of the @code{LIBS}
variable in your @file{Makefile};

@item @@@value{using_PACKAGE}_STUB_STATIC_LIBRARY_ID@@
the identifier of the static stub library, example:
@code{@value{using_package}staticstub@value{using_iface_version}};

@item @@@value{using_PACKAGE}_STUB_LIBS@@
the linker option @option{-l} with the value of
@code{@@@value{using_PACKAGE}_STUB_STATIC_LIBRARY_ID@@} appended,
example:
@code{-l@value{using_package}staticstub@value{using_iface_version}};
this value must be appended to the command line of the linking command
for libraries and programs that use the @value{using_package_name}
through the stub mechanism; for example: it could be appended to the
value of the @code{LIBS} variable in your @file{Makefile}.
@end table

You have to choose: you link directly @strong{or} you link with the stub
mechanism; that is: you use @code{@@@value{using_PACKAGE}_LIBS@@}
@strong{or} you use @code{@@@value{using_PACKAGE}_STUB_LIBS@@}.


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c ------------------------------------------------------------
@node overview pkgconfig
@section Using pkgconfig to load @value{using_package_name}


@noindent
@pkgconfig{} is a program (a compiled executable) that inspects a
database of package meta informations and prints to its standard output
channel informations about installed packages and libraries.  The
@value{using_package_name} installs a meta data file for use with
@pkgconfig{}, it should be:

@example
$@{libdir@}/pkgconfig/@value{using_package}.pc
@end example

For the full list of available informations look in the file itself, and
remember that the value of all the variables set in the meta file can be
printed with:

@example
$ pkg-config @value{using_package} --variable=<VARNAME>
@end example

@noindent
an example of output for the important variables is:

@example
$ pkg-config @value{using_package} --variable=PACKAGE_XVERSION
@value{using_xversion}

$ pkg-config @value{using_package} --variable=PACKAGE_VERSION
@value{using_version}

$ pkg-config @value{using_package} --variable=library_interface_version
@value{using_iface_version}

$ pkg-config @value{using_package} --variable=pkgincludedir
/usr/local/include/@value{using_package}/@value{using_xversion}

$ pkg-config @value{using_package} --variable=libdir
/usr/local/lib

$ pkg-config @value{using_package} --variable=library_id
@value{using_package}@value{using_iface_version}

$ pkg-config @value{using_package} --variable=stub_static_library_id
@value{using_package}staticstub@value{using_iface_version}
@end example

Since the suggested method to link with the @value{using_package_name} is the
stub mechanism, the @option{--libs} option outputs something like:

@example
$ pkg-config @value{using_package} --libs
-L/usr/local/lib -ldl -l@value{using_package}staticstub@value{using_iface_version}
@end example

@noindent
while the list of preprocessor options is:

@example
$ pkg-config @value{using_package} --cflags
-D@value{using_PACKAGE}_ENABLE_STUB=1 -I/usr/local/include/@value{using_package}/@value{using_xversion}
@end example

Notice that:

@example
$ pkg-config @value{using_package} --modversion
@value{using_iface_version}
@end example

@noindent
because what matters is the version of the library interface, not the
package distribution version.


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c end of file
@c Local Variables:
@c mode: texinfo
@c page-separator: \"^@c -+$\"
@c End:
