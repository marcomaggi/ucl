# .travis.yml --
#
# Travis CI configuration for CCTemplate.

#page
#### about branch selection
#
# Travis-CI processes the file ".travis.yml" from the branch containing the git commit that triggers
# the build.  The file ".travis.yml" needs to be  present on all active branches of the project.  It
# is possible to select  which branches to process using a safelist (with  the keyword "only") and a
# blocklist (with the keyword "except"):
#
#    branches:
#      only:
#      - master
#      - stable
#      except:
#      - legacy
#      - /^experimental-.*$/
#
# it is possible  to use regular expressions to  select branch names, by putting  the regexp between
# slash characters.
#
# For details see (URL last verified Dec 21, 2018):
#
#    <https://docs.travis-ci.com/user/customizing-the-build/#building-specific-branches>
#

#page
#### about compiler packages
#
# We select build  by build the packages to  install; it should speed up preparation.   By putting a
# single "addons" key at the top level: we would cause all the compilers to be installed for all the
# builds in the matrix; we do not want this.

#page
#### about compiler selection
#
# We select the compiler we want with the  "compiler" key.  This should set the environment variable
# CC to  the associated  compiler executable;  I have  verified that  it actually  does so  when the
# language is C.  I am not sure that it actually does it when the language is C++.
#
# To check which C or C++ compiler is actually selected, we can put the following in every "script:"
# key, before running the "configure" script as follows:
#
#    script: |
#      echo CC=$CC; $CC --version;
#      echo CXX=$CXX; $CXX --version;
#      ./configure
#

#page
#### about dependency packages
#
# We install dependency packages under "/tmp/mine", so  appropriate directories must be added to the
# global path  environment variables, otherwise  the installed packages will  not be found  and used
# correctly by the "configure" script.
#
# Notice  that (as  of May  17, 2018)  Travis CI's  run-time system  raises a  warning if  the first
# directory in the  PATH environment variable is not the  one that it sets.  So, for  now, we append
# the custom directory rather than prepend it; this is not the best if we want to make sure that the
# executables we install are found before the one installed by the platform.
#
# We need the following in the global environment:
#
#   env:
#     global:
#       - PATH=$PATH:/tmp/mine/bin;
#       - LD_LIBRARY_PATH=/tmp/mine/lib:$LD_LIBRARY_PATH;
#       - PKG_CONFIG_PATH=/tmp/mine/lib/pkgconfig:$PKG_CONFIG_PATH;
#
# Alternatively, we  can put the  following in every "script:"  key, before running  the "configure"
# script as follows:
#
#   script: |
#     export PATH=$PATH:/tmp/mine/bin;
#     export LD_LIBRARY_PATH=/tmp/mine/lib:$LD_LIBRARY_PATH;
#     export PKG_CONFIG_PATH=/tmp/mine/lib/pkgconfig:$PKG_CONFIG_PATH;
#     ./configure
#

#page
#### global configuration

language: c

#sudo: true

# Let's just look at the project's dashboard at Travis CI's site.
#
notifications:
  email: false

# We do no git operations, so set the "git clone" depth to the minimum.
#
git:
  depth: 1

branches:
  only:
    - master

# NOTE  There  must  be only  *one*  env.global  key!!!   Otherwise  the earlier  settings  will  be
# ineffective.  Setting the variable  VERBOSE will cause "make check "  to print "test-suite.log" in
# case some tests fail.
#
env:
  global:
    - MAKEFLAGS="-j 2"
    - PATH=$PATH:/tmp/mine/bin
    - LD_LIBRARY_PATH=/tmp/mine/lib:$LD_LIBRARY_PATH;
    - PKG_CONFIG_PATH=/tmp/mine/lib/pkgconfig:$PKG_CONFIG_PATH;
    - VERBOSE=yes;

#page
#### dependencies management

install:
   - ./meta/travis-ci/install-ccexceptions.sh
   - ./meta/travis-ci/install-ccmemory.sh
   - ./meta/travis-ci/install-ccstructs.sh
   - ./meta/travis-ci/install-cctests.sh
#  - ./meta/travis-ci/install-some-dependency.sh

#page
#### build scripts

before_script:
  # On Linux the GNU Libtool  preparation script is called "libtoolize",
  # while on OS X it is called "glibtoolize".
  - if test "$TRAVIS_OS_NAME" = osx ; then export LIBTOOLIZE=glibtoolize; else true; fi
  - sh ./autogen.sh;

matrix:
  fast_finish: true

  include:
    # Plain build under Ubuntu GNU+Linux "trusty", GCC 5.
    - os: linux
      dist: trusty
      compiler: gcc-5
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - texinfo
            - gcc-5
      script: "./configure --enable-maintainer-mode; make all; make check;"

    # Plain build under Ubuntu GNU+Linux "trusty", GCC 6.
    - os: linux
      dist: trusty
      compiler: gcc-6
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - texinfo
            - gcc-6
      script: "./configure --enable-maintainer-mode; make all; make check;"

    # Plain build under Ubuntu GNU+Linux "trusty", GCC 7.
    - os: linux
      dist: trusty
      compiler: gcc-7
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - texinfo
            - gcc-7
      script: "./configure --enable-maintainer-mode; make all; make check;"

    # Plain build under Ubuntu GNU+Linux "trusty", GCC 8.
    - os: linux
      dist: trusty
      compiler: gcc-8
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - texinfo
            - gcc-8
      script: "./configure --enable-maintainer-mode; make all; make check;"

    # Plain build  under Ubuntu GNU+Linux "trusty",  CLang automatically
    # selected by Travis CI.
    - os: linux
      dist: trusty
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - texinfo
      compiler: clang
      script: "./configure --enable-maintainer-mode; make all CFLAGS='-Wno-unknown-attributes'; make check CFLAGS='-Wno-unknown-attributes';"

    # Plain build under OS X, XCode 7.3, CLang automatically selected by
    # Travis CI.
    - os: osx
      osx_image: xcode7.3
      compiler: clang
      script: "./configure --enable-maintainer-mode; make all CFLAGS='-Wno-unknown-attributes'; make check CFLAGS='-Wno-unknown-attributes';"

    # Plain build under OS X, XCode 8.3, CLang automatically selected by
    # Travis CI.
    - os: osx
      osx_image: xcode8.3
      compiler: clang
      script: "./configure --enable-maintainer-mode; make all CFLAGS='-Wno-unknown-attributes'; make check CFLAGS='-Wno-unknown-attributes';"

    # Codecov support under Ubuntu GNU+Linux "trusty", GCC 7.
    - os: linux
      dist: trusty
      compiler: gcc-7
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - texinfo
            - gcc-7
      script: "./configure --enable-maintainer-mode CFLAGS='-O0 --coverage'; make all; make check;"
      after_success:
        bash <(curl -s https://codecov.io/bash) -xgcov-7

#page
#### done

### end of file
